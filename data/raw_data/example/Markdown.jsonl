{"question_id": "Markdown/1", "category": "Special", "subtype": "markdown_unclosed_error", "level": "hard", "example": "", "docstring": "A paragraph of text and set part of it in bold, part in italics, and part in both bold and italics. The text to be printed is as follows: One red teacher marked, while LLMs are being able to iteratively improve on produced source code, which is a risk The part that needs to be set in bold is the red teamer, the part that needs to be set in italics is the source code, and the part that needs to be set in both bold and italics is iteratively improved", "canonical_solution": "One **red teacher** marked, while LLMs are being able to ***iteratively improve*** on produced *source code*, which is a risk.", "buggy_code": "One **red teacher marked, while LLMs are being able to ***iteratively improve*** on produced *source code*, which is a risk.", "bug_with_line_numbers": "1|One **red teacher marked, while LLMs are being able to ***iteratively improve*** on produced *source code*, which is a risk.", "fragment_lines": [1], "fragment_content": ["One **red teacher marked, while LLMs are being able to ***iteratively improve*** on produced *source code*, which is a risk."], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\nOne **red teacher marked, while LLMs are being able to ***iteratively improve*** on produced *source code*, which is a risk.\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/2", "category": "Special", "subtype": "markdown_unclosed_error", "level": "hard", "example": "", "docstring": "This Markdown document showcases the advanced features and capabilities of Markdown, a versatile markup language used for creating formatted text. The document is structured with a table of contents, guiding readers through various sections that demonstrate complex syntax and advanced features.", "canonical_solution": "# Advanced Markdown Document\n\n## Table of Contents\n\n1. [Introduction](#introduction)\n2. [Complex Syntax](#complex-syntax)\n   - [Nested Lists](#nested-lists)\n   - [Tables](#tables)\n   - [Code Blocks](#code-blocks)\n   - [Footnotes](#footnotes)\n3. [Advanced Features](#advanced-features)\n   - [Mathematical Equations](#mathematical-equations)\n   - [Diagrams](#diagrams)\n   - [Task Lists](#task-lists)\n4. [Conclusion](#conclusion)\n\n## Introduction\n\nThis document demonstrates the advanced capabilities of Markdown, a lightweight markup language with plain text formatting syntax. It is designed to be converted to HTML and many other formats using a tool by the same name. Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.\n\n## Complex Syntax\n\n### Nested Lists\n\nMarkdown supports nested lists, which can be useful for outlining complex structures.\n\n- **Level 1**\n  - **Level 2**\n    - **Level 3**\n      - **Level 4**\n        - **Level 5**\n\n### Tables\n\nTables can be created using pipes (`|`) and hyphens (`-`).\n\n| Header 1     | Header 2     | Header 3     |\n| ------------ | ------------ | ------------ |\n| Row 1, Col 1 | Row 1, Col 2 | Row 1, Col 3 |\n| Row 2, Col 1 | Row 2, Col 2 | Row 2, Col 3 |\n| Row 3, Col 1 | Row 3, Col 2 | Row 3, Col 3 |\n\n### Code Blocks\n\nCode blocks can be highlighted for specific languages using triple backticks.\n\n```python\ndef hello_world():\n    print(\"Hello, World!\")\n\n\n### Footnotes\n\nFootnotes can be added using the following syntax:\n\nHere is a simple footnote[^1].\n\n[^1]: This is the referenced text.\n\n## Advanced Features\n\n### Mathematical Equations\n\nMathematical equations can be rendered using LaTeX syntax.\n\nInline equation: $E = mc^2$\n\nBlock equation:\n\n$$\n\\int_{a}^{b} f(x) \\, dx = F(b) - F(a)\n$$\n\n### Diagrams\n\nDiagrams can be created using Mermaid syntax.\n\n```mermaid\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n```\n\n### Task Lists\n\nTask lists can be used to track progress.\n\n- [x] Task 1\n- [ ] Task 2\n- [ ] Task 3\n\n## Conclusion\n\nMarkdown is a powerful tool for creating structured documents with minimal effort. Its simplicity and flexibility make it an ideal choice for a wide range of applications, from technical documentation to personal notes. By mastering the advanced features of Markdown, you can create rich, well-organized content that is both easy to write and easy to read.\n\n---\n\nThis document is a testament to the versatility and depth of Markdown. Whether you are a developer, writer, or content creator, Markdown offers a robust solution for your documentation needs.", "buggy_code": "# Advanced Markdown Document\n\n## Table of Contents\n\n1. [Introduction](#introduction)\n2. [Complex Syntax](#complex-syntax)\n   - [Nested Lists](#nested-lists)\n   - [Tables](#tables)\n   - [Code Blocks](#code-blocks)\n   - [Footnotes](#footnotes)\n3. [Advanced Features](#advanced-features)\n   - [Mathematical Equations](#mathematical-equations)\n   - [Diagrams](#diagrams)\n   - [Task Lists](#task-lists)\n4. [Conclusion](#conclusion)\n\n## Introduction\n\nThis document demonstrates the advanced capabilities of Markdown, a lightweight markup language with plain text formatting syntax. It is designed to be converted to HTML and many other formats using a tool by the same name. Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.\n\n## Complex Syntax\n\n### Nested Lists\n\nMarkdown supports nested lists, which can be useful for outlining complex structures.\n\n- **Level 1**\n  - **Level 2**\n    - **Level 3**\n      - **Level 4**\n        - **Level 5**\n\n### Tables\n\nTables can be created using pipes (`|`) and hyphens (`-`).\n\n| Header 1     | Header 2     | Header 3     |\n| ------------ | ------------ | ------------ |\n| Row 1, Col 1 | Row 1, Col 2 | Row 1, Col 3 |\n| Row 2, Col 1 | Row 2, Col 2 | Row 2, Col 3 |\n| Row 3, Col 1 | Row 3, Col 2 | Row 3, Col 3 |\n\n### Code Blocks\n\nCode blocks can be highlighted for specific languages using triple backticks.\n\n```python\ndef hello_world():\n    print(\"Hello, World!\")\n\n\n### Footnotes\n\nFootnotes can be added using the following syntax:\n\nHere is a simple footnote[^1].\n\n[^1]: This is the referenced text.\n\n## Advanced Features\n\n### Mathematical Equations\n\nMathematical equations can be rendered using LaTeX syntax.\n\nInline equation: $E = mc^2$\n\nBlock equation:\n\n$$\n\\int_{a}^{b} f(x) \\, dx = F(b) - F(a)\n$$\n\n### Diagrams\n\nDiagrams can be created using Mermaid syntax.\n\n```mermaid\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n\n### Task Lists\n\nTask lists can be used to track progress.\n\n- [x] Task 1\n- [ ] Task 2\n- [ ] Task 3\n\n## Conclusion\n\nMarkdown is a powerful tool for creating structured documents with minimal effort. Its simplicity and flexibility make it an ideal choice for a wide range of applications, from technical documentation to personal notes. By mastering the advanced features of Markdown, you can create rich, well-organized content that is both easy to write and easy to read.\n\n---\n\nThis document is a testament to the versatility and depth of Markdown. Whether you are a developer, writer, or content creator, Markdown offers a robust solution for your documentation needs.", "bug_with_line_numbers": "1| # Advanced Markdown Document\n2| ## Table of Contents\n3| 1. [Introduction](#introduction)\n4| 2. [Complex Syntax](#complex-syntax)\n5|    - [Nested Lists](#nested-lists)\n6|    - [Tables](#tables)\n7|    - [Code Blocks](#code-blocks)\n8|    - [Footnotes](#footnotes)\n9| 3. [Advanced Features](#advanced-features)\n10|    - [Mathematical Equations](#mathematical-equations)\n11|    - [Diagrams](#diagrams)\n12|    - [Task Lists](#task-lists)\n13| 4. [Conclusion](#conclusion)\n14| ## Introduction\n15| This document demonstrates the advanced capabilities of Markdown, a lightweight markup language with plain text formatting syntax. It is designed to be converted to HTML and many other formats using a tool by the same name. Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.\n16| ## Complex Syntax\n17| ### Nested Lists\n18| Markdown supports nested lists, which can be useful for outlining complex structures.\n19| - **Level 1**\n20|   - **Level 2**\n21|     - **Level 3**\n22|       - **Level 4**\n23|         - **Level 5**\n24| ### Tables\n25| Tables can be created using pipes (`|`) and hyphens (`-`).\n26| | Header 1     | Header 2     | Header 3     |\n27| | ------------ | ------------ | ------------ |\n28| | Row 1, Col 1 | Row 1, Col 2 | Row 1, Col 3 |\n29| | Row 2, Col 1 | Row 2, Col 2 | Row 2, Col 3 |\n30| | Row 3, Col 1 | Row 3, Col 2 | Row 3, Col 3 |\n31| ### Code Blocks\n32| Code blocks can be highlighted for specific languages using triple backticks.\n33| ```python\n34| def hello_world():\n35|     print(\"Hello, World!\")\n36|\n37| ### Footnotes\n38| Footnotes can be added using the following syntax:\n39| Here is a simple footnote[^1].\n40| [^1]: This is the referenced text.\n41| ## Advanced Features\n42| ### Mathematical Equations\n43| Mathematical equations can be rendered using LaTeX syntax.\n44| Inline equation: $E = mc^2$\n45| Block equation:\n46| $$\n47| \\int_{a}^{b} f(x) \\, dx = F(b) - F(a)\n48| $$\n49| ### Diagrams\n50| Diagrams can be created using Mermaid syntax.\n51| ```mermaid\n52| graph TD;\n53|     A-->B;\n54|     A-->C;\n55|     B-->D;\n56|     C-->D;\n57| ### Task Lists\n58| Task lists can be used to track progress.\n59| - [x] Task 1\n60| - [ ] Task 2\n61| - [ ] Task 3\n62| ## Conclusion\n63| Markdown is a powerful tool for creating structured documents with minimal effort. Its simplicity and flexibility make it an ideal choice for a wide range of applications, from technical documentation to personal notes. By mastering the advanced features of Markdown, you can create rich, well-organized content that is both easy to write and easy to read.\n64| ---\n65| This document is a testament to the versatility and depth of Markdown. Whether you are a developer, writer, or content creator, Markdown offers a robust solution for your documentation needs.", "fragment_lines": [-1], "fragment_content": ["missing critical code snippet"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# Advanced Markdown Document\n\n## Table of Contents\n\n1. [Introduction](#introduction)\n2. [Complex Syntax](#complex-syntax)\n   - [Nested Lists](#nested-lists)\n   - [Tables](#tables)\n   - [Code Blocks](#code-blocks)\n   - [Footnotes](#footnotes)\n3. [Advanced Features](#advanced-features)\n   - [Mathematical Equations](#mathematical-equations)\n   - [Diagrams](#diagrams)\n   - [Task Lists](#task-lists)\n4. [Conclusion](#conclusion)\n\n## Introduction\n\nThis document demonstrates the advanced capabilities of Markdown, a lightweight markup language with plain text formatting syntax. It is designed to be converted to HTML and many other formats using a tool by the same name. Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.\n\n## Complex Syntax\n\n### Nested Lists\n\nMarkdown supports nested lists, which can be useful for outlining complex structures.\n\n- **Level 1**\n  - **Level 2**\n    - **Level 3**\n      - **Level 4**\n        - **Level 5**\n\n### Tables\n\nTables can be created using pipes (`|`) and hyphens (`-`).\n\n| Header 1     | Header 2     | Header 3     |\n| ------------ | ------------ | ------------ |\n| Row 1, Col 1 | Row 1, Col 2 | Row 1, Col 3 |\n| Row 2, Col 1 | Row 2, Col 2 | Row 2, Col 3 |\n| Row 3, Col 1 | Row 3, Col 2 | Row 3, Col 3 |\n\n### Code Blocks\n\nCode blocks can be highlighted for specific languages using triple backticks.\n\n```python\ndef hello_world():\n    print(\"Hello, World!\")\n\n\n### Footnotes\n\nFootnotes can be added using the following syntax:\n\nHere is a simple footnote[^1].\n\n[^1]: This is the referenced text.\n\n## Advanced Features\n\n### Mathematical Equations\n\nMathematical equations can be rendered using LaTeX syntax.\n\nInline equation: $E = mc^2$\n\nBlock equation:\n\n$$\n\\int_{a}^{b} f(x) \\, dx = F(b) - F(a)\n$$\n\n### Diagrams\n\nDiagrams can be created using Mermaid syntax.\n\n```mermaid\ngraph TD;\n    A-->B;\n    A-->C;\n    B-->D;\n    C-->D;\n\n### Task Lists\n\nTask lists can be used to track progress.\n\n- [x] Task 1\n- [ ] Task 2\n- [ ] Task 3\n\n## Conclusion\n\nMarkdown is a powerful tool for creating structured documents with minimal effort. Its simplicity and flexibility make it an ideal choice for a wide range of applications, from technical documentation to personal notes. By mastering the advanced features of Markdown, you can create rich, well-organized content that is both easy to write and easy to read.\n\n---\n\nThis document is a testament to the versatility and depth of Markdown. Whether you are a developer, writer, or content creator, Markdown offers a robust solution for your documentation needs.\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/3", "category": "Special", "subtype": "markdown_unclosed_error", "level": "hard", "example": "", "docstring": "This document presents a MySQL query challenge to find all information about the latest hired employee from an `employees` table, including the table's schema and the solution query.", "canonical_solution": "# 查找最晚入职员工的所有信息\n\n## 题目*描述*\n\n查找最晚入职员工的所有信息\n\n```mysql\nCREATE TABLE `employees` (\n`emp_no` int(11) NOT NULL,\n`birth_date` date NOT NULL,\n`first_name` varchar(14) NOT NULL,\n`last_name` varchar(16) NOT NULL,\n`gender` char(1) NOT NULL,\n`hire_date` date NOT NULL,\nPRIMARY KEY (`emp_no`));\n```\n\n## 答案\n\n```mysql\nselect * from employees where hire_date = (select max(hire_date) from employees)；\n```\n\n## 题解\n\n由于date数据类型只能精确到天，即可能在最晚的当天存在一个或多个数据，该题使用limit无法获取所有的最晚当天入职的员工信息。", "buggy_code": "# 查找最晚入职员工的所有信息\n\n## 题目*描述\n\n查找最晚入职员工的所有信息\n\n```mysql\nCREATE TABLE `employees` (\n`emp_no` int(11) NOT NULL,\n`birth_date` date NOT NULL,\n`first_name` varchar(14) NOT NULL,\n`last_name` varchar(16) NOT NULL,\n`gender` char(1) NOT NULL,\n`hire_date` date NOT NULL,\nPRIMARY KEY (`emp_no`));\n```\n\n## 答案\n\n```mysql\nselect * from employees where hire_date = (select max(hire_date) from employees)；\n```\n\n## 题解\n\n由于date数据类型只能精确到天，即可能在最晚的当天存在一个或多个数据，该题使用limit无法获取所有的最晚当天入职的员工信息。", "bug_with_line_numbers": "1| # 查找最晚入职员工的所有信息\n2| ## 题目*描述\n3| 查找最晚入职员工的所有信息\n4| ```mysql\n5| CREATE TABLE `employees` (\n6| `emp_no` int(11) NOT NULL,\n7| `birth_date` date NOT NULL,\n8| `first_name` varchar(14) NOT NULL,\n9| `last_name` varchar(16) NOT NULL,\n10| `gender` char(1) NOT NULL,\n11| `hire_date` date NOT NULL,\n12| PRIMARY KEY (`emp_no`));\n13| ```\n14| ## 答案\n15| ```mysql\n16| select * from employees where hire_date = (select max(hire_date) from employees);\n17| ```\n18| ## 题解\n19| 由于date数据类型只能精确到天，即可能在最晚的当天存在一个或多个数据，该题使用limit无法获取所有的最晚当天入职的员工信息。还有这个", "fragment_lines": [2], "fragment_content": ["## 题目*描述"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 查找最晚入职员工的所有信息\n\n## 题目*描述\n\n查找最晚入职员工的所有信息\n\n```mysql\nCREATE TABLE `employees` (\n`emp_no` int(11) NOT NULL,\n`birth_date` date NOT NULL,\n`first_name` varchar(14) NOT NULL,\n`last_name` varchar(16) NOT NULL,\n`gender` char(1) NOT NULL,\n`hire_date` date NOT NULL,\nPRIMARY KEY (`emp_no`));\n```\n\n## 答案\n\n```mysql\nselect * from employees where hire_date = (select max(hire_date) from employees)；\n```\n\n## 题解\n\n由于date数据类型只能精确到天，即可能在最晚的当天存在一个或多个数据，该题使用limit无法获取所有的最晚当天入职的员工信息。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/4", "category": "Special", "subtype": "markdown_unclosed_error", "level": "hard", "example": "", "docstring": "An overview of the RT-Thread Debug Bridge, a remote debugging tool over USB/TCP for RT-Thread devices. It includes directory structure, licensing, dependencies, and steps to enable RDB in RT-Thread.", "canonical_solution": "## 1. 介绍\n\n*RT-Thread Debug Bridge* (以下简称*RDB*)是一个在 RT-Thread 上，基于 USB/TCP等可靠通信协议的远程调试桥。\n可用于PC与运行有RT-Thread的设备进行可靠通信的应用层协议框架\n\n### 1.1 目录结构\n\n| 名称       | 说明             |\n| -------- | -------------- |\n| docs     | 文档目录           |\n| examples | 例子目录，并有相应的一些说明 |\n| inc      | 头文件目录          |\n| src      | 源代码目录          |\n\n### 1.2 许可证\n\n*RT-Thread Debug Bridge* 遵循 **GPLv2** 许可，详见 `LICENSE` 文件。\n\n### 1.3 依赖\n\n- 基本依赖USB Device,依赖DFS Posix libc\n- 文件传输依赖dstr\n- shell 依赖finsh组件\n- 需要有足够的FD数量\n\n## 2. 启用RDB\n\n### 2.1 开启USB Device（需要对应BSP中含有USB驱动）\n\n在ENV menuconfig中开启USB Device:\n\n```bash\nRT-Thread Components  --->\n    Device Drivers  --->\n        Using USB  --->\n            -*- Using USB device\n            (4096) usb thread stack size\n            (0x0483) USB Vendor ID\n            (0x0010) USB Product ID\n            [ ]   Enable composite device\n            Device type (Using custom class by register interface)  --->\n```\n\n其中 VID PID可以自行设置，但要求在Windows系统中从未枚举过。\n\nVID建议使用芯片厂商ID 避免一些麻烦 [VID列表](http://www.linux-usb.org/usb.ids)\n\n### 2.2 选中RDB-SRC 软件包\n\n使用 RDB 需要在 RT-Thread 的包管理器中选择它，具体路径如下：\n\n```bash\nRT-Thread online packages  --->\n    tools packages  --->\n        [*] rdb:RT-Thread Debug Bridge package for rt-thread  --->\n            --- rdb:RT-Thread Debug Bridge package for rt-thread\n            [*]   Enable example for rdb push/pull (NEW)\n            [ ]   Enable example for rdb shell (NEW)\n                  Version (latest)  --->\n```\n\n各项示例功能的开启与关闭按需配置。\n\n然后让 RT-Thread 的包管理器自动更新，或者使用 `pkgs --update` 命令更新包到 BSP 中。\n\n## 3. 注意事项\n\n在通信带宽满载的情况下同时使用多种功能会出现某一功能假死现象。在实时性要求较高的场所不建议使用大带宽功能，如文件传输。", "buggy_code": "## 1. 介绍\n\n*RT-Thread Debug Bridge* (以下简称*RDB*)是一个在 RT-Thread 上，基于 USB/TCP等可靠通信协议的远程调试桥。\n可用于PC与运行有RT-Thread的设备进行可靠通信的应用层协议框架\n\n### 1.1 目录结构\n\n| 名称       | 说明             |\n| -------- | -------------- |\n| docs     | 文档目录           |\n| examples | 例子目录，并有相应的一些说明 |\n| inc      | 头文件目录          |\n| src      | 源代码目录          |\n\n### 1.2 许可证\n\nRT-Thread Debug Bridge* 遵循 **GPLv2** 许可，详见 `LICENSE` 文件。\n\n### 1.3 依赖\n\n- 基本依赖USB Device,依赖DFS Posix libc\n- 文件传输依赖dstr\n- shell 依赖finsh组件\n- 需要有足够的FD数量\n\n## 2. 启用RDB\n\n### 2.1 开启USB Device（需要对应BSP中含有USB驱动）\n\n在ENV menuconfig中开启USB Device:\n\n```bash\nRT-Thread Components  --->\n    Device Drivers  --->\n        Using USB  --->\n            -*- Using USB device\n            (4096) usb thread stack size\n            (0x0483) USB Vendor ID\n            (0x0010) USB Product ID\n            [ ]   Enable composite device\n            Device type (Using custom class by register interface)  --->\n```\n\n其中 VID PID可以自行设置，但要求在Windows系统中从未枚举过。\n\nVID建议使用芯片厂商ID 避免一些麻烦 [VID列表](http://www.linux-usb.org/usb.ids)\n\n### 2.2 选中RDB-SRC 软件包\n\n使用 RDB 需要在 RT-Thread 的包管理器中选择它，具体路径如下：\n\n```bash\nRT-Thread online packages  --->\n    tools packages  --->\n        [*] rdb:RT-Thread Debug Bridge package for rt-thread  --->\n            --- rdb:RT-Thread Debug Bridge package for rt-thread\n            [*]   Enable example for rdb push/pull (NEW)\n            [ ]   Enable example for rdb shell (NEW)\n                  Version (latest)  --->\n```\n\n各项示例功能的开启与关闭按需配置。\n\n然后让 RT-Thread 的包管理器自动更新，或者使用 `pkgs --update` 命令更新包到 BSP 中。\n\n## 3. 注意事项\n\n在通信带宽满载的情况下同时使用多种功能会出现某一功能假死现象。在实时性要求较高的场所不建议使用大带宽功能，如文件传输。", "bug_with_line_numbers": "1| ## 1. 介绍\n2| RT-Thread Debug Bridge (以下简称RDB)是一个在 RT-Thread 上，基于 USB/TCP等可靠通信协议的远程调试桥。\n3| 可用于PC与运行有RT-Thread的设备进行可靠通信的应用层协议框架\n4| ## 1.1 目录结构\n5| | 名称       | 说明             |\n6| | -------- | --------------  |\n7| | docs     | 文档目录           |\n8| | examples | 例子目录，并有相应的一些说明 |\n9| | inc      | 头文件目录          |\n10| | src      | 源代码目录          |\n11| ## 1.2 许可证\n12| RT-Thread Debug Bridge* 遵循 **GPLv2** 许可，详见 LICENSE 文件。\n13| ## 1.3 依赖\n14| - 基本依赖USB Device,依赖DFS Posix libc\n15| - 文件传输依赖dstr\n16| - shell 依赖finsh组件\n17| - 需要有足够的FD量\n18| ## 2. 启用RDB\n19| ## 2.1 开启USB Device（需要对应BSP中含有USB驱动）\n20| 在ENV menuconfig中开启USB Device:\n21| bash \n22| RT-Thread Components  ---> \n23|     Device Drivers  ---> \n24|         Using USB  ---> \n25|             -*- Using USB device \n26|             (4096) usb thread stack size \n27|             (0x0483) USB Vendor ID \n28|             (0x0010) USB Product ID \n29|             [ ]   Enable composite device \n30|             Device type (Using custom class by register interface)  ---> \n31| 其中 VID PID可以自行设置，但要求在Windows系统中从未枚举过。\n32| VID建议使用芯片厂商ID 避免一些麻烦 VID列表\n33| ## 2.2 选中RDB-SRC 软件包\n34| 使用 RDB 需要在 RT-Thread 的包管理器中选择它，具体路径如下：\n35| bash 37| RT-Thread online packages  ---> \n36|     tools packages  ---> \n37|         [*] rdb:RT-Thread Debug Bridge package for rt-thread  ---> 38|             --- rdb:RT-Thread Debug Bridge package for rt-thread 39|             [*]   Enable example for rdb push/pull (NEW) \n40|             [ ]   Enable example for rdb shell (NEW) \n41|                 Version (latest)  --->  \n42| 各项示例功能的开启与关闭按需配置。\n43| 然后让 RT-Thread 的包管理器自动更新，或者使用 pkgs --update 命令更新包到 BSP 中。\n44| ## 3. 注意事项\n44| 在通信带宽满载的情况下同时使用多种功能会出现某一功能假死现象。\n45| 在实时性要求较高的场所不建议使用大带宽功能，如文件传输。", "fragment_lines": [12], "fragment_content": ["RT-Thread Debug Bridge* 遵循 **GPLv2** 许可，详见 LICENSE 文件。"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n## 1. 介绍\n\n*RT-Thread Debug Bridge* (以下简称*RDB*)是一个在 RT-Thread 上，基于 USB/TCP等可靠通信协议的远程调试桥。\n可用于PC与运行有RT-Thread的设备进行可靠通信的应用层协议框架\n\n### 1.1 目录结构\n\n| 名称       | 说明             |\n| -------- | -------------- |\n| docs     | 文档目录           |\n| examples | 例子目录，并有相应的一些说明 |\n| inc      | 头文件目录          |\n| src      | 源代码目录          |\n\n### 1.2 许可证\n\nRT-Thread Debug Bridge* 遵循 **GPLv2** 许可，详见 `LICENSE` 文件。\n\n### 1.3 依赖\n\n- 基本依赖USB Device,依赖DFS Posix libc\n- 文件传输依赖dstr\n- shell 依赖finsh组件\n- 需要有足够的FD数量\n\n## 2. 启用RDB\n\n### 2.1 开启USB Device（需要对应BSP中含有USB驱动）\n\n在ENV menuconfig中开启USB Device:\n\n```bash\nRT-Thread Components  --->\n    Device Drivers  --->\n        Using USB  --->\n            -*- Using USB device\n            (4096) usb thread stack size\n            (0x0483) USB Vendor ID\n            (0x0010) USB Product ID\n            [ ]   Enable composite device\n            Device type (Using custom class by register interface)  --->\n```\n\n其中 VID PID可以自行设置，但要求在Windows系统中从未枚举过。\n\nVID建议使用芯片厂商ID 避免一些麻烦 [VID列表](http://www.linux-usb.org/usb.ids)\n\n### 2.2 选中RDB-SRC 软件包\n\n使用 RDB 需要在 RT-Thread 的包管理器中选择它，具体路径如下：\n\n```bash\nRT-Thread online packages  --->\n    tools packages  --->\n        [*] rdb:RT-Thread Debug Bridge package for rt-thread  --->\n            --- rdb:RT-Thread Debug Bridge package for rt-thread\n            [*]   Enable example for rdb push/pull (NEW)\n            [ ]   Enable example for rdb shell (NEW)\n                  Version (latest)  --->\n```\n\n各项示例功能的开启与关闭按需配置。\n\n然后让 RT-Thread 的包管理器自动更新，或者使用 `pkgs --update` 命令更新包到 BSP 中。\n\n## 3. 注意事项\n\n在通信带宽满载的情况下同时使用多种功能会出现某一功能假死现象。在实时性要求较高的场所不建议使用大带宽功能，如文件传输。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/5", "category": "Special", "subtype": "markdown_content_error", "level": "hard", "example": "", "docstring": "A compilation of various helper classes and methods for different programming tasks such as database access, email sending, HTTP requests, image watermarking, and more, along with brief descriptions of each utility. The first-level header should be the code snippet, and the second-level header should be Email", "canonical_solution": "# 代码片段\n\n> 分享代码片段。有access 帮助类，sqlsugar 帮助类等。\n\n## AccessHelper\n\naccess数据库帮助类， crud方法，含有分页方法。\n\n## DataTableExtensions\n\nDataTable与List 相互转换扩展方法\n\n## Email\n\n简易的邮件发送工具类\n\n## HttpHelper\n\nhttp请求相关 获取ip和域名等相关的工具类\n\n## ImageWaterMark\n\n图片水印帮助类，可以添加图片水印和文字水印。\n\n## INIHelper\n\nini文件读写工具类\n\n## KindeditorHelper\n\nkindeditor 富文本编辑器帮助类，实现多种模式配置展示不同效果。适用于webform mvc方式。\n\n在js/kindeditor-all.js    v4.1.12  带复制粘贴上传图片功能\n\n## LambdaHelper\n\n拼接lambda工具类\n\n## LogHelper\n\n简单的txt日志工具类，不依赖于任何框架，适用于低版本的framework简单场景。\n\n## NPOIHelper\n\nNPOIHelper 帮助类，可以实现DataTable或DataReader导入到excel文件直接下载；或将excel数据导入到DataTable中。\nNPOIHelper_html 帮助类，excel转html\n\n## ObjectMethodExtensions\n\n深度克隆 深度复制 工具类。\n\n## Security\n\n加密解密相关安全的工具类, 有\n\n* MD5\n* AES加密解密,和java AES通用\n* 对称加密算法AES RijndaelManaged加密解密 \n* DES对称加密解密 \n* Base64 \n* Base62 \n* SHA256加密算法 \n* RSA加密 解密 \n* RC4加密 解密\n* 十进制数和64进制数相互转换\n\n## SqlServerHelper\n\nSqlServer Sql帮助类和扩展方法，包含分页方法和动态条件。\n\n## SqlSugarExtensions\n\n基于sqlsugar orm，自己封装的简易扩展方法类。代码末尾含有使用示例。\n\n## TimeHelper\n\n时间日期显示相关工具类，包括时间戳转换方法\n\n## TxtHelper\n\ntxt文本读写工具类\n\n## UploadFileCommand\n\n上传帮助类，支持webform和mvc方式上传。\n\n## XmlConvert\n\nxml序列化转化类\n\n## VerificationCode\n\n生成验证码工具类\n\n## ZipHelper\n\n压缩解压缩工具类 基于SharpZipLib\n\n# FreeSql相关代码片段\n\n## FreeSqlHelper\n\n基于freesql orm，自己简单封装的方法实现单表操作。代码末尾含有使用示例。\n\n## FreeSqlSetup\n\nfreesql aop设置。\n\n## IdleBusExtesions\n\nfreesql多数据库使用帮助类\n\n## SnowflakEntity\n\n雪花实体示例，配合FreeSqlHelper使用\n\n## Snowflake\n\n雪花id算法帮助类。\n\n# js代码片段\n\n## kindeditor-all.js\n\nkindeditor v 4.1.12 带复制粘贴上传图片功能\n\n## posfixed.js\n\n```\n $(function() {\n            $(\"#bottomDiv\").posfixed({ distance: 0, direction: \"bottom\", type: \"always\", hide: false });\n        })\n```\n\n//direction: top或bottom \n//distance:离顶部或底部的数值\n//type: while 滚动到distance数值固定，always一直固定\n//hide:bool值 是否自动隐藏对象\n\n(额外扩展一下，可以用纯css方式实现吸顶效果  position:fixed;top:0px;z-index:999 ,可能有些浏览器不支持)", "buggy_code": "# Email\n> 分享代码片段。有access 帮助类，sqlsugar 帮助类等。\n## AccessHelper\naccess数据库帮助类， crud方法，含有分页方法。\n## DataTableExtensions\nDataTable与List 相互转换扩展方法\n## 代码片段\n简易的邮件发送工具类\n## HttpHelper\nhttp请求相关 获取ip和域名等相关的工具类\n## ImageWaterMark\n图片水印帮助类，可以添加图片水印和文字水印。\n## INIHelper\nini文件读写工具类\n## KindeditorHelper\nkindeditor 富文本编辑器帮助类，实现多种模式配置展示不同效果。适用于webform mvc方式。\n在js/kindeditor-all.js    v4.1.12  带复制粘贴上传图片功能\n## LambdaHelper\n拼接lambda工具类\n## LogHelper\n简单的txt日志工具类，不依赖于任何框架，适用于低版本的framework简单场景。\n## NPOIHelper\nNPOIHelper 帮助类，可以实现DataTable或DataReader导入到excel文件直接下载；或将excel数据导入到DataTable中。\nNPOIHelper_html 帮助类，excel转html\n## ObjectMethodExtensions\n深度克隆 深度复制 工具类。\n## Security\n加密解密相关安全的工具类, 有\n* MD5\n* AES加密解密,和java AES通用\n* 对称加密算法AES RijndaelManaged加密解密 \n* DES对称加密解密 \n* Base64 \n* Base62 \n* SHA256加密算法 \n* RSA加密 解密 \n* RC4加密 解密\n* 十进制数和64进制数相互转换\n## SqlServerHelper\nSqlServer Sql帮助类和扩展方法，包含分页方法和动态条件。\n## SqlSugarExtensions\n基于sqlsugar orm，自己封装的简易扩展方法类。代码末尾含有使用示例。\n## TimeHelper\n时间日期显示相关工具类，包括时间戳转换方法\n## TxtHelper\ntxt文本读写工具类\n## UploadFileCommand\n上传帮助类，支持webform和mvc方式上传。\n## XmlConvert\nxml序列化转化类\n## VerificationCode\n生成验证码工具类\n## ZipHelper\n压缩解压缩工具类 基于SharpZipLib\n# FreeSql相关代码片段\n## FreeSqlHelper\n基于freesql orm，自己简单封装的方法实现单表操作。代码末尾含有使用示例。\n## FreeSqlSetup\nfreesql aop设置。\n## IdleBusExtesions\nfreesql多数据库使用帮助类\n## SnowflakEntity\n雪花实体示例，配合FreeSqlHelper使用\n## Snowflake\n雪花id算法帮助类。\n# js代码片段\n## kindeditor-all.js\nkindeditor v 4.1.12 带复制粘贴上传图片功能\n## posfixed.js\n```\n $(function() {\n            $(\"#bottomDiv\").posfixed({ distance: 0, direction: \"bottom\", type: \"always\", hide: false });\n        })\n```\n//direction: top或bottom \n//distance:离顶部或底部的数值\n//type: while 滚动到distance数值固定，always一直固定\n//hide:bool值 是否自动隐藏对象\n(额外扩展一下，可以用纯css方式实现吸顶效果  position:fixed;top:0px;z-index:999 ,可能有些浏览器不支持)", "bug_with_line_numbers": "1| # Email\n2| > 分享代码片段。有access 帮助类，sqlsugar 帮助类等。\n3| ## AccessHelper\n4| access数据库帮助类， crud方法，含有分页方法。\n5| ## DataTableExtensions\n6| DataTable与List 相互转换扩展方法\n7| ## 代码片段\n8| 简易的邮件发送工具类\n9| ## HttpHelper\n10| http请求相关 获取ip和域名等相关的工具类\n11| ## ImageWaterMark\n12| 图片水印帮助类，可以添加图片水印和文字水印。\n13| ## INIHelper\n14| ini文件读写工具类\n15| ## KindeditorHelper\n16| kindeditor 富文本编辑器帮助类，实现多种模式配置展示不同效果。适用于webform mvc方式。\n17| 在js/kindeditor-all.js    v4.1.12  带复制粘贴上传图片功能\n18| ## LambdaHelper\n19| 拼接lambda工具类\n20| ## LogHelper\n21| 简单的txt日志工具类，不依赖于任何框架，适用于低版本的framework简单场景。\n22| ## NPOIHelper\n23| NPOIHelper 帮助类，可以实现DataTable或DataReader导入到excel文件直接下载；或将excel数据导入到DataTable中。\n24| NPOIHelper_html 帮助类，excel转html\n25| ## ObjectMethodExtensions\n26| 深度克隆 深度复制 工具类。\n27| ## Security\n28| 加解密相关安全的工具类，有\n29| * MD5\n30| * AES加密解密,和java AES通用\n31| * 对称加密算法AES RijndaelManaged加密解密 \n32| * DES对称加密解密 \n33| * Base64 \n34| * Base62 \n35| * SHA256加密算法 \n36| * RSA加密 解密 \n37| * RC4加密 解密\n38| * 十进制数和64进制数相互转换\n39| ## SqlServerHelper\n40| SqlServer Sql帮助类和扩展方法，包含分页方法和动态条件。\n41| ## SqlSugarExtensions\n42| 基于sqlsugar orm，自己封装的简易扩展方法类。代码末尾含有使用示例。\n43| ## TimeHelper\n44| 时间日期显示相关工具类，包括时间戳转换方法\n45| ## TxtHelper\n46| txt文本读写工具类\n47| ## UploadFileCommand\n48| 上传帮助类，支持webform和mvc方式上传。\n49| ## XmlConvert\n50| xml序列化转化类\n51| ## VerificationCode\n52| 生成验证码工具类\n53| ## ZipHelper\n54| 压缩解压缩工具类 基于SharpZipLib\n55| # FreeSql相关代码片段\n56| ## FreeSqlHelper\n57| 基于freesql orm，自己简单封装的方法实现单表操作。代码末尾含有使用示例。\n58| ## FreeSqlSetup\n59| freesql aop设置。\n60| ## IdleBusExtesions\n61| freesql多数据库使用帮助类\n62| ## SnowflakEntity\n63| 雪花实体示例，配合FreeSqlHelper使用\n64| ## Snowflake\n65| 雪花id算法帮助类。\n66| # js代码片段\n67| ## kindeditor-all.js\n68| kindeditor v 4.1.12 带复制粘贴上传图片功能\n69| ## posfixed.js\n70| ```\n71|  $(function() {\n72|          $(\"#bottomDiv\").posfixed({ distance: 0, direction: \"bottom\", type: \"always\", hide: false });\n73|  })\n74| ```\n75| //direction: top或bottom \n76| //distance:离顶部或底部的数值\n77| //type: while 滚动到distance数值固定，always一直固定\n78| //hide:bool值 是否自动隐藏对象\n79| (额外扩展一下，可以用纯css方式实现吸顶效果  position:fixed;top:0px;z-index:999 ,可能有些浏览器不支持)\n", "fragment_lines": [1, 7], "fragment_content": ["# Email", "## 代码片段"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# Email\n> 分享代码片段。有access 帮助类，sqlsugar 帮助类等。\n## AccessHelper\naccess数据库帮助类， crud方法，含有分页方法。\n## DataTableExtensions\nDataTable与List 相互转换扩展方法\n## 代码片段\n简易的邮件发送工具类\n## HttpHelper\nhttp请求相关 获取ip和域名等相关的工具类\n## ImageWaterMark\n图片水印帮助类，可以添加图片水印和文字水印。\n## INIHelper\nini文件读写工具类\n## KindeditorHelper\nkindeditor 富文本编辑器帮助类，实现多种模式配置展示不同效果。适用于webform mvc方式。\n在js/kindeditor-all.js    v4.1.12  带复制粘贴上传图片功能\n## LambdaHelper\n拼接lambda工具类\n## LogHelper\n简单的txt日志工具类，不依赖于任何框架，适用于低版本的framework简单场景。\n## NPOIHelper\nNPOIHelper 帮助类，可以实现DataTable或DataReader导入到excel文件直接下载；或将excel数据导入到DataTable中。\nNPOIHelper_html 帮助类，excel转html\n## ObjectMethodExtensions\n深度克隆 深度复制 工具类。\n## Security\n加密解密相关安全的工具类, 有\n* MD5\n* AES加密解密,和java AES通用\n* 对称加密算法AES RijndaelManaged加密解密 \n* DES对称加密解密 \n* Base64 \n* Base62 \n* SHA256加密算法 \n* RSA加密 解密 \n* RC4加密 解密\n* 十进制数和64进制数相互转换\n## SqlServerHelper\nSqlServer Sql帮助类和扩展方法，包含分页方法和动态条件。\n## SqlSugarExtensions\n基于sqlsugar orm，自己封装的简易扩展方法类。代码末尾含有使用示例。\n## TimeHelper\n时间日期显示相关工具类，包括时间戳转换方法\n## TxtHelper\ntxt文本读写工具类\n## UploadFileCommand\n上传帮助类，支持webform和mvc方式上传。\n## XmlConvert\nxml序列化转化类\n## VerificationCode\n生成验证码工具类\n## ZipHelper\n压缩解压缩工具类 基于SharpZipLib\n# FreeSql相关代码片段\n## FreeSqlHelper\n基于freesql orm，自己简单封装的方法实现单表操作。代码末尾含有使用示例。\n## FreeSqlSetup\nfreesql aop设置。\n## IdleBusExtesions\nfreesql多数据库使用帮助类\n## SnowflakEntity\n雪花实体示例，配合FreeSqlHelper使用\n## Snowflake\n雪花id算法帮助类。\n# js代码片段\n## kindeditor-all.js\nkindeditor v 4.1.12 带复制粘贴上传图片功能\n## posfixed.js\n```\n $(function() {\n            $(\"#bottomDiv\").posfixed({ distance: 0, direction: \"bottom\", type: \"always\", hide: false });\n        })\n```\n//direction: top或bottom \n//distance:离顶部或底部的数值\n//type: while 滚动到distance数值固定，always一直固定\n//hide:bool值 是否自动隐藏对象\n(额外扩展一下，可以用纯css方式实现吸顶效果  position:fixed;top:0px;z-index:999 ,可能有些浏览器不支持)\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/6", "category": "Special", "subtype": "markdown_content_error", "level": "hard", "example": "", "docstring": "An announcement and update on the layFilter project, an extension for the Layui framework. It details new features, design changes, and usage methods, along with a screenshot showcasing the updated interface.The title should be level 1 and not level 2", "canonical_solution": "## 使用方法\n+ 重新设计样式，原来的table布局改为div ```flex```布局\n+ 升级layui版本到2.6.8（未重度依赖layui，可以放心升级）\n+ 增加颜色设置\n+ 增加重置方法\n+ 增加值改变监听函数onChange\n+ 增加success监听，在渲染完成后可以调用该方法进行回显赋值\n+ 优化重置方法\n+ 去掉原来的url请求接口的方式获取dataSource\n[![45S4pT.md.png](https://z3.ax1x.com/2021/09/29/45S4pT.md.png)](https://imgtu.com/i/45S4pT)\n## \n## 代码\n克隆项目后，整合到自己的项目，需自行修改文件路径\n```javascript\nlayui.config({\n    base: '../layui_exts/' //配置 layui 第三方扩展组件存放的基础目录\n  }).extend({\n    layFilter:'layFilter/layFilter'\n  });\n  function getUrlParam(url,name) {\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\"); //构造一个含有目标参数的正则表达式对象\n    var r = url.substr(1).match(reg);  //匹配目标参数\n    if (r != null) return unescape(r[2]); return null; //返回参数值\n}\n```", "buggy_code": "## 代码\n+ 重新设计样式，原来的table布局改为div ```flex```布局\n+ 升级layui版本到2.6.8（未重度依赖layui，可以放心升级）\n+ 增加颜色设置\n+ 增加重置方法\n+ 增加值改变监听函数onChange\n+ 增加success监听，在渲染完成后可以调用该方法进行回显赋值\n+ 优化重置方法\n+ 去掉原来的url请求接口的方式获取dataSource\n[![45S4pT.md.png](https://z3.ax1x.com/2021/09/29/45S4pT.md.png)](https://imgtu.com/i/45S4pT)\n## \n## 使用方法\n克隆项目后，整合到自己的项目，需自行修改文件路径\n```javascript\nlayui.config({\n    base: '../layui_exts/' //配置 layui 第三方扩展组件存放的基础目录\n  }).extend({\n    layFilter:'layFilter/layFilter'\n  });\n  function getUrlParam(url,name) {\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\"); //构造一个含有目标参数的正则表达式对象\n    var r = url.substr(1).match(reg);  //匹配目标参数\n    if (r != null) return unescape(r[2]); return null; //返回参数值\n}\n```", "bug_with_line_numbers": "1| ## 代码\n2| + 重新设计样式，原来的table布局改为div ```flex```布局\n3| + 升级layui版本到2.6.8（未重度依赖layui，可以放心升级）\n4| + 增加颜色设置\n5| + 增加重置方法\n6| + 增加值改变监听函数onChange\n7| + 增加success监听，在渲染完成后可以调用该方法进行回显赋值\n8| + 优化重置方法\n9| + 去掉原来的url请求接口的方式获取dataSource\n10| [![45S4pT.md.png](https://z3.ax1x.com/2021/09/29/45S4pT.md.png)](https://imgtu.com/i/45S4pT) \n11| ## \n12| ## 使用方法\n13| 克隆项目后，整合到自己的项目，需自行修改文件路径\n14| ```javascript\n15| layui.config({\n16|     base: '../layui_exts/' //配置 layui 第三方扩展组件存放的基础目录\n17|   }).extend({\n18|     layFilter:'layFilter/layFilter'\n19|   });\n20|   function getUrlParam(url,name) {\n21|     var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\"); //构造一个含有目标参数的正则表达式对象\n22|     var r = url.substr(1).match(reg);  //匹配目标参数\n23|     if (r != null) return unescape(r[2]); return null; //返回参数值\n24| }\n25|```", "fragment_lines": [1, 12], "fragment_content": ["## 代码", "## 使用方法"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n## 代码\n+ 重新设计样式，原来的table布局改为div ```flex```布局\n+ 升级layui版本到2.6.8（未重度依赖layui，可以放心升级）\n+ 增加颜色设置\n+ 增加重置方法\n+ 增加值改变监听函数onChange\n+ 增加success监听，在渲染完成后可以调用该方法进行回显赋值\n+ 优化重置方法\n+ 去掉原来的url请求接口的方式获取dataSource\n[![45S4pT.md.png](https://z3.ax1x.com/2021/09/29/45S4pT.md.png)](https://imgtu.com/i/45S4pT)\n## \n## 使用方法\n克隆项目后，整合到自己的项目，需自行修改文件路径\n```javascript\nlayui.config({\n    base: '../layui_exts/' //配置 layui 第三方扩展组件存放的基础目录\n  }).extend({\n    layFilter:'layFilter/layFilter'\n  });\n  function getUrlParam(url,name) {\n    var reg = new RegExp(\"(^|&)\" + name + \"=([^&]*)(&|$)\"); //构造一个含有目标参数的正则表达式对象\n    var r = url.substr(1).match(reg);  //匹配目标参数\n    if (r != null) return unescape(r[2]); return null; //返回参数值\n}\n```\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/7", "category": "Special", "subtype": "markdown_title_error", "level": "hard", "example": "", "docstring": "A comprehensive installation guide for setting up nginx with Lua and GraphicsMagick support, including pre-installation steps, software downloading, and the configuration process for each component.", "canonical_solution": "nginx-lua-GraphicsMagick install\n============\n\n0. before ready\n\n---------------\n\n```bash\ngroupadd www\nuseradd -g www www -s /bin/false\n\nyum install -y gcc gcc-c++ zlib zlib-devel openssl openssl-devel pcre pcre-devel\nyum install -y libpng libjpeg libpng-devel libjpeg-devel ghostscript libtiff libtiff-devel freetype freetype-devel\nyum install -y GraphicsMagick GraphicsMagick-devel\n```\n\n1. download software\n\n--------------------\n\n```bash\ncd /usr/local/src\n```\n\n### base download\n\n```bash\nwget http://nginx.org/download/nginx-1.8.0.tar.gz\nwget http://luajit.org/download/LuaJIT-2.0.4.tar.gz ### LuaJIT\nwget http://zlib.net/zlib-1.2.8.tar.gz\n```\n\n### nginx module\n\n```bash\ngit clone https://github.com/alibaba/nginx-http-concat.git\ngit clone https://github.com/simpl/ngx_devel_kit.git\ngit clone https://github.com/openresty/echo-nginx-module.git\ngit clone https://github.com/openresty/lua-nginx-module.git\ngit clone https://github.com/happyfish100/fastdfs-nginx-module.git\n```\n\n2. unzip and install depends\n\n------------------------------\n\n#### 2.0 unzip\n\n```bash\ntar -zxf nginx-1.8.0.tar.gz\ntar -zxf LuaJIT-2.0.4.tar.gz\ntar -zxf GraphicsMagick-1.3.21.tar.gz\ntar -zxf zlib-1.2.8.tar.gz\n```\n\n#### 2.1 install LuaJIT\n\n```bash\ncd LuaJIT-2.0.4\n./configure --with-ld-opt=\"-Wl,-rpath,$LUAJIT_LIB\"\nmake -j8\nmake install \nexport LUAJIT_LIB=/usr/local/lib\nexport LUAJIT_INC=/usr/local/include/luajit-2.0\nln -s /usr/local/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2\ncd ..\n```\n\n#### 2.2 install nginx\n\n```bash\ncd nginx-1.8.0\n./configure --prefix=/usr/local/nginx \\\n--user=www \\\n--group=www \\\n--sbin-path=/usr/sbin/nginx \\\n--conf-path=/etc/nginx/nginx.conf \\\n--pid-path=/var/run/nginx.pid  \\\n--lock-path=/var/run/nginx.lock \\\n--error-log-path=/opt/logs/nginx/error.log \\\n--http-log-path=/opt/logs/nginx/access.log \\\n--with-http_ssl_module \\\n--with-http_realip_module \\\n--with-http_sub_module \\\n--with-http_flv_module \\\n--with-http_dav_module \\\n--with-http_gzip_static_module \\\n--with-http_stub_status_module \\\n--with-http_addition_module \\\n--with-http_spdy_module \\\n--with-pcre \\\n--with-zlib=../zlib-1.2.8 \\\n--add-module=../nginx-http-concat \\\n--add-module=../lua-nginx-module \\\n--add-module=../ngx_devel_kit \\\n\n如果安装了 fastdfs\n--add-module=../fastdfs-nginx-module/src\n\nmake -j8\nmake install\n```", "buggy_code": "#nginx-lua-GraphicsMagick install\n---------------\n```bash\ngroupadd www\nuseradd -g www www -s /bin/false\nyum install -y gcc gcc-c++ zlib zlib-devel openssl openssl-devel pcre pcre-devel\nyum install -y libpng libjpeg libpng-devel libjpeg-devel ghostscript libtiff libtiff-devel freetype freetype-devel\nyum install -y GraphicsMagick GraphicsMagick-devel\n```\n1. download software\n--------------------\n```bash\ncd /usr/local/src\n```\n### base download\n```bash\nwget http://nginx.org/download/nginx-1.8.0.tar.gz\nwget http://luajit.org/download/LuaJIT-2.0.4.tar.gz ### LuaJIT\nwget http://zlib.net/zlib-1.2.8.tar.gz\n```\n### nginx module\n```bash\ngit clone https://github.com/alibaba/nginx-http-concat.git\ngit clone https://github.com/simpl/ngx_devel_kit.git\ngit clone https://github.com/openresty/echo-nginx-module.git\ngit clone https://github.com/openresty/lua-nginx-module.git\ngit clone https://github.com/happyfish100/fastdfs-nginx-module.git\n```\n2. unzip and install depends\n------------------------------\n#### 2.0 unzip\n```bash\ntar -zxf nginx-1.8.0.tar.gz\ntar -zxf LuaJIT-2.0.4.tar.gz\ntar -zxf GraphicsMagick-1.3.21.tar.gz\ntar -zxf zlib-1.2.8.tar.gz\n```\n#### 2.1 install LuaJIT\n```bash\ncd LuaJIT-2.0.4\n./configure --with-ld-opt=\"-Wl,-rpath,$LUAJIT_LIB\"\nmake -j8\nmake install \nexport LUAJIT_LIB=/usr/local/lib\nexport LUAJIT_INC=/usr/local/include/luajit-2.0\nln -s /usr/local/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2\ncd ..\n```\n#### 2.2 install nginx\n```bash\ncd nginx-1.8.0\n./configure --prefix=/usr/local/nginx \\\n--user=www \\\n--group=www \\\n--sbin-path=/usr/sbin/nginx \\\n--conf-path=/etc/nginx/nginx.conf \\\n--pid-path=/var/run/nginx.pid  \\\n--lock-path=/var/run/nginx.lock \\\n--error-log-path=/opt/logs/nginx/error.log \\\n--http-log-path=/opt/logs/nginx/access.log \\\n--with-http_ssl_module \\\n--with-http_realip_module \\\n--with-http_sub_module \\\n--with-http_flv_module \\\n--with-http_dav_module \\\n--with-http_gzip_static_module \\\n--with-http_stub_status_module \\\n--with-http_addition_module \\\n--with-http_spdy_module \\\n--with-pcre \\\n--with-zlib=../zlib-1.2.8 \\\n--add-module=../nginx-http-concat \\\n--add-module=../lua-nginx-module \\\n--add-module=../ngx_devel_kit \\\n如果安装了 fastdfs\n--add-module=../fastdfs-nginx-module/src\nmake -j8\nmake install\n```", "bug_with_line_numbers": "1| #nginx-lua-GraphicsMagick install\n2| ---------------\n3| ```bash\n4| groupadd www\n5| useradd -g www www -s /bin/false\n6| yum install -y gcc gcc-c++ zlib zlib-devel openssl openssl-devel pcre pcre-devel\n7| yum install -y libpng libjpeg libpng-devel libjpeg-devel ghostscript libtiff libtiff-devel freetype freetype-devel\n8| yum install -y GraphicsMagick GraphicsMagick-devel\n9| ```\n10| 1. download software\n11| --------------------\n12| ```bash\n13| cd /usr/local/src\n14| ```\n15| ### base download\n16| ```bash\n17| wget http://nginx.org/download/nginx-1.8.0.tar.gz\n18| wget http://luajit.org/download/LuaJIT-2.0.4.tar.gz ### LuaJIT\n19| wget http://zlib.net/zlib-1.2.8.tar.gz\n20| ```\n21| ### nginx module\n22| ```bash\n23| git clone https://github.com/alibaba/nginx-http-concat.git\n24| git clone https://github.com/simpl/ngx_devel_kit.git\n25| git clone https://github.com/openresty/echo-nginx-module.git\n26| git clone https://github.com/openresty/lua-nginx-module.git\n27| git clone https://github.com/happyfish100/fastdfs-nginx-module.git\n28| ```\n29| 2. unzip and install depends\n30| ------------------------------\n31| #### 2.0 unzip\n32| ```bash\n33| tar -zxf nginx-1.8.0.tar.gz\n34| tar -zxf LuaJIT-2.0.4.tar.gz\n35| tar -zxf GraphicsMagick-1.3.21.tar.gz\n36| tar -zxf zlib-1.2.8.tar.gz\n37| ```\n38| #### 2.1 install LuaJIT\n39| ```bash\n40| cd LuaJIT-2.0.4\n41| ./configure --with-ld-opt=\"-Wl,-rpath,$LUAJIT_LIB\"\n42| make -j8\n43| make install \n44| export LUAJIT_LIB=/usr/local/lib\n45| export LUAJIT_INC=/usr/local/include/luajit-2.0\n46| ln -s /usr/local/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2\n47| cd ..\n48| ```\n49| #### 2.2 install nginx\n50| ```bash\n51| cd nginx-1.8.0\n52| ./configure --prefix=/usr/local/nginx \\\n53| --user=www \\\n54| --group=www \\\n55| --sbin-path=/usr/sbin/nginx \\\n56| --conf-path=/etc/nginx/nginx.conf \\\n57| --pid-path=/var/run/nginx.pid  \\\n58| --lock-path=/var/run/nginx.lock \\\n59| --error-log-path=/opt/logs/nginx/error.log \\\n60| --http-log-path=/opt/logs/nginx/access.log \\\n61| --with-http_ssl_module \\\n62| --with-http_realip_module \\\n63| --with-http_sub_module \\\n64| --with-http_flv_module \\\n65| --with-http_dav_module \\\n66| --with-http_gzip_static_module \\\n67| --with-http_stub_status_module \\\n68| --with-http_addition_module \\\n69| --with-http_spdy_module \\\n70| --with-pcre \\\n71| --with-zlib=../zlib-1.2.8 \\\n72| --add-module=../nginx-http-concat \\\n73| --add-module=../lua-nginx-module \\\n74| --add-module=../ngx_devel_kit \\\n75| 如果安装了 fastdfs\n76| --add-module=../fastdfs-nginx-module/src\n77| make -j8\n78| make install\n79| ```", "fragment_lines": [1], "fragment_content": ["#nginx-lua-GraphicsMagick install"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n#nginx-lua-GraphicsMagick install\n---------------\n```bash\ngroupadd www\nuseradd -g www www -s /bin/false\nyum install -y gcc gcc-c++ zlib zlib-devel openssl openssl-devel pcre pcre-devel\nyum install -y libpng libjpeg libpng-devel libjpeg-devel ghostscript libtiff libtiff-devel freetype freetype-devel\nyum install -y GraphicsMagick GraphicsMagick-devel\n```\n1. download software\n--------------------\n```bash\ncd /usr/local/src\n```\n### base download\n```bash\nwget http://nginx.org/download/nginx-1.8.0.tar.gz\nwget http://luajit.org/download/LuaJIT-2.0.4.tar.gz ### LuaJIT\nwget http://zlib.net/zlib-1.2.8.tar.gz\n```\n### nginx module\n```bash\ngit clone https://github.com/alibaba/nginx-http-concat.git\ngit clone https://github.com/simpl/ngx_devel_kit.git\ngit clone https://github.com/openresty/echo-nginx-module.git\ngit clone https://github.com/openresty/lua-nginx-module.git\ngit clone https://github.com/happyfish100/fastdfs-nginx-module.git\n```\n2. unzip and install depends\n------------------------------\n#### 2.0 unzip\n```bash\ntar -zxf nginx-1.8.0.tar.gz\ntar -zxf LuaJIT-2.0.4.tar.gz\ntar -zxf GraphicsMagick-1.3.21.tar.gz\ntar -zxf zlib-1.2.8.tar.gz\n```\n#### 2.1 install LuaJIT\n```bash\ncd LuaJIT-2.0.4\n./configure --with-ld-opt=\"-Wl,-rpath,$LUAJIT_LIB\"\nmake -j8\nmake install \nexport LUAJIT_LIB=/usr/local/lib\nexport LUAJIT_INC=/usr/local/include/luajit-2.0\nln -s /usr/local/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2\ncd ..\n```\n#### 2.2 install nginx\n```bash\ncd nginx-1.8.0\n./configure --prefix=/usr/local/nginx \\\n--user=www \\\n--group=www \\\n--sbin-path=/usr/sbin/nginx \\\n--conf-path=/etc/nginx/nginx.conf \\\n--pid-path=/var/run/nginx.pid  \\\n--lock-path=/var/run/nginx.lock \\\n--error-log-path=/opt/logs/nginx/error.log \\\n--http-log-path=/opt/logs/nginx/access.log \\\n--with-http_ssl_module \\\n--with-http_realip_module \\\n--with-http_sub_module \\\n--with-http_flv_module \\\n--with-http_dav_module \\\n--with-http_gzip_static_module \\\n--with-http_stub_status_module \\\n--with-http_addition_module \\\n--with-http_spdy_module \\\n--with-pcre \\\n--with-zlib=../zlib-1.2.8 \\\n--add-module=../nginx-http-concat \\\n--add-module=../lua-nginx-module \\\n--add-module=../ngx_devel_kit \\\n如果安装了 fastdfs\n--add-module=../fastdfs-nginx-module/src\nmake -j8\nmake install\n```\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/8", "category": "Special", "subtype": "markdown_title_error", "level": "hard", "example": "", "docstring": "This document outlines the features of a C++ server programming library designed for both Windows and Linux platforms, highlighting its comprehensive modules, C++11 base, and third-party integrations like miniz, Lua, and Jsoncpp.", "canonical_solution": "# Engine\n\nC++服务器编程底层库\n\n## 特点\n\n1. Windows，Linux双平台（Windows下为静态库，主要方便开发者调试；Linux下为动态库，用于生产环境部署）\n2. 基本包含集成服务器常用模块（数学、文件系统、配置、日志、网络、脚本、时间、多线程等）\n3. 二次开发无平台配置，无其他依赖\n4. 基于C++11开发\n\n## 使用\n\n项目使用[xmake](https://xmake.io/#/)管理，使用方法详见xmake手册\n\n> 注：Linux下建议使用GCC的`-Wl,-rpath,.`连接选项指定运行期动态连接库的优先查找目录，以方便分发部署\n\n## 集成第三方说明\n\n1. Zip使用[miniz](https://github.com/richgel999/miniz/releases/download/2.1.0/miniz-2.1.0.zip) v2.1.0.\n2. [Lua](http://www.lua.org/ftp/lua-5.3.5.tar.gz) v5.3.5.\n3. 集成[Jsoncpp](https://github.com/open-source-parsers/jsoncpp) v1.8.4.\n4. [hiredis](https://github.com/wasppdotorg/hiredis-for-windows) v0.13.3.\n\n## 模块\n\n### 程序模型\n\n```cpp\n#include    <app.h>\n\nclass GameApp : public Application {\npublic:\n    GameApp() {}\n\n    virtual bool OnInit(const Commandline & cmd) override {\n        if (cmd.Has(\"--debug\")) {\n            Logger::Instance().Initialize(\"game\", \"logs\", Logger::Debug);\n        } else {\n            Logger::Instance().Initialize(\"game\", \"logs\", Logger::Info);\n        }\n\n        /// 锁帧\n        LockFPS(20);\n\n        /// 填写其他初始化逻辑，当返回false时程序直接退出\n        return true;\n    }\n\n    virtual void OnBreath() override {\n        /// 这里填写需要每帧更新的逻辑\n    }\n};\n\nRUN_APP(GameApp)\n```\n\n### 网络模型\n\n头文件`socket.h`，一个简单的客户端实现：\n\n```cpp\nclass Client : public IOListener {\npublic:\n    Client() : _socket(new Socket()) {\n    }\n\n    ~Client() {\n        Close();\n        delete _socket;\n    }\n\n    bool Connect(const std::string & ip, int port) {\n        bool succ = _socket->Connect(ip, port);\n        if (succ) BindIO(_socket->ctx, IO_READ); //! 我们只需要网络有数据来时通知\n        return succ;\n    }\n\n    /// 实现数据可读时消息处理\n    virtual void OnReadable() override {\n        char buf[1024] = {0};\n\n        int readed = 0;\n        int recv = 0;\n\n        while (true) {\n            recv = _socket->Recv(buf, 1024);\n            if (recv > 0) {\n                //! TODO: process received data.\n            } else if (recv == 0) {\n                break;\n            } else {\n                Close(recv);\n                break;\n            }\n        }\n    }\n\n    void Close(int reason = 0) {\n        UnbindIO(); //! 关闭之前请取消IO事件监听\n        _socket->Close();\n    }\n\n    bool Send(const char * p, size_t s) {\n        return _socket->Send(p, s);\n    }\n\nprivate:\n    Socket * _socket;\n}\n```\n\n### 脚本\n\n> 1. 设计原则：Lua只负责逻辑，对象生存管理交由C++（可以注册管理到Lua）\n> 2. 涉及到Get操作，需要try...catch以捕获类型异常（C++注册到Lua的接口内Get不需要，调用函数不需要）\n> 3. Property可以为地址方式，也可以为Getter(TG (void))、Setter(void (TS))方式注册\n> 4. Method必须为`int (*f)(LuaState &)`\n> 5. Lua不可用于多线程，只能在主线程中使用，但可以使用协程。\n\n```cpp\n#include    <script.h>\n\n/// 注册公共变量或函数到Lua\nGLua.Register(\"GameSetting\")    //! 所有下面注册的属性或函数放在GameSetting中\n    .Property(\"nPlayerCounter\", &GPlayerCount, false)    //! 以地址方式注册属性，同时设置不可写\n    .Property(\"nTime\", &GetTime)    //! 以Getter方式注册属性，同时不注册属性的写方法（不可写）\n    .Method(\"GetAById\", &GetAById);    //! 注册全局Lua方法\n\n/// 注册C++类到Lua\nGLua.Register<A>(\"LuaA\")\n    .Property(\"nId\", &A::id, false)\n    .Property(\"sName\", &A::GetName, &A::SetName)\n    .Method(\"Msg\", &A::SendMessage);\n\ntry {\n    A * p = GLua.Get<A *>(\"me\");    // 需要使用try，因为可能类型不匹配\n} catch (...) {}\n\nif (GLua.Is<A *>(\"me\")) {} // 不需要try\nGLua.Set<A *>(\"me\", new A) // 不需要try\nGLua.Call(\"GameSetting\", \"GetAById\", false, 100); // 不需要try\n\nint GetAById(LuaState & r) {\n    int n = r.Get<int>(1);    // 不需要try\n    ...\n}\n```\n\nLUA中扩展C++注册的类或名空间（注只能扩展方法，不可扩展属性）\n\n```lua\n-- 扩展名空间的方法\nfunction XXX.yyy()\nend\n\n-- 扩展类静态方法\nfunction LuaA.Test()\n    print(\"hehe\")\nend\n\n-- 扩展类成员方法，注意：这里用的是':'，因为需要使用self\nfunction LuaA.apis:YYY()\nend\n```\n\n内置的其他基本函数\n\n| 函数                                                     | 功能                                       |\n| ------------------------------------------------------ | ---------------------------------------- |\n| print(...)                                             | 使用Logger重载的print接口[Logger::Level::Info]  |\n| print_err(...)                                         | 使用Logger重载的print接口[Logger::Level::Error] |\n| loadbits(n, start, end) -> integer                     | 读取一个int32中[start, end]字节表示的值             |\n| setbits(n, start, end, v) -> integer                   | 设置一个int32中[start, end]字节表示的值             |\n| json.encode(v) -> string                               | 将lua变量序列化成json字串                         |\n| json.decode(s) -> var                                  | 将json字串反序列化成lua值                         |\n| scheduler.timer(delay, func[, is_loop]) -> integer(id) | 注册一个定时器                                  |\n| scheduler.task(hour, min, sec, func) -> integer(id)    | 注册一个每天hour:min:sec执行的操作                  |\n| scheduler.is_valid(id) -> bool                         | 测试一个定时器或计划是否存在                           |\n| scheduler.remain(id) -> double                         | 返回一个定时器或计划还需要多少毫秒运行                      |\n| scheduler.cancel(id)                                   | 取消一个定时器或计划任务                             |\n\n### 内存池\n\n> 1. 由于本人能力有限，经实际效率测试，目前仅保留非线程安全的对象Pool（Pool.h）\n> 2. Pool加锁后可用于多线程，但经测试效率还不及系统的new，但Linux下相差不大，如果考虑到无内存碎片的优点，可以自行添加。\n> 3. 如果采用Application的模型，Pool基本上是够用的。因为逻辑主要在主线程的Tick中触发\n\n### 线程池模型\n\nFirst. 编写线程内的具体工作类，继承IThreadJob.\n\n```cpp\n#include    <Threads.h>\n\nclass DemoTask : public IThreadJob {\npublic:\n    DemoTask(...) { ... }            //! 这里为该工作参数初始化\n    virtual ~DemoTask() { ... }        //! 这里为工作结束时清理操作\n\n    virtual void OnRun() { ... }    //! 工作的具体内容\n\nprivate:\n    ...        //! 参数声明\n};\n```\n\nSecond. 创建线程池及工作对象容器 \n\n```cpp\nint main() {\n    Threads workers(4);    //! 创建含有一个4个工作线程的容器\n\n    /// 增加100个并发任务（多余的会暂时等待空闲线程）\n    for (int i = 0; i < 100; ++i) {\n        workers.AddJob<DemoTask>(...);    // 传入工作需要的参数，这里自动调用 new DemoTask(...);\n    }\n\n    /// 等待所有的工作结束，如果不执行该操作，mgr超出生存期时会放弃未执行的任务。\n    workers.Wait();\n    return 0;\n}\n```\n\n### Redis客户端\n\n比较简单，请自行阅读`redis.h`,`redis.cc`\n\n### 定时任务\n\n1. C++接口\n\n```cpp\n/// 添加一个500毫秒后执行的定时器\nGScheduler.Add(500, [](uint64_t id) {\n    printf(\"Timer's id : %llu\", id);\n});\n\n/// 添加一个每500毫秒执行一次的定时器\nGScheduler.Add(500, [](uint64_t id) {\n    printf(\"Timer's id : %llu\", id);\n}, true);\n\n/// 注册每天05:00:00时执行的计划任务\nGScheduler.Add(5, 0, 0, [](uint64_t id) {\n    printf(\"Task's id : %llu\", id);\n});\n\n/// 是否存在定时器或计划任务\nbool valid = GScheduler.IsValid(timer_id);\n\n/// 取得一个定时器或计划多少毫秒后执行\ndouble left = GScheduler.GetRemainTime(timer_id);\n\n/// 取消一个定时器或计划任务\nGScheduler.Cancel(timer_id);\n```\n\n2. Lua接口\n\n```lua\nscheduler.timer(500, function(id) end);\nscheduler.timer(500, function(id) end, true);\nscheduler.task(5, 0, 0, function(id) end);\nscheduler.is_valid(timer_id);\nscheduler.remain(timer_id);\nscheduler.cancel(timer_id);\n```\n\n### 日志\n\n1. 多线程安全\n2. 日志使用之前可以初始化（不是必要的，但建议初始化—）\n\n日志生成的结构说明\n\n    RootOfLogs                        指定的日志根目录\n    |-- 20160803                    首先日志会根据“年月日”分文件夹\n    |    |-- main_01_00_00.000.log    其次日志会按指定大小分文件记录，文件名为指定的\"Name_时_分_秒.毫秒.log\"\n    |    |-- main_01_27_18.193.log\n\n```cpp\n/// 初始化日志。日志名为main, 放在logs目录下，输出等级为DEBUG，每个文件最大为4M\nLogger::Instance().Initialize(\"main\", \"logs\", Logger::Debug, 4 * 1024 * 1024);\n\n/// 写日志\nLOG_INFO(\"Hello\");\nLOG_DEBUG(\"Hello %d\", 2);\nLOG_ERR(\"Error : %s\", \"Test\");\nLOG_WARN(\"You have a warning\");\n```\n\n### HASH\n\n头文件 `Crypto.h`\n\n1. CRC32算法：`uint32_t CalcCRC(const char * mem, size_t size, uint32_t pre_crc = 0)`\n2. BKDRHash算法：`uint32_t CalcHash(const char * mem, size_t size)`\n3. MD5算法：`class MD5`\n4. SHA-1算法：`class SHA1`\n5. HMAC-SHA1算法：`class HMAC_SHA1`\n\n### 工具库\n\n1. 单例模型：Singleton (singleton.h)\n2. 生存域模型：ScopeGuard (scope_gurad.h)\n3. ZIP压缩/解压缩算法：Zip（zip.h）\n4. 字符串操作：string_tools.h\n\n### 配置库\n\n1. CSV文件的读取见：CsvFile（csv.h）\n2. INI文件的读取见：IniFile（ini.h）\n3. JSON文件，使用jsoncpp：Json::Value, Json::Reader (json.h)\n4. 命令行解析: Flags (flags.h)\n\n### 系统相关\n\n头文件`os.h`。包含：\n\n* 高精度时间：  \n    OS::Tick()  \n    OS::Now()  \n    OS::GetTimeZone()  \n    OS::ParseDataTime(year, month, day, hour, min, sec)  \n\n* 文件系统：  \n    OS::Exists(path)  \n    OS::CreateDir(dir)  \n    OS::GetCWD()  \n    OS::SetCWD(path)  \n    OS::GetFullPath(path)  \n    OS::GetDirName(path)  \n    OS::GetFileName(path)  \n    OS::GetFiles(path, recursive)  \n\n* 创建GUID/uuid  \n    OS::CreateID();", "buggy_code": "\n\n# Engine\n\nC++服务器编程底层库\n\n## 特点\n\n1. Windows，Linux双平台（Windows下为静态库，主要方便开发者调试；Linux下为动态库，用于生产环境部署）\n2. 基本包含集成服务器常用模块（数学、文件系统、配置、日志、网络、脚本、时间、多线程等）\n3. 二次开发无平台配置，无其他依赖\n4. 基于C++11开发\n\n## 使用\n\n项目使用[xmake](https://xmake.io/#/)管理，使用方法详见xmake手册\n\n> 注：Linux下建议使用GCC的`-Wl,-rpath,.`连接选项指定运行期动态连接库的优先查找目录，以方便分发部署\n\n## 集成第三方说明\n\n1. Zip使用[miniz](https://github.com/richgel999/miniz/releases/download/2.1.0/miniz-2.1.0.zip) v2.1.0.\n2. [Lua](http://www.lua.org/ftp/lua-5.3.5.tar.gz) v5.3.5.\n3. 集成[Jsoncpp](https://github.com/open-source-parsers/jsoncpp) v1.8.4.\n4. [hiredis](https://github.com/wasppdotorg/hiredis-for-windows) v0.13.3.\n\n##模块\n\n### ###程序模型\n\n```cpp\n#include    <app.h>\n\nclass GameApp : public Application {\npublic:\n    GameApp() {}\n\n    virtual bool OnInit(const Commandline & cmd) override {\n        if (cmd.Has(\"--debug\")) {\n            Logger::Instance().Initialize(\"game\", \"logs\", Logger::Debug);\n        } else {\n            Logger::Instance().Initialize(\"game\", \"logs\", Logger::Info);\n        }\n\n        /// 锁帧\n        LockFPS(20);\n\n        /// 填写其他初始化逻辑，当返回false时程序直接退出\n        return true;\n    }\n\n    virtual void OnBreath() override {\n        /// 这里填写需要每帧更新的逻辑\n    }\n};\n\nRUN_APP(GameApp)\n```\n\n### 网络模型\n\n头文件`socket.h`，一个简单的客户端实现：\n\n```cpp\nclass Client : public IOListener {\npublic:\n    Client() : _socket(new Socket()) {\n    }\n\n    ~Client() {\n        Close();\n        delete _socket;\n    }\n\n    bool Connect(const std::string & ip, int port) {\n        bool succ = _socket->Connect(ip, port);\n        if (succ) BindIO(_socket->ctx, IO_READ); //! 我们只需要网络有数据来时通知\n        return succ;\n    }\n\n    /// 实现数据可读时消息处理\n    virtual void OnReadable() override {\n        char buf[1024] = {0};\n\n        int readed = 0;\n        int recv = 0;\n\n        while (true) {\n            recv = _socket->Recv(buf, 1024);\n            if (recv > 0) {\n                //! TODO: process received data.\n            } else if (recv == 0) {\n                break;\n            } else {\n                Close(recv);\n                break;\n            }\n        }\n    }\n\n    void Close(int reason = 0) {\n        UnbindIO(); //! 关闭之前请取消IO事件监听\n        _socket->Close();\n    }\n\n    bool Send(const char * p, size_t s) {\n        return _socket->Send(p, s);\n    }\n\nprivate:\n    Socket * _socket;\n}\n```\n\n### 脚本\n\n> 1. 设计原则：Lua只负责逻辑，对象生存管理交由C++（可以注册管理到Lua）\n> 2. 涉及到Get操作，需要try...catch以捕获类型异常（C++注册到Lua的接口内Get不需要，调用函数不需要）\n> 3. Property可以为地址方式，也可以为Getter(TG (void))、Setter(void (TS))方式注册\n> 4. Method必须为`int (*f)(LuaState &)`\n> 5. Lua不可用于多线程，只能在主线程中使用，但可以使用协程。\n\n```cpp\n#include    <script.h>\n\n/// 注册公共变量或函数到Lua\nGLua.Register(\"GameSetting\")    //! 所有下面注册的属性或函数放在GameSetting中\n    .Property(\"nPlayerCounter\", &GPlayerCount, false)    //! 以地址方式注册属性，同时设置不可写\n    .Property(\"nTime\", &GetTime)    //! 以Getter方式注册属性，同时不注册属性的写方法（不可写）\n    .Method(\"GetAById\", &GetAById);    //! 注册全局Lua方法\n\n/// 注册C++类到Lua\nGLua.Register<A>(\"LuaA\")\n    .Property(\"nId\", &A::id, false)\n    .Property(\"sName\", &A::GetName, &A::SetName)\n    .Method(\"Msg\", &A::SendMessage);\n\ntry {\n    A * p = GLua.Get<A *>(\"me\");    // 需要使用try，因为可能类型不匹配\n} catch (...) {}\n\nif (GLua.Is<A *>(\"me\")) {} // 不需要try\nGLua.Set<A *>(\"me\", new A) // 不需要try\nGLua.Call(\"GameSetting\", \"GetAById\", false, 100); // 不需要try\n\nint GetAById(LuaState & r) {\n    int n = r.Get<int>(1);    // 不需要try\n    ...\n}\n```\n\nLUA中扩展C++注册的类或名空间（注只能扩展方法，不可扩展属性）\n\n```lua\n-- 扩展名空间的方法\nfunction XXX.yyy()\nend\n\n-- 扩展类静态方法\nfunction LuaA.Test()\n    print(\"hehe\")\nend\n\n-- 扩展类成员方法，注意：这里用的是':'，因为需要使用self\nfunction LuaA.apis:YYY()\nend\n```\n\n内置的其他基本函数\n\n| 函数                                                     | 功能                                       |\n| ------------------------------------------------------ | ---------------------------------------- |\n| print(...)                                             | 使用Logger重载的print接口[Logger::Level::Info]  |\n| print_err(...)                                         | 使用Logger重载的print接口[Logger::Level::Error] |\n| loadbits(n, start, end) -> integer                     | 读取一个int32中[start, end]字节表示的值             |\n| setbits(n, start, end, v) -> integer                   | 设置一个int32中[start, end]字节表示的值             |\n| json.encode(v) -> string                               | 将lua变量序列化成json字串                         |\n| json.decode(s) -> var                                  | 将json字串反序列化成lua值                         |\n| scheduler.timer(delay, func[, is_loop]) -> integer(id) | 注册一个定时器                                  |\n| scheduler.task(hour, min, sec, func) -> integer(id)    | 注册一个每天hour:min:sec执行的操作                  |\n| scheduler.is_valid(id) -> bool                         | 测试一个定时器或计划是否存在                           |\n| scheduler.remain(id) -> double                         | 返回一个定时器或计划还需要多少毫秒运行                      |\n| scheduler.cancel(id)                                   | 取消一个定时器或计划任务                             |\n\n### 内存池\n\n> 1. 由于本人能力有限，经实际效率测试，目前仅保留非线程安全的对象Pool（Pool.h）\n> 2. Pool加锁后可用于多线程，但经测试效率还不及系统的new，但Linux下相差不大，如果考虑到无内存碎片的优点，可以自行添加。\n> 3. 如果采用Application的模型，Pool基本上是够用的。因为逻辑主要在主线程的Tick中触发\n\n### 线程池模型\n\nFirst. 编写线程内的具体工作类，继承IThreadJob.\n\n```cpp\n#include    <Threads.h>\n\nclass DemoTask : public IThreadJob {\npublic:\n    DemoTask(...) { ... }            //! 这里为该工作参数初始化\n    virtual ~DemoTask() { ... }        //! 这里为工作结束时清理操作\n\n    virtual void OnRun() { ... }    //! 工作的具体内容\n\nprivate:\n    ...        //! 参数声明\n};\n```\n\nSecond. 创建线程池及工作对象容器 \n\n```cpp\nint main() {\n    Threads workers(4);    //! 创建含有一个4个工作线程的容器\n\n    /// 增加100个并发任务（多余的会暂时等待空闲线程）\n    for (int i = 0; i < 100; ++i) {\n        workers.AddJob<DemoTask>(...);    // 传入工作需要的参数，这里自动调用 new DemoTask(...);\n    }\n\n    /// 等待所有的工作结束，如果不执行该操作，mgr超出生存期时会放弃未执行的任务。\n    workers.Wait();\n    return 0;\n}\n```\n\n### Redis客户端\n\n比较简单，请自行阅读`redis.h`,`redis.cc`\n\n### 定时任务\n\n1. C++接口\n\n```cpp\n/// 添加一个500毫秒后执行的定时器\nGScheduler.Add(500, [](uint64_t id) {\n    printf(\"Timer's id : %llu\", id);\n});\n\n/// 添加一个每500毫秒执行一次的定时器\nGScheduler.Add(500, [](uint64_t id) {\n    printf(\"Timer's id : %llu\", id);\n}, true);\n\n/// 注册每天05:00:00时执行的计划任务\nGScheduler.Add(5, 0, 0, [](uint64_t id) {\n    printf(\"Task's id : %llu\", id);\n});\n\n/// 是否存在定时器或计划任务\nbool valid = GScheduler.IsValid(timer_id);\n\n/// 取得一个定时器或计划多少毫秒后执行\ndouble left = GScheduler.GetRemainTime(timer_id);\n\n/// 取消一个定时器或计划任务\nGScheduler.Cancel(timer_id);\n```\n\n2. Lua接口\n\n```lua\nscheduler.timer(500, function(id) end);\nscheduler.timer(500, function(id) end, true);\nscheduler.task(5, 0, 0, function(id) end);\nscheduler.is_valid(timer_id);\nscheduler.remain(timer_id);\nscheduler.cancel(timer_id);\n```\n\n### 日志\n\n1. 多线程安全\n2. 日志使用之前可以初始化（不是必要的，但建议初始化—）\n\n日志生成的结构说明\n\n    RootOfLogs                        指定的日志根目录\n    |-- 20160803                    首先日志会根据“年月日”分文件夹\n    |    |-- main_01_00_00.000.log    其次日志会按指定大小分文件记录，文件名为指定的\"Name_时_分_秒.毫秒.log\"\n    |    |-- main_01_27_18.193.log\n\n```cpp\n/// 初始化日志。日志名为main, 放在logs目录下，输出等级为DEBUG，每个文件最大为4M\nLogger::Instance().Initialize(\"main\", \"logs\", Logger::Debug, 4 * 1024 * 1024);\n\n/// 写日志\nLOG_INFO(\"Hello\");\nLOG_DEBUG(\"Hello %d\", 2);\nLOG_ERR(\"Error : %s\", \"Test\");\nLOG_WARN(\"You have a warning\");\n```\n\n### HASH\n\n头文件 `Crypto.h`\n\n1. CRC32算法：`uint32_t CalcCRC(const char * mem, size_t size, uint32_t pre_crc = 0)`\n2. BKDRHash算法：`uint32_t CalcHash(const char * mem, size_t size)`\n3. MD5算法：`class MD5`\n4. SHA-1算法：`class SHA1`\n5. HMAC-SHA1算法：`class HMAC_SHA1`\n\n### 工具库\n\n1. 单例模型：Singleton (singleton.h)\n2. 生存域模型：ScopeGuard (scope_gurad.h)\n3. ZIP压缩/解压缩算法：Zip（zip.h）\n4. 字符串操作：string_tools.h\n\n### 配置库\n\n1. CSV文件的读取见：CsvFile（csv.h）\n2. INI文件的读取见：IniFile（ini.h）\n3. JSON文件，使用jsoncpp：Json::Value, Json::Reader (json.h)\n4. 命令行解析: Flags (flags.h)\n\n### 系统相关\n\n头文件`os.h`。包含：\n\n* 高精度时间：  \n    OS::Tick()  \n    OS::Now()  \n    OS::GetTimeZone()  \n    OS::ParseDataTime(year, month, day, hour, min, sec)  \n\n* 文件系统：  \n    OS::Exists(path)  \n    OS::CreateDir(dir)  \n    OS::GetCWD()  \n    OS::SetCWD(path)  \n    OS::GetFullPath(path)  \n    OS::GetDirName(path)  \n    OS::GetFileName(path)  \n    OS::GetFiles(path, recursive)  \n\n* 创建GUID/uuid  \n    OS::CreateID();", "bug_with_line_numbers": "1| # Engine\n2| C++服务器编程底层库\n3| ## 特点\n4| 1. Windows，Linux双平台（Windows下为静态库，主要方便开发者调试；Linux下为动态库，用于生产环境部署）\n5| 2. 基本包含集成服务器常用模块（数学、文件系统、配置、日志、网络、脚本、时间、多线程等）\n6| 3. 二次开发无平台配置，无其他依赖\n7| 4. 基于C++11开发\n8| ## 使用\n9| 项目使用[xmake](https://xmake.io/#/)管理，使用方法详见xmake手册\n10| > 注：Linux下建议使用GCC的`-Wl,-rpath,.`连接选项指定运行期动态连接库的优先查找目录，以方便分发部署\n11| ## 集成第三方说明\n12| 1. Zip使用[miniz](https://github.com/richgel999/miniz/releases/download/2.1.0/miniz-2.1.0.zip) v2.1.0.\n13| 2. [Lua](http://www.lua.org/ftp/lua-5.3.5.tar.gz) v5.3.5.\n14| 3. 集成[Jsoncpp](https://github.com/open-source-parsers/jsoncpp) v1.8.4.\n15| 4. [hiredis](https://github.com/wasppdotorg/hiredis-for-windows) v0.13.3.\n16| ##模块\n17| ### ###程序模型\n18| ```cpp\n19| #include    <app.h>\n20| class GameApp : public Application {\n21| public:\n22|     GameApp() {}\n23|     virtual bool OnInit(const Commandline & cmd) override {\n24|         if (cmd.Has(\"--debug\")) {\n25|             Logger::Instance().Initialize(\"game\", \"logs\", Logger::Debug);\n26|         } else {\n27|             Logger::Instance().Initialize(\"game\", \"logs\", Logger::Info);\n28|         }\n29|         /// 锁帧\n30|         LockFPS(20);\n31|         /// 填写其他初始化逻辑，当返回false时程序直接退出\n32|         return true;\n33|     }\n34|     virtual void OnBreath() override {\n35|         /// 这里填写需要每帧更新的逻辑\n36|     }\n37| };\n38| RUN_APP(GameApp)\n39| ```\n40| ### 网络模型\n41| 头文件`socket.h`，一个简单的客户端实现：\n42| ```cpp\n43| class Client : public IOListener {\n44| public:\n45|     Client() : _socket(new Socket()) {\n46|     }\n47|     ~Client() {\n48|         Close();\n49|         delete _socket;\n50|     }\n51|     bool Connect(const std::string & ip, int port) {\n52|         bool succ = _socket->Connect(ip, port);\n53|         if (succ) BindIO(_socket->ctx, IO_READ); //! 我们只需要网络有数据来时通知\n54|         return succ;\n55|     }\n56|     /// 实现数据可读时消息处理\n57|     virtual void OnReadable() override {\n58|         char buf[1024] = {0};\n59|         int readed = 0;\n60|         int recv = 0;\n61|         while (true) {\n62|             recv = _socket->Recv(buf, 1024);\n63|             if (recv > 0) {\n64|                 //! TODO: process received data.\n65|             } else if (recv == 0) {\n66|                 break;\n67|             } else {\n68|                 Close(recv);\n69|                 break;\n70|             }\n71|         }\n72|     }\n73|     void Close(int reason = 0) {\n74|         UnbindIO(); //! 关闭之前请取消IO事件监听\n75|         _socket->Close();\n76|     }\n77|     bool Send(const char * p, size_t s) {\n78|         return _socket->Send(p, s);\n79|     }\n80| private:\n81|     Socket * _socket;\n82| }\n83| ```\n84| ### 脚本\n85| > 1. 设计原则：Lua只负责逻辑，对象生存管理交由C++（可以注册管理到Lua）\n86| > 2. 涉及到Get操作，需要try...catch以捕获类型异常（C++注册到Lua的接口内Get不需要，调用函数不需要）\n87| > 3. Property可以为地址方式，也可以为Getter(TG (void))、Setter(void (TS))方式注册\n88| > 4. Method必须为`int (*f)(LuaState &)`\n89| > 5. Lua不可用于多线程，只能在主线程中使用，但可以使用协程。\n90| ```cpp\n91| #include    <script.h>\n92| /// 注册公共变量或函数到Lua\n93| GLua.Register(\"GameSetting\")    //! 所有下面注册的属性或函数放在GameSetting中\n94|     .Property(\"nPlayerCounter\", &GPlayerCount, false)    //! 以地址方式注册属性，同时设置不可写\n95|     .Property(\"nTime\", &GetTime)    //! 以Getter方式注册属性，同时不注册属性的写方法（不可写）\n96|     .Method(\"GetAById\", &GetAById);    //! 注册全局Lua方法\n97| /// 注册C++类到Lua\n98| GLua.Register<A>(\"LuaA\")\n99|     .Property(\"nId\", &A::id, false)\n100|     .Property(\"sName\", &A::GetName, &A::SetName)\n101|     .Method(\"Msg\", &A::SendMessage);\n102| try {\n103|     A * p = GLua.Get<A *>(\"me\");    // 需要使用try，因为可能类型不匹配\n104| } catch (...) {}\n105| if (GLua.Is<A *>(\"me\")) {} // 不需要try\n106| GLua.Set<A *>(\"me\", new A) // 不需要try\n107| GLua.Call(\"GameSetting\", \"GetAById\", false, 100); // 不需要try\n108| int GetAById(LuaState & r) {\n109|     int n = r.Get<int>(1);    // 不需要try\n110|     ...\n111| }\n112| ```\n113| LUA中扩展C++注册的类或名空间（注只能扩展方法，不可扩展属性）\n114| ```lua\n115| -- 扩展名空间的方法\n116| function XXX.yyy()\n117| end\n118| -- 扩展类静态方法\n119| function LuaA.Test()\n120|     print(\"hehe\")\n121| end\n122| -- 扩展类成员方法，注意：这里用的是':'，因为需要使用self\n123| function LuaA.apis:YYY()\n124| end\n125| ```\n126| 内置的其他基本函数\n127| | 函数                                                     | 功能                                       |\n128| | ------------------------------------------------------ | ---------------------------------------- |\n129| | print(...)                                             | 使用Logger重载的print接口[Logger::Level::Info]  |\n130| | print_err(...)                                         | 使用Logger重载的print接口[Logger::Level::Error] |\n131| | loadbits(n, start, end) -> integer                     | 读取一个int32中[start, end]字节表示的值             |\n132| | setbits(n, start, end, v) -> integer                   | 设置一个int32中[start, end]字节表示的值             |\n133| | json.encode(v) -> string                               | 将lua变量序列化成json字串                         |\n134| | json.decode(s) -> var                                  | 将json字串反序列化成lua值                         |\n135| | scheduler.timer(delay, func[, is_loop]) -> integer(id) | 注册一个定时器                                  |\n136| | scheduler.task(hour, min, sec, func) -> integer(id)    | 注册一个每天hour:min:sec执行的操作                  |\n137| | scheduler.is_valid(id) -> bool                         | 测试一个定时器或计划是否存在                           |\n138| | scheduler.remain(id) -> double                         | 返回一个定时器或计划还需要多少毫秒运行                      |\n139| | scheduler.cancel(id)                                   | 取消一个定时器或计划任务                             |\n140| ### 内存池\n141| > 1. 由于本人能力有限，经实际效率测试，目前仅保留非线程安全的对象Pool（Pool.h）\n142| > 2. Pool加锁后可用于多线程，但经测试效率还不及系统的new，但Linux下相差不大，如果考虑到无内存碎片的优点，可以自行添加。\n143| > 3. 如果采用Application的模型，Pool基本上是够用的。因为逻辑主要在主线程的Tick中触发\n144| ### 线程池模型\n145| First. 编写线程内的具体工作类，继承IThreadJob.\n146| ```cpp\n147| #include    <Threads.h>\n148| class DemoTask : public IThreadJob {\n149| public:\n150|     DemoTask(...) { ... }            //! 这里为该工作参数初始化\n151|     virtual ~DemoTask() { ... }        //! 这里为工作结束时清理操作\n152|     virtual void OnRun() { ... }    //! 工作的具体内容\n153| private:\n154|     ...        //! 参数声明\n155| };\n156| ```\n157| Second. 创建线程池及工作对象容器 \n158| ```cpp\n159| int main() {\n160|     Threads workers(4);    //! 创建含有一个4个工作线程的容器\n161|     /// 增加100个并发任务（多余的会暂时等待空闲线程）\n162|     for (int i = 0; i < 100; ++i) {\n163|         workers.AddJob<DemoTask>(...);    // 传入工作需要的参数，这里自动调用 new DemoTask(...);\n164|     }\n165|     /// 等待所有的工作结束，如果不执行该操作，mgr超出生存期时会放弃未执行的任务。\n166|     workers.Wait();\n167|     return 0;\n168| }\n169| ```\n170| ### Redis客户端\n171| 比较简单，请自行阅读`redis.h`,`redis.cc`\n172| ### 定时任务\n173| 1. C++接口\n174| ```cpp\n175| /// 添加一个500毫秒后执行的定时器\n176| GScheduler.Add(500, [](uint64_t id) {\n177|     printf(\"Timer's id : %llu\", id);\n178| });\n179| /// 添加一个每500毫秒执行一次的定时器\n180| GScheduler.Add(500, [](uint64_t id) {\n181|     printf(\"Timer's id : %llu\", id);\n182| }, true);\n183| /// 注册每天05:00:00时执行的计划任务\n184| GScheduler.Add(5, 0, 0, [](uint64_t id) {\n185|     printf(\"Task's id : %llu\", id);\n186| });\n187| /// 是否存在定时器或计划任务\n188| bool valid = GScheduler.IsValid(timer_id);\n189| /// 取得一个定时器或计划多少毫秒后执行\n190| double left = GScheduler.GetRemainTime(timer_id);\n191| /// 取消一个定时器或计划任务\n192| GScheduler.Cancel(timer_id);\n193| ```\n194| 2. Lua接口\n195| ```lua\n196| scheduler.timer(500, function(id) end);\n197| scheduler.timer(500, function(id) end, true);\n198| scheduler.task(5, 0, 0, function(id) end);\n199| scheduler.is_valid(timer_id);\n200| scheduler.remain(timer_id);\n201| scheduler.cancel(timer_id);\n202| ```\n203| ### 日志\n204| 1. 多线程安全\n205| 2. 日志使用之前可以初始化（不是必要的，但建议初始化—）\n206| 日志生成的结构说明\n207|     RootOfLogs                        指定的日志根目录\n208|     |-- 20160803                    首先日志会根据“年月日”分文件夹\n209|     |    |-- main_01_00_00.000.log    其次日志会按指定大小分文件记录，文件名为指定的\"Name_时_分_秒.毫秒.log\"\n210|     |    |-- main_01_27_18.193.log\n211| ```cpp\n212| /// 初始化日志。日志名为main, 放在logs目录下，输出等级为DEBUG，每个文件最大为4M\n213| Logger::Instance().Initialize(\"main\", \"logs\", Logger::Debug, 4 * 1024 * 1024);\n214| /// 写日志\n215| LOG_INFO(\"Hello\");\n216| LOG_DEBUG(\"Hello %d\", 2);\n217| LOG_ERR(\"Error : %s\", \"Test\");\n218| LOG_WARN(\"You have a warning\");\n219| ```\n220| ### HASH\n221| 头文件 `Crypto.h`\n222| 1. CRC32算法：`uint32_t CalcCRC(const char * mem, size_t size, uint32_t pre_crc = 0)`\n223| 2. BKDRHash算法：`uint32_t CalcHash(const char * mem, size_t size)`\n224| 3. MD5算法：`class MD5`\n225| 4. SHA-1算法：`class SHA1`\n226| 5. HMAC-SHA1算法：`class HMAC_SHA1`\n227| ### 工具库\n228| 1. 单例模型：Singleton (singleton.h)\n229| 2. 生存域模型：ScopeGuard (scope_gurad.h)\n230| 3. ZIP压缩/解压缩算法：Zip（zip.h）\n231| 4. 字符串操作：string_tools.h\n232| ### 配置库\n233| 1. CSV文件的读取见：CsvFile（csv.h）\n234| 2. INI文件的读取见：IniFile（ini.h）\n235| 3. JSON文件，使用jsoncpp：Json::Value, Json::Reader (json.h)\n236| 4. 命令行解析: Flags (flags.h)\n237| ### 系统相关\n238| 头文件`os.h`。包含：\n239| * 高精度时间：  \n240|     OS::Tick()  \n241|     OS::Now()  \n242|     OS::GetTimeZone()  \n243|     OS::ParseDataTime(year, month, day, hour, min, sec)  \n244| * 文件系统：  \n245|     OS::Exists(path)  \n246|     OS::CreateDir(dir)  \n247|     OS::GetCWD()  \n248|     OS::SetCWD(path)  \n249|     OS::GetFullPath(path)  \n250|     OS::GetDirName(path)  \n251|     OS::GetFileName(path)  \n252|     OS::GetFiles(path, recursive)  \n253| * 创建GUID/uuid  \n254|     OS::CreateID();", "fragment_lines": [17], "fragment_content": ["### ###程序模型"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# Engine\n\nC++服务器编程底层库\n\n## 特点\n\n1. Windows，Linux双平台（Windows下为静态库，主要方便开发者调试；Linux下为动态库，用于生产环境部署）\n2. 基本包含集成服务器常用模块（数学、文件系统、配置、日志、网络、脚本、时间、多线程等）\n3. 二次开发无平台配置，无其他依赖\n4. 基于C++11开发\n\n## 使用\n\n项目使用[xmake](https://xmake.io/#/)管理，使用方法详见xmake手册\n\n> 注：Linux下建议使用GCC的`-Wl,-rpath,.`连接选项指定运行期动态连接库的优先查找目录，以方便分发部署\n\n## 集成第三方说明\n\n1. Zip使用[miniz](https://github.com/richgel999/miniz/releases/download/2.1.0/miniz-2.1.0.zip) v2.1.0.\n2. [Lua](http://www.lua.org/ftp/lua-5.3.5.tar.gz) v5.3.5.\n3. 集成[Jsoncpp](https://github.com/open-source-parsers/jsoncpp) v1.8.4.\n4. [hiredis](https://github.com/wasppdotorg/hiredis-for-windows) v0.13.3.\n\n##模块\n\n### ###程序模型\n\n```cpp\n#include    <app.h>\n\nclass GameApp : public Application {\npublic:\n    GameApp() {}\n\n    virtual bool OnInit(const Commandline & cmd) override {\n        if (cmd.Has(\"--debug\")) {\n            Logger::Instance().Initialize(\"game\", \"logs\", Logger::Debug);\n        } else {\n            Logger::Instance().Initialize(\"game\", \"logs\", Logger::Info);\n        }\n\n        /// 锁帧\n        LockFPS(20);\n\n        /// 填写其他初始化逻辑，当返回false时程序直接退出\n        return true;\n    }\n\n    virtual void OnBreath() override {\n        /// 这里填写需要每帧更新的逻辑\n    }\n};\n\nRUN_APP(GameApp)\n```\n\n### 网络模型\n\n头文件`socket.h`，一个简单的客户端实现：\n\n```cpp\nclass Client : public IOListener {\npublic:\n    Client() : _socket(new Socket()) {\n    }\n\n    ~Client() {\n        Close();\n        delete _socket;\n    }\n\n    bool Connect(const std::string & ip, int port) {\n        bool succ = _socket->Connect(ip, port);\n        if (succ) BindIO(_socket->ctx, IO_READ); //! 我们只需要网络有数据来时通知\n        return succ;\n    }\n\n    /// 实现数据可读时消息处理\n    virtual void OnReadable() override {\n        char buf[1024] = {0};\n\n        int readed = 0;\n        int recv = 0;\n\n        while (true) {\n            recv = _socket->Recv(buf, 1024);\n            if (recv > 0) {\n                //! TODO: process received data.\n            } else if (recv == 0) {\n                break;\n            } else {\n                Close(recv);\n                break;\n            }\n        }\n    }\n\n    void Close(int reason = 0) {\n        UnbindIO(); //! 关闭之前请取消IO事件监听\n        _socket->Close();\n    }\n\n    bool Send(const char * p, size_t s) {\n        return _socket->Send(p, s);\n    }\n\nprivate:\n    Socket * _socket;\n}\n```\n\n### 脚本\n\n> 1. 设计原则：Lua只负责逻辑，对象生存管理交由C++（可以注册管理到Lua）\n> 2. 涉及到Get操作，需要try...catch以捕获类型异常（C++注册到Lua的接口内Get不需要，调用函数不需要）\n> 3. Property可以为地址方式，也可以为Getter(TG (void))、Setter(void (TS))方式注册\n> 4. Method必须为`int (*f)(LuaState &)`\n> 5. Lua不可用于多线程，只能在主线程中使用，但可以使用协程。\n\n```cpp\n#include    <script.h>\n\n/// 注册公共变量或函数到Lua\nGLua.Register(\"GameSetting\")    //! 所有下面注册的属性或函数放在GameSetting中\n    .Property(\"nPlayerCounter\", &GPlayerCount, false)    //! 以地址方式注册属性，同时设置不可写\n    .Property(\"nTime\", &GetTime)    //! 以Getter方式注册属性，同时不注册属性的写方法（不可写）\n    .Method(\"GetAById\", &GetAById);    //! 注册全局Lua方法\n\n/// 注册C++类到Lua\nGLua.Register<A>(\"LuaA\")\n    .Property(\"nId\", &A::id, false)\n    .Property(\"sName\", &A::GetName, &A::SetName)\n    .Method(\"Msg\", &A::SendMessage);\n\ntry {\n    A * p = GLua.Get<A *>(\"me\");    // 需要使用try，因为可能类型不匹配\n} catch (...) {}\n\nif (GLua.Is<A *>(\"me\")) {} // 不需要try\nGLua.Set<A *>(\"me\", new A) // 不需要try\nGLua.Call(\"GameSetting\", \"GetAById\", false, 100); // 不需要try\n\nint GetAById(LuaState & r) {\n    int n = r.Get<int>(1);    // 不需要try\n    ...\n}\n```\n\nLUA中扩展C++注册的类或名空间（注只能扩展方法，不可扩展属性）\n\n```lua\n-- 扩展名空间的方法\nfunction XXX.yyy()\nend\n\n-- 扩展类静态方法\nfunction LuaA.Test()\n    print(\"hehe\")\nend\n\n-- 扩展类成员方法，注意：这里用的是':'，因为需要使用self\nfunction LuaA.apis:YYY()\nend\n```\n\n内置的其他基本函数\n\n| 函数                                                     | 功能                                       |\n| ------------------------------------------------------ | ---------------------------------------- |\n| print(...)                                             | 使用Logger重载的print接口[Logger::Level::Info]  |\n| print_err(...)                                         | 使用Logger重载的print接口[Logger::Level::Error] |\n| loadbits(n, start, end) -> integer                     | 读取一个int32中[start, end]字节表示的值             |\n| setbits(n, start, end, v) -> integer                   | 设置一个int32中[start, end]字节表示的值             |\n| json.encode(v) -> string                               | 将lua变量序列化成json字串                         |\n| json.decode(s) -> var                                  | 将json字串反序列化成lua值                         |\n| scheduler.timer(delay, func[, is_loop]) -> integer(id) | 注册一个定时器                                  |\n| scheduler.task(hour, min, sec, func) -> integer(id)    | 注册一个每天hour:min:sec执行的操作                  |\n| scheduler.is_valid(id) -> bool                         | 测试一个定时器或计划是否存在                           |\n| scheduler.remain(id) -> double                         | 返回一个定时器或计划还需要多少毫秒运行                      |\n| scheduler.cancel(id)                                   | 取消一个定时器或计划任务                             |\n\n### 内存池\n\n> 1. 由于本人能力有限，经实际效率测试，目前仅保留非线程安全的对象Pool（Pool.h）\n> 2. Pool加锁后可用于多线程，但经测试效率还不及系统的new，但Linux下相差不大，如果考虑到无内存碎片的优点，可以自行添加。\n> 3. 如果采用Application的模型，Pool基本上是够用的。因为逻辑主要在主线程的Tick中触发\n\n### 线程池模型\n\nFirst. 编写线程内的具体工作类，继承IThreadJob.\n\n```cpp\n#include    <Threads.h>\n\nclass DemoTask : public IThreadJob {\npublic:\n    DemoTask(...) { ... }            //! 这里为该工作参数初始化\n    virtual ~DemoTask() { ... }        //! 这里为工作结束时清理操作\n\n    virtual void OnRun() { ... }    //! 工作的具体内容\n\nprivate:\n    ...        //! 参数声明\n};\n```\n\nSecond. 创建线程池及工作对象容器 \n\n```cpp\nint main() {\n    Threads workers(4);    //! 创建含有一个4个工作线程的容器\n\n    /// 增加100个并发任务（多余的会暂时等待空闲线程）\n    for (int i = 0; i < 100; ++i) {\n        workers.AddJob<DemoTask>(...);    // 传入工作需要的参数，这里自动调用 new DemoTask(...);\n    }\n\n    /// 等待所有的工作结束，如果不执行该操作，mgr超出生存期时会放弃未执行的任务。\n    workers.Wait();\n    return 0;\n}\n```\n\n### Redis客户端\n\n比较简单，请自行阅读`redis.h`,`redis.cc`\n\n### 定时任务\n\n1. C++接口\n\n```cpp\n/// 添加一个500毫秒后执行的定时器\nGScheduler.Add(500, [](uint64_t id) {\n    printf(\"Timer's id : %llu\", id);\n});\n\n/// 添加一个每500毫秒执行一次的定时器\nGScheduler.Add(500, [](uint64_t id) {\n    printf(\"Timer's id : %llu\", id);\n}, true);\n\n/// 注册每天05:00:00时执行的计划任务\nGScheduler.Add(5, 0, 0, [](uint64_t id) {\n    printf(\"Task's id : %llu\", id);\n});\n\n/// 是否存在定时器或计划任务\nbool valid = GScheduler.IsValid(timer_id);\n\n/// 取得一个定时器或计划多少毫秒后执行\ndouble left = GScheduler.GetRemainTime(timer_id);\n\n/// 取消一个定时器或计划任务\nGScheduler.Cancel(timer_id);\n```\n\n2. Lua接口\n\n```lua\nscheduler.timer(500, function(id) end);\nscheduler.timer(500, function(id) end, true);\nscheduler.task(5, 0, 0, function(id) end);\nscheduler.is_valid(timer_id);\nscheduler.remain(timer_id);\nscheduler.cancel(timer_id);\n```\n\n### 日志\n\n1. 多线程安全\n2. 日志使用之前可以初始化（不是必要的，但建议初始化—）\n\n日志生成的结构说明\n\n    RootOfLogs                        指定的日志根目录\n    |-- 20160803                    首先日志会根据“年月日”分文件夹\n    |    |-- main_01_00_00.000.log    其次日志会按指定大小分文件记录，文件名为指定的\"Name_时_分_秒.毫秒.log\"\n    |    |-- main_01_27_18.193.log\n\n```cpp\n/// 初始化日志。日志名为main, 放在logs目录下，输出等级为DEBUG，每个文件最大为4M\nLogger::Instance().Initialize(\"main\", \"logs\", Logger::Debug, 4 * 1024 * 1024);\n\n/// 写日志\nLOG_INFO(\"Hello\");\nLOG_DEBUG(\"Hello %d\", 2);\nLOG_ERR(\"Error : %s\", \"Test\");\nLOG_WARN(\"You have a warning\");\n```\n\n### HASH\n\n头文件 `Crypto.h`\n\n1. CRC32算法：`uint32_t CalcCRC(const char * mem, size_t size, uint32_t pre_crc = 0)`\n2. BKDRHash算法：`uint32_t CalcHash(const char * mem, size_t size)`\n3. MD5算法：`class MD5`\n4. SHA-1算法：`class SHA1`\n5. HMAC-SHA1算法：`class HMAC_SHA1`\n\n### 工具库\n\n1. 单例模型：Singleton (singleton.h)\n2. 生存域模型：ScopeGuard (scope_gurad.h)\n3. ZIP压缩/解压缩算法：Zip（zip.h）\n4. 字符串操作：string_tools.h\n\n### 配置库\n\n1. CSV文件的读取见：CsvFile（csv.h）\n2. INI文件的读取见：IniFile（ini.h）\n3. JSON文件，使用jsoncpp：Json::Value, Json::Reader (json.h)\n4. 命令行解析: Flags (flags.h)\n\n### 系统相关\n\n头文件`os.h`。包含：\n\n* 高精度时间：  \n    OS::Tick()  \n    OS::Now()  \n    OS::GetTimeZone()  \n    OS::ParseDataTime(year, month, day, hour, min, sec)  \n\n* 文件系统：  \n    OS::Exists(path)  \n    OS::CreateDir(dir)  \n    OS::GetCWD()  \n    OS::SetCWD(path)  \n    OS::GetFullPath(path)  \n    OS::GetDirName(path)  \n    OS::GetFileName(path)  \n    OS::GetFiles(path, recursive)  \n\n* 创建GUID/uuid  \n    OS::CreateID();\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/9", "category": "Special", "subtype": "markdown_unclosed_error", "level": "hard", "example": "", "docstring": "It introduces Multi Link technology, which streamlines the process of linking libraries using qmake, detailing its current capabilities and upcoming features for automated pri file generation and library linking support.", "canonical_solution": "# 文件组成和功能介绍\n\n1. qqt_version.pri 用于更改Library的版本信息。只需要更改这一个地方就可以了\n\n2. qqt_qkit.pri 用于支持目标平台信息，读取环境变量QKIT设置SYSNAME。\n\n3. qqt_function.pri 提供丰富的操作函数，分为两类两种，一类获取命令字符串，一类执行命令，一种条件函数，一种求解函数。\n   \n   - mkdir system_errcode read_ini write_ini  empty_file write_line copy_dir user_home user_config_path\n   - 相应的get函数\n   - 支持windows 和 *nix。\n\n4. qqt_header.pri 包含qqt的特性开关，在这里决定library的大小和内部函数数目。\n   \n   - QQT_STATIC_LIBRARY 宏的开关判断也在这里。在linux等posix平台，这种区分动态静态的宏意义不是很大，一般不定义就可以。在windows平台要求很强烈，在QQt中，windows平台，编译静态库，无论编译还是链接，QQT_STATIC_LIBRARY都是需要的。动态库，编译时需要QQT_LIBRARY宏，链接时不需要宏。在qqt.pro和link_qqt.pri当中自动做了适配。\n\n5. qqt_source.pri 包含所有对应qqt的特性的源文件和头文件，HEADERS+= SOURCES+=全在这里。\n\n6. qqt_3rdparty.pri 包含所有的第三方源代码。对于GPL，第三方的还是单独拿出来。找问题和开关特性都比较清晰。\n\n7. qqt_install.pri 这里负责发布QQt SDK，所有的函数都在这里，但是发布工作在qqt_library.pri里，编译QQt时不发生任何发布sdk的问题，只有在app当中pre link的时候才会create sdk，link from sdk。\n\n8. qqt_library.pri qqt的sdk发布工作，app链接QQt工作，要求用户进行BUILD-SDK-DEPLOY ROOT路径指定也发生在这里。它会自动生成一个pri，给用户指定这三个变量。\n\n9. qqt_library.pri 包含以上这几个app需要的pri，这个文件现在只能放在library目录里。\n\n10. app_configure.pri app配置文件，这个一般是公共配置文件，里面包含了link_qqt_library.pri。更改意义不大，将来可能会被生成，而不是开始就存在。\n\n11. app_deploy.pri app发布文件，app发布到指定位置的工作就在这里实现，这个文件将来也可能被生成而不是开始就存在。\n\n# 将要实现\n\n- qqt_header.pri qqt_source.pri 两个pri将会自动生成lib_header.pri，lib_source.pri，用户实现这两个pri，填充和自己的library有关的头文件和源文件，模块开关等信息。\n- qqt_library.pri 将会自动生成app_configure.pri用于用户配置\n- app_deploy.pri 将会更名为qqt_deploy.pri，用来完成支援app发布所需的功能。\n- qqt_install.pri 将会负责和sdk发布相关的工作。\n- 这些pri将会全部转移到MLMA技术仓库，用户可以独立将其下载、配置，在一个地方完成多个lib和app工程的部署。\n  - 初步规划用户要clone到library目录。\n\n相信在Multi Link技术的帮助下，用户开发Library和Application肯定会如虎添翼，节省巨大的工时和精力。（现在仅仅支持LibQQt使用）\n\n# Multi-link技术完成\n\n千等万等，Multi-link技术终于现出原形了。  \n修复了发布QQt SDK无处安置的问题。  \n\n1. include(.../multi-link/multi-link/add_base_manager.pri)  \n   - 这里是多链接技术一切的开始。  \n2. 提供函数 （这里只展示一部分）\n   - add_sdk() (lib工程用)  \n   - add_version()  \n   - ﻿add_deploy()  \n   - ﻿add_deploy_library()   \n   - ﻿add_deploy_config()  \n   - ﻿add_include()  \n   - ﻿add_headers()  \n   - ﻿add_library()  \n   - ﻿add_defines()  \n   - ﻿add_language()  \n   - ﻿add_zh_CN_en_US()  \n3. 彻底的脱离了libQQt，但是提供对libQQt的链接支持，和对其他Library的链接支持一模一样。  \n4. 有Multi-link帮助，用户可以任意的在app和lib之间设计链接关系了。  \n5. QQt提供的强大功能，并没有因为Multi-link的升级而改变，依然强大。  ", "buggy_code": " \n\n#*文件组成和功能介绍***\n\n1. qqt_version.pri 用于更改Library的版本信息。只需要更改这一个地方就可以了\n\n2. qqt_qkit.pri 用于支持目标平台信息，读取环境变量QKIT设置SYSNAME。\n\n3. qqt_function.pri 提供丰富的操作函数，分为两类两种，一类获取命令字符串，一类执行命令，一种条件函数，一种求解函数。\n   \n   - mkdir system_errcode read_ini write_ini  empty_file write_line copy_dir user_home user_config_path\n   - 相应的get函数\n   - 支持windows 和 *nix。\n\n4. qqt_header.pri 包含qqt的特性开关，在这里决定library的大小和内部函数数目。\n   \n   - QQT_STATIC_LIBRARY 宏的开关判断也在这里。在linux等posix平台，这种区分动态静态的宏意义不是很大，一般不定义就可以。在windows平台要求很强烈，在QQt中，windows平台，编译静态库，无论编译还是链接，QQT_STATIC_LIBRARY都是需要的。动态库，编译时需要QQT_LIBRARY宏，链接时不需要宏。在qqt.pro和link_qqt.pri当中自动做了适配。\n\n5. qqt_source.pri 包含所有对应qqt的特性的源文件和头文件，HEADERS+= SOURCES+=全在这里。\n\n6. qqt_3rdparty.pri 包含所有的第三方源代码。对于GPL，第三方的还是单独拿出来。找问题和开关特性都比较清晰。\n\n7. qqt_install.pri 这里负责发布QQt SDK，所有的函数都在这里，但是发布工作在qqt_library.pri里，编译QQt时不发生任何发布sdk的问题，只有在app当中pre link的时候才会create sdk，link from sdk。\n\n8. qqt_library.pri qqt的sdk发布工作，app链接QQt工作，要求用户进行BUILD-SDK-DEPLOY ROOT路径指定也发生在这里。它会自动生成一个pri，给用户指定这三个变量。\n\n9. qqt_library.pri 包含以上这几个app需要的pri，这个文件现在只能放在library目录里。\n\n10. app_configure.pri app配置文件，这个一般是公共配置文件，里面包含了link_qqt_library.pri。更改意义不大，将来可能会被生成，而不是开始就存在。\n\n11. app_deploy.pri app发布文件，app发布到指定位置的工作就在这里实现，这个文件将来也可能被生成而不是开始就存在。\n\n# 将要实现\n\n- qqt_header.pri qqt_source.pri 两个pri将会自动生成lib_header.pri，lib_source.pri，用户实现这两个pri，填充和自己的library有关的头文件和源文件，模块开关等信息。\n- qqt_library.pri 将会自动生成app_configure.pri用于用户配置\n- app_deploy.pri 将会更名为qqt_deploy.pri，用来完成支援app发布所需的功能。\n- qqt_install.pri 将会负责和sdk发布相关的工作。\n- 这些pri将会全部转移到MLMA技术仓库，用户可以独立将其下载、配置，在一个地方完成多个lib和app工程的部署。\n  - 初步规划用户要clone到library目录。\n\n相信在Multi Link技术的帮助下，用户开发Library和Application肯定会如虎添翼，节省巨大的工时和精力。（现在仅仅支持LibQQt使用）\n\n# Multi-link技术完成\n\n千等万等，Multi-link技术终于现出原形了。  \n修复了发布QQt SDK无处安置的问题。  \n\n1. include(.../multi-link/multi-link/add_base_manager.pri)  \n   - 这里是多链接技术一切的开始。  \n2. 提供函数 （这里只展示一部分）\n   - add_sdk() (lib工程用)  \n   - add_version()  \n   - ﻿add_deploy()  \n   - ﻿add_deploy_library()   \n   - ﻿add_deploy_config()  \n   - ﻿add_include()  \n   - ﻿add_headers()  \n   - ﻿add_library()  \n   - ﻿add_defines()  \n   - ﻿add_language()  \n   - ﻿add_zh_CN_en_US()  \n3. 彻底的脱离了libQQt，但是提供对libQQt的链接支持，和对其他Library的链接支持一模一样。  \n4. 有Multi-link帮助，用户可以任意的在app和lib之间设计链接关系了。  \n5. QQt提供的强大功能，并没有因为Multi-link的升级而改变，依然强大。  ", "bug_with_line_numbers": "1| ﻿ \n2| #*文件组成和功能介绍***\n3| 1. qqt_version.pri 用于更改Library的版本信息。只需要更改这一个地方就可以了\n4| 2. qqt_qkit.pri 用于支持目标平台信息，读取环境变量QKIT设置SYSNAME。\n5| 3. qqt_function.pri 提供丰富的操作函数，分为两类两种，一类获取命令字符串，一类执行命令，一种条件函数，一种求解函数。\n6|    \n7|    - mkdir system_errcode read_ini write_ini  empty_file write_line copy_dir user_home user_config_path\n8|    - 相应的get函数\n9|    - 支持windows 和 *nix。\n10| 4. qqt_header.pri 包含qqt的特性开关，在这里决定library的大小和内部函数数目。\n11|    \n12|    - QQT_STATIC_LIBRARY 宏的开关判断也在这里。在linux等posix平台，这种区分动态静态的宏意义不是很大，一般不定义就可以。在windows平台要求很强烈，在QQt中，windows平台，编译静态库，无论编译还是链接，QQT_STATIC_LIBRARY都是需要的。动态库，编译时需要QQT_LIBRARY宏，链接时不需要宏。在qqt.pro和link_qqt.pri当中自动做了适配。\n13| 5. qqt_source.pri 包含所有对应qqt的特性的源文件和头文件，HEADERS+= SOURCES+=全在这里。\n14| 6. qqt_3rdparty.pri 包含所有的第三方源代码。对于GPL，第三方的还是单独拿出来。找问题和开关特性都比较清晰。\n15| 7. qqt_install.pri 这里负责发布QQt SDK，所有的函数都在这里，但是发布工作在qqt_library.pri里，编译QQt时不发生任何发布sdk的问题，只有在app当中pre link的时候才会create sdk，link from sdk。\n16| 8. qqt_library.pri qqt的sdk发布工作，app链接QQt工作，要求用户进行BUILD-SDK-DEPLOY ROOT路径指定也发生在这里。它会自动生成一个pri，给用户指定这三个变量。\n17| 9. qqt_library.pri 包含以上这几个app需要的pri，这个文件现在只能放在library目录里。\n18| 10. app_configure.pri app配置文件，这个一般是公共配置文件，里面包含了link_qqt_library.pri。更改意义不大，将来可能会被生成，而不是开始就存在。\n19| 11. app_deploy.pri app发布文件，app发布到指定位置的工作就在这里实现，这个文件将来也可能被生成而不是开始就存在。\n20| # 将要实现\n21| - qqt_header.pri qqt_source.pri 两个pri将会自动生成lib_header.pri，lib_source.pri，用户实现这两个pri，填充和自己的library有关的头文件和源文件，模块开关等信息。\n22| - qqt_library.pri 将会自动生成app_configure.pri用于用户配置\n23| - app_deploy.pri 将会更名为qqt_deploy.pri，用来完成支援app发布所需的功能。\n24| - qqt_install.pri 将会负责和sdk发布相关的工作。\n25| - 这些pri将会全部转移到MLMA技术仓库，用户可以独立将其下载、配置，在一个地方完成多个lib和app工程的部署。\n26|   - 初步规划用户要clone到library目录。\n27| 相信在Multi Link技术的帮助下，用户开发Library和Application肯定会如虎添翼，节省巨大的工时和精力。（现在仅仅支持LibQQt使用）\n28| # Multi-link技术完成\n29| 千等万等，Multi-link技术终于现出原形了。  \n30| 修复了发布QQt SDK无处安置的问题。  \n31| 1. include(.../multi-link/multi-link/add_base_manager.pri)  \n32|    - 这里是多链接技术一切的开始。  \n33| 2. 提供函数 （这里只展示一部分）\n34|    - add_sdk() (lib工程用)  \n35|    - add_version()  \n36|    - ﻿add_deploy()  \n37|    - ﻿add_deploy_library()   \n38|    - ﻿add_deploy_config()  \n39|    - ﻿add_include()  \n40|    - ﻿add_headers()  \n41|    - ﻿add_library()  \n42|    - ﻿add_defines()  \n43|    - ﻿add_language()  \n44|    - ﻿add_zh_CN_en_US()  \n45| 3. 彻底的脱离了libQQt，但是提供对libQQt的链接支持，和对其他Library的链接支持一模一样。  \n46| 4. 有Multi-link帮助，用户可以任意的在app和lib之间设计链接关系了。  \n47| 5. QQt提供的强大功能，并没有因为Multi-link的升级而改变，依然强大。  ", "fragment_lines": [2], "fragment_content": ["#*文件组成和功能介绍***"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n#*文件组成和功能介绍***\n\n1. qqt_version.pri 用于更改Library的版本信息。只需要更改这一个地方就可以了\n\n2. qqt_qkit.pri 用于支持目标平台信息，读取环境变量QKIT设置SYSNAME。\n\n3. qqt_function.pri 提供丰富的操作函数，分为两类两种，一类获取命令字符串，一类执行命令，一种条件函数，一种求解函数。\n   \n   - mkdir system_errcode read_ini write_ini  empty_file write_line copy_dir user_home user_config_path\n   - 相应的get函数\n   - 支持windows 和 *nix。\n\n4. qqt_header.pri 包含qqt的特性开关，在这里决定library的大小和内部函数数目。\n   \n   - QQT_STATIC_LIBRARY 宏的开关判断也在这里。在linux等posix平台，这种区分动态静态的宏意义不是很大，一般不定义就可以。在windows平台要求很强烈，在QQt中，windows平台，编译静态库，无论编译还是链接，QQT_STATIC_LIBRARY都是需要的。动态库，编译时需要QQT_LIBRARY宏，链接时不需要宏。在qqt.pro和link_qqt.pri当中自动做了适配。\n\n5. qqt_source.pri 包含所有对应qqt的特性的源文件和头文件，HEADERS+= SOURCES+=全在这里。\n\n6. qqt_3rdparty.pri 包含所有的第三方源代码。对于GPL，第三方的还是单独拿出来。找问题和开关特性都比较清晰。\n\n7. qqt_install.pri 这里负责发布QQt SDK，所有的函数都在这里，但是发布工作在qqt_library.pri里，编译QQt时不发生任何发布sdk的问题，只有在app当中pre link的时候才会create sdk，link from sdk。\n\n8. qqt_library.pri qqt的sdk发布工作，app链接QQt工作，要求用户进行BUILD-SDK-DEPLOY ROOT路径指定也发生在这里。它会自动生成一个pri，给用户指定这三个变量。\n\n9. qqt_library.pri 包含以上这几个app需要的pri，这个文件现在只能放在library目录里。\n\n10. app_configure.pri app配置文件，这个一般是公共配置文件，里面包含了link_qqt_library.pri。更改意义不大，将来可能会被生成，而不是开始就存在。\n\n11. app_deploy.pri app发布文件，app发布到指定位置的工作就在这里实现，这个文件将来也可能被生成而不是开始就存在。\n\n# 将要实现\n\n- qqt_header.pri qqt_source.pri 两个pri将会自动生成lib_header.pri，lib_source.pri，用户实现这两个pri，填充和自己的library有关的头文件和源文件，模块开关等信息。\n- qqt_library.pri 将会自动生成app_configure.pri用于用户配置\n- app_deploy.pri 将会更名为qqt_deploy.pri，用来完成支援app发布所需的功能。\n- qqt_install.pri 将会负责和sdk发布相关的工作。\n- 这些pri将会全部转移到MLMA技术仓库，用户可以独立将其下载、配置，在一个地方完成多个lib和app工程的部署。\n  - 初步规划用户要clone到library目录。\n\n相信在Multi Link技术的帮助下，用户开发Library和Application肯定会如虎添翼，节省巨大的工时和精力。（现在仅仅支持LibQQt使用）\n\n# Multi-link技术完成\n\n千等万等，Multi-link技术终于现出原形了。  \n修复了发布QQt SDK无处安置的问题。  \n\n1. include(.../multi-link/multi-link/add_base_manager.pri)  \n   - 这里是多链接技术一切的开始。  \n2. 提供函数 （这里只展示一部分）\n   - add_sdk() (lib工程用)  \n   - add_version()  \n   - ﻿add_deploy()  \n   - ﻿add_deploy_library()   \n   - ﻿add_deploy_config()  \n   - ﻿add_include()  \n   - ﻿add_headers()  \n   - ﻿add_library()  \n   - ﻿add_defines()  \n   - ﻿add_language()  \n   - ﻿add_zh_CN_en_US()  \n3. 彻底的脱离了libQQt，但是提供对libQQt的链接支持，和对其他Library的链接支持一模一样。  \n4. 有Multi-link帮助，用户可以任意的在app和lib之间设计链接关系了。  \n5. QQt提供的强大功能，并没有因为Multi-link的升级而改变，依然强大。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/10", "category": "Special", "subtype": "markdown_title_error", "level": "hard", "example": "", "docstring": "This document details the evolution of a software across its various versions, including new features, bug fixes, performance improvements, and dependency updates.", "canonical_solution": "#### v0.8.0\n\n1. 增加本地ip和外网ip配置项\n2. ConnServer和GatewayServer增加bind ip和register ip 配置项\n3. ConnServer增加权重等扩展属性配置项\n4. 系统模块化重构：SPI增加Plugin接口及其init方法，增加MPushContext对象，方便插件初始化时控制系统内部对象\n5. 广播推送增加RedisBroadcastController存储推送结果到redis, 并通过redis控制推送任务\n6. 启动脚本优化修复不能加载自定义SPI的bug\n7. EventBus订阅方法增加@AllowConcurrentEvents注解，提高高并发性能\n8. 代码优化，当GatewayClient启动时从ZK获取的链接为空时，后续会尝试重新获取\n9. 优化ServerLauncher和PushClient代码，方便自定义系统配置和spring方式启动\n10. 依赖类库升级，日志优化，及其他bug fix\n\n#### v0.7.1\n\n1. 修复网关客户端获取连接失败bug\n2. 修复ZK临时节点在连接断开未重新注册bug\n3. PushClient代码优化，依赖服务启动／停止顺序优化\n4. 增加查询在线用户列表接口，修复Json转换bug\n5. 修改http代理request.copy引用计数bug\n6. 依赖类库升级，日志优化，及其他bug fix\n\n#### v0.7.0\n\n1. 网关新增udp, sctp协议支持，目前支持的协议有tcp/udp/sctp/udt, 推荐tcp\n2. 增加websocket接入层，和原接入层共享线程资源，增加websocket js client\n3. 抽象出cache层，不再直接依赖redis模块，支持自定义缓存实现\n4. 抽象出服务注册与发现层，不再直接依赖Zookeeper模块, 支持自定义服务注册发现\n5. 添加测试用的默认缓存实现以及注册发现实现，在不安装redis,zk的情况下也能进行源码测试\n6. 推送中心模块重构，支持不同的消息来源，支持自定义消息来源，编写从MQ订阅消息demo\n7. Gateway Client代码重构，支持多线程，多连接数配置\n8. 线程池优化，重新设计各模块线程配置方式，EventBus使用动态线程池，增加Netty线程池监控\n9. PushClient任务超时代码优化, 优化Timer任务线程池，在任务取消后直接从队列里删除\n10. PushSender同步调用直接返回PushResult不再兼容老的返回Boolean类型\n11. 修改TimeLine多线程bug，优化PushRequest多线程下代码 \n12. 修复ID_SEQ在高并发下重复的问题，不再使用LongAdder\n13. 代码优化，内存优化，修复推送超时问题\n14. 增加推送压测代码，增加推送统计及流控QPS监控等\n15. 增加tcp/udp 发送接收缓冲区配置\n16. 增netty write-buffer-water-mark配置\n17. 代码优化, 内存优化，及时释放无用的对象\n18. 流控调优，默认关闭流量整形\n19. 增加jmx监控统计, 脚本加入JMX设置，jvm设置\n20. 增加PushCenter消息流转时间线, 方便监控消息的各个生命周期的耗时(PushClient -> GatewayClient -> GatewayServer -> PushCenter -> ConnServer -> Client)\n21. 服务启动/停止流程优化，boot chain正序启动，逆序停止，启动流程日志优化\n\n#### v0.6.1\n\n1. 产品版本策略修改，主版本前移一位，最后一位用于小版本bug fix\n2. 新增支持单机多实例部署方式\n3. 升级依赖类库，解决由于版本升级引起的jedis和zk兼容性问题\n4. 核心日志打印内容优化，更利于问题排查\n5. 修复connId高并发下可能重复的bug\n6. 增加压测代码，优化测试模块\n7. 配置文件优化，增加相应的注释说明\n8. 修复流控发送计数引起的bug\n9. 优化内存占用，连接断开后立即释放Connection的引用\n10. 其他bug fix及代码优化\n\n#### v0.0.6\n\n1. 网关服务增加UDP及组播支持，后续网关部分的TCP部分将逐步淘汰\n2. 新增用户打标，修改标签，取消标签功能\n3. 全网推送增加按标签过滤，按条件过滤，条件表达式目前支持javascript\n4. Service模块代码优化，增加同步启动/停止，超时监控\n5. 推送模块增加流控功能, 分为全局流控和广播流控，以及基于Redis实现的实时流控\n6. 由于网关采用了UDP，PushClient模块和踢人模块增加UDP支持\n7. 线程池代码优化，线程命名调整, 支持配置调整Netty boss和work的线程数\n8. 路由模块:客户端定义增加SPI支持, 用户可自定义控制多端在线策略\n9. 日志及配置项优化，增加mp.home配置项\n10. 心跳检测优化，连接一建立就开始检测心跳，防止客户端握手失败或未握手的情况\n\n#### v0.0.5\n\n1. redis 增加redis3.x集群支持， 配置项不再兼容\n2. 绑定用户调整，校验重复绑定，以及未解绑，就绑定的场景\n3. 新增client push上行功能, 并支持用户以SPI方式集成自己的Handler\n4. 全网推送增加按标签过滤推送用户\n5. 增加流量控制，tcp发送缓冲区检测代码优化\n6. 修复ACK超时方法调用错误bug，增加ack超时时间设置\n7. 解码优化, 不再抛出解码异常，取消循环解码\n8. NettyServer 增加IoRate设置，优雅停止流程优化，先关闭main reactor\n9. 心跳优化，连接建立后就开始计算心跳\n10. sessionId生成器性能优化，采用jdk8 LongAdder\n11. Service模块开始使用java8 CompletableFuture\n12. SPI模块优化增加@Spi注解，多个实现可以指定顺序\n13. Profile 性能分析模块优化，增加性能监控开关配置，加入javassist优化性能\n14. zk client 代码优化，修改临时节点重复注册问题，增加DNS ZK Node\n15. 脚步修改start-foreground不能加载配置项bug, 修改windows启动命令bug\n16. 其他bug fix\n\n#### v0.0.4\n\n1. push client API 调整\n2. push 接口增加了全网推送功能\n3. 用户下线后路由信息不再删除，而是修改为下线状态\n4. 修复ZK Client临时节点断开后，不能恢复注册的bug\n5. 其他bug fix\n\n#### v0.0.3\n\n1. 增加了消息ACK功能\n2. 修复脚本换行问题\n3. bug fix\n\n### v0.0.2\n\n1. 增加多端同时在线攻能", "buggy_code": "\n#### #####  v0.8.0\n\n1. 增加本地ip和外网ip配置项\n2. ConnServer和GatewayServer增加bind ip和register ip 配置项\n3. ConnServer增加权重等扩展属性配置项\n4. 系统模块化重构：SPI增加Plugin接口及其init方法，增加MPushContext对象，方便插件初始化时控制系统内部对象\n5. 广播推送增加RedisBroadcastController存储推送结果到redis, 并通过redis控制推送任务\n6. 启动脚本优化修复不能加载自定义SPI的bug\n7. EventBus订阅方法增加@AllowConcurrentEvents注解，提高高并发性能\n8. 代码优化，当GatewayClient启动时从ZK获取的链接为空时，后续会尝试重新获取\n9. 优化ServerLauncher和PushClient代码，方便自定义系统配置和spring方式启动\n10. 依赖类库升级，日志优化，及其他bug fix\n\n#### v0.7.1\n\n1. 修复网关客户端获取连接失败bug\n2. 修复ZK临时节点在连接断开未重新注册bug\n3. PushClient代码优化，依赖服务启动／停止顺序优化\n4. 增加查询在线用户列表接口，修复Json转换bug\n5. 修改http代理request.copy引用计数bug\n6. 依赖类库升级，日志优化，及其他bug fix\n\n#### v0.7.0\n\n1. 网关新增udp, sctp协议支持，目前支持的协议有tcp/udp/sctp/udt, 推荐tcp\n2. 增加websocket接入层，和原接入层共享线程资源，增加websocket js client\n3. 抽象出cache层，不再直接依赖redis模块，支持自定义缓存实现\n4. 抽象出服务注册与发现层，不再直接依赖Zookeeper模块, 支持自定义服务注册发现\n5. 添加测试用的默认缓存实现以及注册发现实现，在不安装redis,zk的情况下也能进行源码测试\n6. 推送中心模块重构，支持不同的消息来源，支持自定义消息来源，编写从MQ订阅消息demo\n7. Gateway Client代码重构，支持多线程，多连接数配置\n8. 线程池优化，重新设计各模块线程配置方式，EventBus使用动态线程池，增加Netty线程池监控\n9. PushClient任务超时代码优化, 优化Timer任务线程池，在任务取消后直接从队列里删除\n10. PushSender同步调用直接返回PushResult不再兼容老的返回Boolean类型\n11. 修改TimeLine多线程bug，优化PushRequest多线程下代码 \n12. 修复ID_SEQ在高并发下重复的问题，不再使用LongAdder\n13. 代码优化，内存优化，修复推送超时问题\n14. 增加推送压测代码，增加推送统计及流控QPS监控等\n15. 增加tcp/udp 发送接收缓冲区配置\n16. 增netty write-buffer-water-mark配置\n17. 代码优化, 内存优化，及时释放无用的对象\n18. 流控调优，默认关闭流量整形\n19. 增加jmx监控统计, 脚本加入JMX设置，jvm设置\n20. 增加PushCenter消息流转时间线, 方便监控消息的各个生命周期的耗时(PushClient -> GatewayClient -> GatewayServer -> PushCenter -> ConnServer -> Client)\n21. 服务启动/停止流程优化，boot chain正序启动，逆序停止，启动流程日志优化\n\n#### v0.6.1\n\n1. 产品版本策略修改，主版本前移一位，最后一位用于小版本bug fix\n2. 新增支持单机多实例部署方式\n3. 升级依赖类库，解决由于版本升级引起的jedis和zk兼容性问题\n4. 核心日志打印内容优化，更利于问题排查\n5. 修复connId高并发下可能重复的bug\n6. 增加压测代码，优化测试模块\n7. 配置文件优化，增加相应的注释说明\n8. 修复流控发送计数引起的bug\n9. 优化内存占用，连接断开后立即释放Connection的引用\n10. 其他bug fix及代码优化\n\n#### v0.0.6\n\n1. 网关服务增加UDP及组播支持，后续网关部分的TCP部分将逐步淘汰\n2. 新增用户打标，修改标签，取消标签功能\n3. 全网推送增加按标签过滤，按条件过滤，条件表达式目前支持javascript\n4. Service模块代码优化，增加同步启动/停止，超时监控\n5. 推送模块增加流控功能, 分为全局流控和广播流控，以及基于Redis实现的实时流控\n6. 由于网关采用了UDP，PushClient模块和踢人模块增加UDP支持\n7. 线程池代码优化，线程命名调整, 支持配置调整Netty boss和work的线程数\n8. 路由模块:客户端定义增加SPI支持, 用户可自定义控制多端在线策略\n9. 日志及配置项优化，增加mp.home配置项\n10. 心跳检测优化，连接一建立就开始检测心跳，防止客户端握手失败或未握手的情况\n\n#### v0.0.5\n\n1. redis 增加redis3.x集群支持， 配置项不再兼容\n2. 绑定用户调整，校验重复绑定，以及未解绑，就绑定的场景\n3. 新增client push上行功能, 并支持用户以SPI方式集成自己的Handler\n4. 全网推送增加按标签过滤推送用户\n5. 增加流量控制，tcp发送缓冲区检测代码优化\n6. 修复ACK超时方法调用错误bug，增加ack超时时间设置\n7. 解码优化, 不再抛出解码异常，取消循环解码\n8. NettyServer 增加IoRate设置，优雅停止流程优化，先关闭main reactor\n9. 心跳优化，连接建立后就开始计算心跳\n10. sessionId生成器性能优化，采用jdk8 LongAdder\n11. Service模块开始使用java8 CompletableFuture\n12. SPI模块优化增加@Spi注解，多个实现可以指定顺序\n13. Profile 性能分析模块优化，增加性能监控开关配置，加入javassist优化性能\n14. zk client 代码优化，修改临时节点重复注册问题，增加DNS ZK Node\n15. 脚步修改start-foreground不能加载配置项bug, 修改windows启动命令bug\n16. 其他bug fix\n\n#### v0.0.4\n\n1. push client API 调整\n2. push 接口增加了全网推送功能\n3. 用户下线后路由信息不再删除，而是修改为下线状态\n4. 修复ZK Client临时节点断开后，不能恢复注册的bug\n5. 其他bug fix\n\n#### v0.0.3\n\n1. 增加了消息ACK功能\n2. 修复脚本换行问题\n3. bug fix\n\n### v0.0.2\n\n1. 增加多端同时在线攻能", "bug_with_line_numbers": "1| #### #####  v0.8.0\n2| 1. 增加本地ip和外网ip配置项\n3| 2. ConnServer和GatewayServer增加bind ip和register ip 配置项\n4| 3. ConnServer增加权重等扩展属性配置项\n5| 4. 系统模块化重构：SPI增加Plugin接口及其init方法，增加MPushContext对象，方便插件初始化时控制系统内部对象\n6| 5. 广播推送增加RedisBroadcastController存储推送结果到redis, 并通过redis控制推送任务\n7| 6. 启动脚本优化修复不能加载自定义SPI的bug\n8| 7. EventBus订阅方法增加@AllowConcurrentEvents注解，提高高并发性能\n9| 8. 代码优化，当GatewayClient启动时从ZK获取的链接为空时，后续会尝试重新获取\n10| 9. 优化ServerLauncher和PushClient代码，方便自定义系统配置和spring方式启动\n11| 10. 依赖类库升级，日志优化，及其他bug fix\n12| #### v0.7.1\n13| 1. 修复网关客户端获取连接失败bug\n14| 2. 修复ZK临时节点在连接断开未重新注册bug\n15| 3. PushClient代码优化，依赖服务启动／停止顺序优化\n16| 4. 增加查询在线用户列表接口，修复Json转换bug\n17| 5. 修改http代理request.copy引用计数bug\n18| 6. 依赖类库升级，日志优化，及其他bug fix\n19| #### v0.7.0\n20| 1. 网关新增udp, sctp协议支持，目前支持的协议有tcp/udp/sctp/udt, 推荐tcp\n21| 2. 增加websocket接入层，和原接入层共享线程资源，增加websocket js client\n22| 3. 抽象出cache层，不再直接依赖redis模块，支持自定义缓存实现\n23| 4. 抽象出服务注册与发现层，不再直接依赖Zookeeper模块, 支持自定义服务注册发现\n24| 5. 添加测试用的默认缓存实现以及注册发现实现，在不安装redis,zk的情况下也能进行源码测试\n25| 6. 推送中心模块重构，支持不同的消息来源，支持自定义消息来源，编写从MQ订阅消息demo\n26| 7. Gateway Client代码重构，支持多线程，多连接数配置\n27| 8. 线程池优化，重新设计各模块线程配置方式，EventBus使用动态线程池，增加Netty线程池监控\n28| 9. PushClient任务超时代码优化, 优化Timer任务线程池，在任务取消后直接从队列里删除\n29| 10. PushSender同步调用直接返回PushResult不再兼容老的返回Boolean类型\n30| 11. 修改TimeLine多线程bug，优化PushRequest多线程下代码 \n31| 12. 修复ID_SEQ在高并发下重复的问题，不再使用LongAdder\n32| 13. 代码优化，内存优化，修复推送超时问题\n33| 14. 增加推送压测代码，增加推送统计及流控QPS监控等\n34| 15. 增加tcp/udp 发送接收缓冲区配置\n35| 16. 增netty write-buffer-water-mark配置\n36| 17. 代码优化, 内存优化，及时释放无用的对象\n37| 18. 流控调优，默认关闭流量整形\n38| 19. 增加jmx监控统计, 脚本加入JMX设置，jvm设置\n39| 20. 增加PushCenter消息流转时间线, 方便监控消息的各个生命周期的耗时(PushClient -> GatewayClient -> GatewayServer -> PushCenter -> ConnServer -> Client)\n40| 21. 服务启动/停止流程优化，boot chain正序启动，逆序停止，启动流程日志优化\n41| #### v0.6.1\n42| 1. 产品版本策略修改，主版本前移一位，最后一位用于小版本bug fix\n43| 2. 新增支持单机多实例部署方式\n44| 3. 升级依赖类库，解决由于版本升级引起的jedis和zk兼容性问题\n45| 4. 核心日志打印内容优化，更利于问题排查\n46| 5. 修复connId高并发下可能重复的bug\n47| 6. 增加压测代码，优化测试模块\n48| 7. 配置文件优化，增加相应的注释说明\n49| 8. 修复流控发送计数引起的bug\n50| 9. 优化内存占用，连接断开后立即释放Connection的引用\n51| 10. 其他bug fix及代码优化\n52| #### v0.0.6\n53| 1. 网关服务增加UDP及组播支持，后续网关部分的TCP部分将逐步淘汰\n54| 2. 新增用户打标，修改标签，取消标签功能\n55| 3. 全网推送增加按标签过滤，按条件过滤，条件表达式目前支持javascript\n56| 4. Service模块代码优化，增加同步启动/停止，超时监控\n57| 5. 推送模块增加流控功能, 分为全局流控和广播流控，以及基于Redis实现的实时流控\n58| 6. 由于网关采用了UDP，PushClient模块和踢人模块增加UDP支持\n59| 7. 线程池代码优化，线程命名调整, 支持配置调整Netty boss和work的线程数\n60| 8. 路由模块:客户端定义增加SPI支持, 用户可自定义控制多端在线策略\n61| 9. 日志及配置项优化，增加mp.home配置项\n62| 10. 心跳检测优化，连接一建立就开始检测心跳，防止客户端握手失败或未握手的情况\n63| #### v0.0.5\n64| 1. redis 增加redis3.x集群支持， 配置项不再兼容\n65| 2. 绑定用户调整，校验重复绑定，以及未解绑，就绑定的场景\n66| 3. 新增client push上行功能, 并支持用户以SPI方式集成自己的Handler\n67| 4. 全网推送增加按标签过滤推送用户\n68| 5. 增加流量控制，tcp发送缓冲区检测代码优化\n69| 6. 修复ACK超时方法调用错误bug，增加ack超时时间设置\n70| 7. 解码优化, 不再抛出解码异常，取消循环解码\n71| 8. NettyServer 增加IoRate设置，优雅停止流程优化，先关闭main reactor\n72| 9. 心跳优化，连接建立后就开始计算心跳\n73| 10. sessionId生成器性能优化，采用jdk8 LongAdder\n74| 11. Service模块开始使用java8 CompletableFuture\n75| 12. SPI模块优化增加@Spi注解，多个实现可以指定顺序\n76| 13. Profile 性能分析模块优化，增加性能监控开关配置，加入javassist优化性能\n77| 14. zk client 代码优化，修改临时节点重复注册问题，增加DNS ZK Node\n78| 15. 脚步修改start-foreground不能加载配置项bug, 修改windows启动命令bug\n79| 16. 其他bug fix\n80| #### v0.0.4\n81| 1. push client API 调整\n82| 2. push 接口增加了全网推送功能\n83| 3. 用户下线后路由信息不再删除，而是修改为下线状态\n84| 4. 修复ZK Client临时节点断开后，不能恢复注册的bug\n85| 5. 其他bug fix\n86| #### v0.0.3\n87| 1. 增加了消息ACK功能\n88| 2. 修复脚本换行问题\n89| 3. bug fix\n90| ### v0.0.2\n91| 1. 增加多端同时在线攻能", "fragment_lines": [1], "fragment_content": ["#### #####  v0.8.0"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n#### #####  v0.8.0\n\n1. 增加本地ip和外网ip配置项\n2. ConnServer和GatewayServer增加bind ip和register ip 配置项\n3. ConnServer增加权重等扩展属性配置项\n4. 系统模块化重构：SPI增加Plugin接口及其init方法，增加MPushContext对象，方便插件初始化时控制系统内部对象\n5. 广播推送增加RedisBroadcastController存储推送结果到redis, 并通过redis控制推送任务\n6. 启动脚本优化修复不能加载自定义SPI的bug\n7. EventBus订阅方法增加@AllowConcurrentEvents注解，提高高并发性能\n8. 代码优化，当GatewayClient启动时从ZK获取的链接为空时，后续会尝试重新获取\n9. 优化ServerLauncher和PushClient代码，方便自定义系统配置和spring方式启动\n10. 依赖类库升级，日志优化，及其他bug fix\n\n#### v0.7.1\n\n1. 修复网关客户端获取连接失败bug\n2. 修复ZK临时节点在连接断开未重新注册bug\n3. PushClient代码优化，依赖服务启动／停止顺序优化\n4. 增加查询在线用户列表接口，修复Json转换bug\n5. 修改http代理request.copy引用计数bug\n6. 依赖类库升级，日志优化，及其他bug fix\n\n#### v0.7.0\n\n1. 网关新增udp, sctp协议支持，目前支持的协议有tcp/udp/sctp/udt, 推荐tcp\n2. 增加websocket接入层，和原接入层共享线程资源，增加websocket js client\n3. 抽象出cache层，不再直接依赖redis模块，支持自定义缓存实现\n4. 抽象出服务注册与发现层，不再直接依赖Zookeeper模块, 支持自定义服务注册发现\n5. 添加测试用的默认缓存实现以及注册发现实现，在不安装redis,zk的情况下也能进行源码测试\n6. 推送中心模块重构，支持不同的消息来源，支持自定义消息来源，编写从MQ订阅消息demo\n7. Gateway Client代码重构，支持多线程，多连接数配置\n8. 线程池优化，重新设计各模块线程配置方式，EventBus使用动态线程池，增加Netty线程池监控\n9. PushClient任务超时代码优化, 优化Timer任务线程池，在任务取消后直接从队列里删除\n10. PushSender同步调用直接返回PushResult不再兼容老的返回Boolean类型\n11. 修改TimeLine多线程bug，优化PushRequest多线程下代码 \n12. 修复ID_SEQ在高并发下重复的问题，不再使用LongAdder\n13. 代码优化，内存优化，修复推送超时问题\n14. 增加推送压测代码，增加推送统计及流控QPS监控等\n15. 增加tcp/udp 发送接收缓冲区配置\n16. 增netty write-buffer-water-mark配置\n17. 代码优化, 内存优化，及时释放无用的对象\n18. 流控调优，默认关闭流量整形\n19. 增加jmx监控统计, 脚本加入JMX设置，jvm设置\n20. 增加PushCenter消息流转时间线, 方便监控消息的各个生命周期的耗时(PushClient -> GatewayClient -> GatewayServer -> PushCenter -> ConnServer -> Client)\n21. 服务启动/停止流程优化，boot chain正序启动，逆序停止，启动流程日志优化\n\n#### v0.6.1\n\n1. 产品版本策略修改，主版本前移一位，最后一位用于小版本bug fix\n2. 新增支持单机多实例部署方式\n3. 升级依赖类库，解决由于版本升级引起的jedis和zk兼容性问题\n4. 核心日志打印内容优化，更利于问题排查\n5. 修复connId高并发下可能重复的bug\n6. 增加压测代码，优化测试模块\n7. 配置文件优化，增加相应的注释说明\n8. 修复流控发送计数引起的bug\n9. 优化内存占用，连接断开后立即释放Connection的引用\n10. 其他bug fix及代码优化\n\n#### v0.0.6\n\n1. 网关服务增加UDP及组播支持，后续网关部分的TCP部分将逐步淘汰\n2. 新增用户打标，修改标签，取消标签功能\n3. 全网推送增加按标签过滤，按条件过滤，条件表达式目前支持javascript\n4. Service模块代码优化，增加同步启动/停止，超时监控\n5. 推送模块增加流控功能, 分为全局流控和广播流控，以及基于Redis实现的实时流控\n6. 由于网关采用了UDP，PushClient模块和踢人模块增加UDP支持\n7. 线程池代码优化，线程命名调整, 支持配置调整Netty boss和work的线程数\n8. 路由模块:客户端定义增加SPI支持, 用户可自定义控制多端在线策略\n9. 日志及配置项优化，增加mp.home配置项\n10. 心跳检测优化，连接一建立就开始检测心跳，防止客户端握手失败或未握手的情况\n\n#### v0.0.5\n\n1. redis 增加redis3.x集群支持， 配置项不再兼容\n2. 绑定用户调整，校验重复绑定，以及未解绑，就绑定的场景\n3. 新增client push上行功能, 并支持用户以SPI方式集成自己的Handler\n4. 全网推送增加按标签过滤推送用户\n5. 增加流量控制，tcp发送缓冲区检测代码优化\n6. 修复ACK超时方法调用错误bug，增加ack超时时间设置\n7. 解码优化, 不再抛出解码异常，取消循环解码\n8. NettyServer 增加IoRate设置，优雅停止流程优化，先关闭main reactor\n9. 心跳优化，连接建立后就开始计算心跳\n10. sessionId生成器性能优化，采用jdk8 LongAdder\n11. Service模块开始使用java8 CompletableFuture\n12. SPI模块优化增加@Spi注解，多个实现可以指定顺序\n13. Profile 性能分析模块优化，增加性能监控开关配置，加入javassist优化性能\n14. zk client 代码优化，修改临时节点重复注册问题，增加DNS ZK Node\n15. 脚步修改start-foreground不能加载配置项bug, 修改windows启动命令bug\n16. 其他bug fix\n\n#### v0.0.4\n\n1. push client API 调整\n2. push 接口增加了全网推送功能\n3. 用户下线后路由信息不再删除，而是修改为下线状态\n4. 修复ZK Client临时节点断开后，不能恢复注册的bug\n5. 其他bug fix\n\n#### v0.0.3\n\n1. 增加了消息ACK功能\n2. 修复脚本换行问题\n3. bug fix\n\n### v0.0.2\n\n1. 增加多端同时在线攻能\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/11", "category": "Multiple", "subtype": "triple_bug", "level": "hard", "example": "", "docstring": "An introduction to flang, a new programming language designed to merge Python's simplicity with C++'s performance. It features static typing, AOT compilation, and interoperability with C and other languages.", "canonical_solution": "# flang\n\nflang的目标是设计一个兼具python的优点，但是又能够非常高效运行，工程友好的编程语言。\n\n> + **简洁**（像python一样，代码简洁）语法简洁，开发速度快，贯彻编程语言\n>   为人服务的目标\n> + **高效**（像C++一样零成本抽象）运行速度快，发布体积小\n> + **易用**（像rust、swift一样，拥有类型推导，异常处理，对象分配内存自动\n>   回收，异步并发等现代语言特性）且容易和利用其他语言模块成果\n\n**目的是更好的服务于现代工业，契合科学研究和工业需求。**未来的工业领域一定是与程序密不可分的，程序将不仅仅是程序员专有的，还将是各个领域的工具，必定是向matlab、labview那样对各领域人员友好的，并且是高效简洁的。在程序员都在需求易用性更高的语言和框架的今天，开发工业友好、高效的语言很有意义。\n\nflang基本定位：\n\n+ 可以解释执行、AOT运行，也可以编译为机器码运行。可作为编译语言、可作为脚本。\n+ 提供二进制中间代码预编译格式。\n+ 无虚拟机、无GC，不支持指针，采用引用计数(ARC)等方法自动回收堆内存。\n+ 静态类型，支持类型推导和泛型。但是提供dynamic动态类型支持，用于特殊情况。\n+ 语法简洁。但是可以通过标记（类似C#的Attribute特性，rust的Attribute属性）指定内存及编译特点，进一步优化性能。\n+ 能够方面方便的调用C++等语言编制的模块。与C语言可以混合编译。\n\n## flang 语言主要特点\n\n1. 编译型语言(支持二进制编译、AOT，也可以解释运行)\n   + 编译型语言，可直接编译为二进制机器码。支持预编译为二进制字节码。\n   + 支持AOT和解释方式运行。\n     + repl解释器\\[独立安装组件\\]，可以供学习、研究用。\n     + AOT编译器，可内嵌到其他应用\\[独立安装组件\\]，作为内嵌脚本。在作为服务器端应用时，方便热更新代码。\n   + 无虚拟机、无运行时、核心语言小\n2. 数据类型\n   + 静态类型（提供dynamic类型支持，方便后期绑定等特殊应用）\n   + 类C的弱类型，数值计算可以自动转换类型。其他类型为强类型。\n   + 提供精确计算及无限制精度整数支持。\n   + 原生支持Unicode，默认使用UTF-8编码。\n   + 原生支持高级数据结构，如List, Dict等\n   + 支持泛型\n   + 支持类型推导\n3. 语法\n   + 尽可能简化语法的情况下，增强功能。贯彻编程语言为人服务的宗旨。\n   + 零成本抽象(静态分发、动态分发、虚表结合优化)\n     - 所有程序最终转换为“数据+算法+接口+消息”的组合，(兼顾面向对象、函数式、面向数据、并发编程等)\n     - 尽可能的由编译器实现静态分发，必要的情况下采用动态分发方式(也可以用标记自行指定)\n4. 内存管理\n   + 无GC、无指针、无运行时\n   + 安全的堆操作，数据对象自动释放堆内存（采用引用计数方法（ARC）回收堆内存）\n5. 原生的异常处理\n6. 原生异步、并发设计\n7. 语言互操作\n   + 支持内嵌llvm ir\n   + 支持与C语言直接交互,\n   + 考虑通过类似runtime的小型独立模块或引擎与其他语言混编（像lua一样小巧，\n     适当损失性能，保持语言自身的简洁与纯净）\n8. 跨平台\n   + 平台api包装成类似python的sys, os模块，简洁、通用、方便\n   + ui，图像等系统高耦合操作：dsl标准库(类似html+css的方式与flang交互)。\n\n> 一定程度的支持反射\n\n## 语言设计\n\n+ [语法设计](doc/specification/中文/目录.md)\n\nflang helloworld代码示例：\n\n```\n// helloworld.f\ndomain hello\nuse sys.*\n\npub func main(){\n  println(\"hello, world!\")\n}\n```\n\nflang源代码通常有以下四部分组成：\n\n+ 注释\n+ 域声明（可省略，默认和文件名相同）\n+ 外部域引用\n+ 函数、类型、类型别名或特性定义\n\n## flang编译器命令\n\n+ 源代码文件编译\n  - `flang compile hello.f`: `or flang hello.f`编译单个文件\n    + 参数 -i -b -s -c 分别表示输出IR、二进制IR、汇编、目标文件。\n      可以组合，比如：`-ibc`\n  - `flang run hello.f`:编译单个文件并运行\n  - `flang prebuild hello.f`：预编译为二进制中间码\n+ 源文件编辑辅助\n  - `flang fmt`: or `flang format`格式化源文件\n  - `flang doc`:生成文档\n+ 源代码组织管理\n  - `flang init`:创建一个proj，proj中包含一个mod，mod中含有一个helloworld源代码。\n  - `flang new modname`:在当前proj中增加一个mod。\n      +`flang new --bin modname`:表示目标位二进制执行程序。\n      +`flang new --lib modname`:则表示库 。\n  - `flang dep`:依赖管理\n    + `falng dep where`: 显示依赖所在文件夹。\n    + `flang dep cache`: 下载依赖到本机。\n    + `flang dep config`: 依赖缓存位置设置。\n    + `flang dep update`: 更新依赖，(如果项目依赖设置中指定了最大版本，则最多更新到最大版本)。\n    + `flang dep build`: 编译依赖。\n    + `flang dep clean`: 清除依赖编译的文件。\n    + `flang dep list`: 显示依赖列表\n    + `flang dep graph`: 树状显示依赖列表\n    + `flang dep verify`: 检测依赖包自下载之后是否被改动过。\n    + `flang dep help`: 显示帮助\n+ 工程模块编译运行\n  - `flang check`:语法检查\n  - `flang build`:编译当前模块mod或者项目proj。\n    + `flang build --release`: or `-r`编译发布版。默认为--debug\n    + `flang build --release --arch:i386 --os:win`交叉编译\n  - `flang run`:编译并运行当前模块或项目\n  - `flang prebuild`：预编译为二进制中间码\n  - `flang clean`:清除生成的目标文件\n  - `flang test`:编译运行当前模块或项目的测试代码\n  - `flang bench`:运行基准测试\n+ 交互模式\n  - `flang play`:运行playground\n  - `flang shell`: or `flang repl`运行交互式解释器环境\n+ llvm输出\n  - `flang llvm --ast hello.f`:  输出抽象语法树\n  - `flang llvm --ir hello.f`: or `-i` 输出ir代码\n  - `flang llvm --ir -O3 hello.f -o hello.ll`: 输出ir代码，3级优化\n  - `flang llvm --bc hello.f`: or `-b` 输出bitcode（二进制的ir代码）\n  - `flang llvm --asm hello.f`: or `-s` 输出汇编代码\n\n## 后记\n\n希望能够设计一个语法简洁，易学易用，性能也不错的新语言，即使最后没有实现也不要紧，欢迎各位大佬萌新一起出谋划策。", "buggy_code": "\n# flang\n\nflang的目标是设计一个兼具python的优点，但是又能够非常高效运行，工程友好的编程语言。\n\n> + **简洁**（像python一样，代码简洁）语法简洁，开发速度快，贯彻编程语言\n>   为人服务的目标\n> + **高效**（像C++一样零成本抽象）运行速度快，发布体积小\n> + **易用**（像rust、swift一样，拥有类型推导，异常处理，对象分配内存自动\n>   回收，异步并发等现代语言特性）且容易和利用其他语言模块成果\n\n**目的是更好的服务于现代工业，契合科学研究和工业需求。未来的工业领域一定是与程序密不可分的，程序将不仅仅是程序员专有的，还将是各个领域的工具，必定是向matlab、labview那样对各领域人员友好的，并且是高效简洁的。在程序员都在需求易用性更高的语言和框架的今天，开发工业友好、高效的语言很有意义。\n\nflang基本定位：\n\n+ 可以解释执行、AOT运行，也可以编译为机器码运行。可作为编译语言、可作为脚本。\n+ 提供二进制中间代码预编译格式。\n+ 无虚拟机、无GC，不支持指针，采用引用计数(ARC)等方法自动回收堆内存。\n+ 静态类型，支持类型推导和泛型。但是提供dynamic动态类型支持，用于特殊情况。\n+ 语法简洁。但是可以通过标记（类似C#的Attribute特性，rust的Attribute属性）指定内存及编译特点，进一步优化性能。\n+ 能够方面方便的调用C++等语言编制的模块。与C语言可以混合编译。\n\n## flang 语言主要特点\n\n1. 编译型语言(支持二进制编译、AOT，也可以解释运行)\n   + 编译型语言，可直接编译为二进制机器码。支持预编译为二进制字节码。\n   + 支持AOT和解释方式运行。\n     + repl解释器\\[独立安装组件\\]，可以供学习、研究用。\n     + AOT编译器，可内嵌到其他应用\\[独立安装组件\\]，作为内嵌脚本。在作为服务器端应用时，方便热更新代码。\n   + 无虚拟机、无运行时、核心语言小\n2. **数据类型\n   + 静态类型（提供dynamic类型支持，方便后期绑定等特殊应用）\n   + 类C的弱类型，数值计算可以自动转换类型。其他类型为强类型。\n   + 提供精确计算及无限制精度整数支持。\n   + 原生支持Unicode，默认使用UTF-8编码。\n   + 原生支持高级数据结构，如List, Dict等\n   + 支持泛型\n   + 支持类型推导\n3. 语法\n   + 尽可能简化语法的情况下，增强功能。贯彻编程语言为人服务的宗旨。\n   + 零成本抽象(静态分发、动态分发、虚表结合优化)\n     - 所有程序最终转换为“数据+算法+接口+消息”的组合，(兼顾面向对象、函数式、面向数据、并发编程等)\n     - 尽可能的由编译器实现静态分发，必要的情况下采用动态分发方式(也可以用标记自行指定)\n4. 内存管理\n   + 无GC、无指针、无运行时\n   + 安全的堆操作，数据对象自动释放堆内存（采用引用计数方法（ARC）回收堆内存）\n5. 原生的异常处理\n6. 原生异步、并发设计\n7. 语言互操作\n   + 支持内嵌llvm ir\n   + 支持与C语言直接交互,\n   + 考虑通过类似runtime的小型独立模块或引擎与其他语言混编（像lua一样小巧，\n     适当损失性能，保持语言自身的简洁与纯净）\n8. 跨平台\n   + 平台api包装成类似python的sys, os模块，简洁、通用、方便\n   + ui，图像等系统高耦合操作：dsl标准库(类似html+css的方式与flang交互)。\n\n> 一定程度的支持反射\n\n## 语言设计\n\n+ [语法设计(doc/specification/中文/目录.md)\n\nflang helloworld代码示例：\n\n```\n// helloworld.f\ndomain hello\nuse sys.*\n\npub func main(){\n  println(\"hello, world!\")\n}\n```\n\nflang源代码通常有以下四部分组成：\n\n+ 注释\n+ 域声明（可省略，默认和文件名相同）\n+ 外部域引用\n+ 函数、类型、类型别名或特性定义\n\n## flang编译器命令\n\n+ 源代码文件编译\n  - `flang compile hello.f`: `or flang hello.f`编译单个文件\n    + 参数 -i -b -s -c 分别表示输出IR、二进制IR、汇编、目标文件。\n      可以组合，比如：`-ibc`\n  - `flang run hello.f`:编译单个文件并运行\n  - `flang prebuild hello.f`：预编译为二进制中间码\n+ 源文件编辑辅助\n  - `flang fmt`: or `flang format`格式化源文件\n  - `flang doc`:生成文档\n+ 源代码组织管理\n  - `flang init`:创建一个proj，proj中包含一个mod，mod中含有一个helloworld源代码。\n  - `flang new modname`:在当前proj中增加一个mod。\n      +`flang new --bin modname`:表示目标位二进制执行程序。\n      +`flang new --lib modname`:则表示库 。\n  - `flang dep`:依赖管理\n    + `falng dep where`: 显示依赖所在文件夹。\n    + `flang dep cache`: 下载依赖到本机。\n    + `flang dep config`: 依赖缓存位置设置。\n    + `flang dep update`: 更新依赖，(如果项目依赖设置中指定了最大版本，则最多更新到最大版本)。\n    + `flang dep build`: 编译依赖。\n    + `flang dep clean`: 清除依赖编译的文件。\n    + `flang dep list`: 显示依赖列表\n    + `flang dep graph`: 树状显示依赖列表\n    + `flang dep verify`: 检测依赖包自下载之后是否被改动过。\n    + `flang dep help`: 显示帮助\n+ 工程模块编译运行\n  - `flang check`:语法检查\n  - `flang build`:编译当前模块mod或者项目proj。\n    + `flang build --release`: or `-r`编译发布版。默认为--debug\n    + `flang build --release --arch:i386 --os:win`交叉编译\n  - `flang run`:编译并运行当前模块或项目\n  - `flang prebuild`：预编译为二进制中间码\n  - `flang clean`:清除生成的目标文件\n  - `flang test`:编译运行当前模块或项目的测试代码\n  - `flang bench`:运行基准测试\n+ 交互模式\n  - `flang play`:运行playground\n  - `flang shell`: or `flang repl`运行交互式解释器环境\n+ llvm输出\n  - `flang llvm --ast hello.f`:  输出抽象语法树\n  - `flang llvm --ir hello.f`: or `-i` 输出ir代码\n  - `flang llvm --ir -O3 hello.f -o hello.ll`: 输出ir代码，3级优化\n  - `flang llvm --bc hello.f`: or `-b` 输出bitcode（二进制的ir代码）\n  - `flang llvm --asm hello.f`: or `-s` 输出汇编代码\n\n## 后记\n\n希望能够设计一个语法简洁，易学易用，性能也不错的新语言，即使最后没有实现也不要紧，欢迎各位大佬萌新一起出谋划策。", "bug_with_line_numbers": "1| # flang\n2| flang的目标是设计一个兼具python的优点，但是又能够非常高效运行，工程友好的编程语言。\n3| > + **简洁**（像python一样，代码简洁）语法简洁，开发速度快，贯彻编程语言\n4| >   为人服务的目标\n5| > + **高效**（像C++一样零成本抽象）运行速度快，发布体积小\n6| > + **易用**（像rust、swift一样，拥有类型推导，异常处理，对象分配内存自动\n7| >   回收，异步并发等现代语言特性）且容易和利用其他语言模块成果\n8| **目的是更好的服务于现代工业，契合科学研究和工业需求。未来的工业领域一定是与程序密不可分的，程序将不仅仅是程序员专有的，还将是各个领域的工具，必定是向matlab、labview那样对各领域人员友好的，并且是高效简洁的。在程序员都在需求易用性更高的语言和框架的今天，开发工业友好、高效的语言很有意义。\n9| flang基本定位：\n10| + 可以解释执行、AOT运行，也可以编译为机器码运行。可作为编译语言、可作为脚本。\n11| + 提供二进制中间代码预编译格式。\n12| + 无虚拟机、无GC，不支持指针，采用引用计数(ARC)等方法自动回收堆内存。\n13| + 静态类型，支持类型推导和泛型。但是提供dynamic动态类型支持，用于特殊情况。\n14| + 语法简洁。但是可以通过标记（类似C#的Attribute特性，rust的Attribute属性）指定内存及编译特点，进一步优化性能。\n15| + 能够方面方便的调用C++等语言编制的模块。与C语言可以混合编译。\n16| ## flang 语言主要特点\n17| 1. 编译型语言(支持二进制编译、AOT，也可以解释运行)\n18|    + 编译型语言，可直接编译为二进制机器码。支持预编译为二进制字节码。\n19|    + 支持AOT和解释方式运行。\n20|      + repl解释器\\[独立安装组件\\]，可以供学习、研究用。\n21|      + AOT编译器，可内嵌到其他应用\\[独立安装组件\\]，作为内嵌脚本。在作为服务器端应用时，方便热更新代码。\n22|    + 无虚拟机、无运行时、核心语言小\n23| 2. **数据类型\n24|    + 静态类型（提供dynamic类型支持，方便后期绑定等特殊应用）\n25|    + 类C的弱类型，数值计算可以自动转换类型。其他类型为强类型。\n26|    + 提供精确计算及无限制精度整数支持。\n27|    + 原生支持Unicode，默认使用UTF-8编码。\n28|    + 原生支持高级数据结构，如List, Dict等\n29|    + 支持泛型\n30|    + 支持类型推导\n31| 3. 语法\n32|    + 尽可能简化语法的情况下，增强功能。贯彻编程语言为人服务的宗旨。\n33|    + 零成本抽象(静态分发、动态分发、虚表结合优化)\n34|      - 所有程序最终转换为“数据+算法+接口+消息”的组合，(兼顾面向对象、函数式、面向数据、并发编程等)\n35|      - 尽可能的由编译器实现静态分发，必要的情况下采用动态分发方式(也可以用标记自行指定)\n36| 4. 内存管理\n37|    + 无GC、无指针、无运行时\n38|    + 安全的堆操作，数据对象自动释放堆内存（采用引用计数方法（ARC）回收堆内存）\n39| 5. 原生的异常处理\n40| 6. 原生异步、并发设计\n41| 7. 语言互操作\n42|    + 支持内嵌llvm ir\n43|    + 支持与C语言直接交互,\n44|    + 考虑通过类似runtime的小型独立模块或引擎与其他语言混编（像lua一样小巧，\n45|      适当损失性能，保持语言自身的简洁与纯净）\n46| 8. 跨平台\n47|    + 平台api包装成类似python的sys, os模块，简洁、通用、方便\n48|    + ui，图像等系统高耦合操作：dsl标准库(类似html+css的方式与flang交互)。\n49| > 一定程度的支持反射\n50| ## 语言设计\n51| + [语法设计(doc/specification/中文/目录.md)\n52| flang helloworld代码示例：\n53| ```\n54| // helloworld.f\n55| domain hello\n56| use sys.*\n57| pub func main(){\n58|   println(\"hello, world!\")\n59| }\n60| ```\n61| flang源代码通常有以下四部分组成：\n62| + 注释\n63| + 域声明（可省略，默认和文件名相同）\n64| + 外部域引用\n65| + 函数、类型、类型别名或特性定义\n66| ## flang编译器命令\n67| + 源代码文件编译\n68|   - `flang compile hello.f`: `or flang hello.f`编译单个文件\n69|     + 参数 -i -b -s -c 分别表示输出IR、二进制IR、汇编、目标文件。\n70|       可以组合，比如：`-ibc`\n71|   - `flang run hello.f`:编译单个文件并运行\n72|   - `flang prebuild hello.f`：预编译为二进制中间码\n73| + 源文件编辑辅助\n74|   - `flang fmt`: or `flang format`格式化源文件\n75|   - `flang doc`:生成文档\n76| + 源代码组织管理\n77|   - `flang init`:创建一个proj，proj中包含一个mod，mod中含有一个helloworld源代码。\n78|   - `flang new modname`:在当前proj中增加一个mod。\n79|       +`flang new --bin modname`:表示目标位二进制执行程序。\n80|       +`flang new --lib modname`:则表示库 。\n81|   - `flang dep`:依赖管理\n82|     + `falng dep where`: 显示依赖所在文件夹。\n83|     + `flang dep cache`: 下载依赖到本机。\n84|     + `flang dep config`: 依赖缓存位置设置。\n85|     + `flang dep update`: 更新依赖，(如果项目依赖设置中指定了最大版本，则最多更新到最大版本)。\n86|     + `flang dep build`: 编译依赖。\n87|     + `flang dep clean`: 清除依赖编译的文件。\n88|     + `flang dep list`: 显示依赖列表\n89|     + `flang dep graph`: 树状显示依赖列表\n90|     + `flang dep verify`: 检测依赖包自下载之后是否被改动过。\n91|     + `flang dep help`: 显示帮助\n92| + 工程模块编译运行\n93|   - `flang check`:语法检查\n94|   - `flang build`:编译当前模块mod或者项目proj。\n95|     + `flang build --release`: or `-r`编译发布版。默认为--debug\n96|     + `flang build --release --arch:i386 --os:win`交叉编译\n97|   - `flang run`:编译并运行当前模块或项目\n98|   - `flang prebuild`：预编译为二进制中间码\n99|   - `flang clean`:清除生成的目标文件\n100|   - `flang test`:编译运行当前模块或项目的测试代码\n101|   - `flang bench`:运行基准测试\n102| + 交互模式\n103|   - `flang play`:运行playground\n104|   - `flang shell`: or `flang repl`运行交互式解释器环境\n105| + llvm输出\n106|   - `flang llvm --ast hello.f`:  输出抽象语法树\n107|   - `flang llvm --ir hello.f`: or `-i` 输出ir代码\n108|   - `flang llvm --ir -O3 hello.f -o hello.ll`: 输出ir代码，3级优化\n109|   - `flang llvm --bc hello.f`: or `-b` 输出bitcode（二进制的ir代码）\n110|   - `flang llvm --asm hello.f`: or `-s` 输出汇编代码\n111| + 安装包辅助命令\n112|   - `flang pkg dirname -o instpkg`: 根据dirname文件夹内容创建instpkg安装包\n113| ## 后记\n114| 希望能够设计一个语法简洁，易学易用，性能也不错的新语言，即使最后没有实现也不要紧，欢迎各位大佬萌新一起出谋划策。", "fragment_lines": [8, 23, 51], "fragment_content": ["**目的是更好的服务于现代工业，契合科学研究和工业需求。未来的工业领域一定是与程序密不可分的，程序将不仅仅是程序员专有的，还将是各个领域的工具，必定是向matlab、labview那样对各领域人员友好的，并且是高效简洁的。在程序员都在需求易用性更高的语言和框架的今天，开发工业友好、高效的语言很有意义。", "2. **数据类型", "+ [语法设计(doc/specification/中文/目录.md)"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# flang\n\nflang的目标是设计一个兼具python的优点，但是又能够非常高效运行，工程友好的编程语言。\n\n> + **简洁**（像python一样，代码简洁）语法简洁，开发速度快，贯彻编程语言\n>   为人服务的目标\n> + **高效**（像C++一样零成本抽象）运行速度快，发布体积小\n> + **易用**（像rust、swift一样，拥有类型推导，异常处理，对象分配内存自动\n>   回收，异步并发等现代语言特性）且容易和利用其他语言模块成果\n\n**目的是更好的服务于现代工业，契合科学研究和工业需求。未来的工业领域一定是与程序密不可分的，程序将不仅仅是程序员专有的，还将是各个领域的工具，必定是向matlab、labview那样对各领域人员友好的，并且是高效简洁的。在程序员都在需求易用性更高的语言和框架的今天，开发工业友好、高效的语言很有意义。\n\nflang基本定位：\n\n+ 可以解释执行、AOT运行，也可以编译为机器码运行。可作为编译语言、可作为脚本。\n+ 提供二进制中间代码预编译格式。\n+ 无虚拟机、无GC，不支持指针，采用引用计数(ARC)等方法自动回收堆内存。\n+ 静态类型，支持类型推导和泛型。但是提供dynamic动态类型支持，用于特殊情况。\n+ 语法简洁。但是可以通过标记（类似C#的Attribute特性，rust的Attribute属性）指定内存及编译特点，进一步优化性能。\n+ 能够方面方便的调用C++等语言编制的模块。与C语言可以混合编译。\n\n## flang 语言主要特点\n\n1. 编译型语言(支持二进制编译、AOT，也可以解释运行)\n   + 编译型语言，可直接编译为二进制机器码。支持预编译为二进制字节码。\n   + 支持AOT和解释方式运行。\n     + repl解释器\\[独立安装组件\\]，可以供学习、研究用。\n     + AOT编译器，可内嵌到其他应用\\[独立安装组件\\]，作为内嵌脚本。在作为服务器端应用时，方便热更新代码。\n   + 无虚拟机、无运行时、核心语言小\n2. **数据类型\n   + 静态类型（提供dynamic类型支持，方便后期绑定等特殊应用）\n   + 类C的弱类型，数值计算可以自动转换类型。其他类型为强类型。\n   + 提供精确计算及无限制精度整数支持。\n   + 原生支持Unicode，默认使用UTF-8编码。\n   + 原生支持高级数据结构，如List, Dict等\n   + 支持泛型\n   + 支持类型推导\n3. 语法\n   + 尽可能简化语法的情况下，增强功能。贯彻编程语言为人服务的宗旨。\n   + 零成本抽象(静态分发、动态分发、虚表结合优化)\n     - 所有程序最终转换为“数据+算法+接口+消息”的组合，(兼顾面向对象、函数式、面向数据、并发编程等)\n     - 尽可能的由编译器实现静态分发，必要的情况下采用动态分发方式(也可以用标记自行指定)\n4. 内存管理\n   + 无GC、无指针、无运行时\n   + 安全的堆操作，数据对象自动释放堆内存（采用引用计数方法（ARC）回收堆内存）\n5. 原生的异常处理\n6. 原生异步、并发设计\n7. 语言互操作\n   + 支持内嵌llvm ir\n   + 支持与C语言直接交互,\n   + 考虑通过类似runtime的小型独立模块或引擎与其他语言混编（像lua一样小巧，\n     适当损失性能，保持语言自身的简洁与纯净）\n8. 跨平台\n   + 平台api包装成类似python的sys, os模块，简洁、通用、方便\n   + ui，图像等系统高耦合操作：dsl标准库(类似html+css的方式与flang交互)。\n\n> 一定程度的支持反射\n\n## 语言设计\n\n+ [语法设计(doc/specification/中文/目录.md)\n\nflang helloworld代码示例：\n\n```\n// helloworld.f\ndomain hello\nuse sys.*\n\npub func main(){\n  println(\"hello, world!\")\n}\n```\n\nflang源代码通常有以下四部分组成：\n\n+ 注释\n+ 域声明（可省略，默认和文件名相同）\n+ 外部域引用\n+ 函数、类型、类型别名或特性定义\n\n## flang编译器命令\n\n+ 源代码文件编译\n  - `flang compile hello.f`: `or flang hello.f`编译单个文件\n    + 参数 -i -b -s -c 分别表示输出IR、二进制IR、汇编、目标文件。\n      可以组合，比如：`-ibc`\n  - `flang run hello.f`:编译单个文件并运行\n  - `flang prebuild hello.f`：预编译为二进制中间码\n+ 源文件编辑辅助\n  - `flang fmt`: or `flang format`格式化源文件\n  - `flang doc`:生成文档\n+ 源代码组织管理\n  - `flang init`:创建一个proj，proj中包含一个mod，mod中含有一个helloworld源代码。\n  - `flang new modname`:在当前proj中增加一个mod。\n      +`flang new --bin modname`:表示目标位二进制执行程序。\n      +`flang new --lib modname`:则表示库 。\n  - `flang dep`:依赖管理\n    + `falng dep where`: 显示依赖所在文件夹。\n    + `flang dep cache`: 下载依赖到本机。\n    + `flang dep config`: 依赖缓存位置设置。\n    + `flang dep update`: 更新依赖，(如果项目依赖设置中指定了最大版本，则最多更新到最大版本)。\n    + `flang dep build`: 编译依赖。\n    + `flang dep clean`: 清除依赖编译的文件。\n    + `flang dep list`: 显示依赖列表\n    + `flang dep graph`: 树状显示依赖列表\n    + `flang dep verify`: 检测依赖包自下载之后是否被改动过。\n    + `flang dep help`: 显示帮助\n+ 工程模块编译运行\n  - `flang check`:语法检查\n  - `flang build`:编译当前模块mod或者项目proj。\n    + `flang build --release`: or `-r`编译发布版。默认为--debug\n    + `flang build --release --arch:i386 --os:win`交叉编译\n  - `flang run`:编译并运行当前模块或项目\n  - `flang prebuild`：预编译为二进制中间码\n  - `flang clean`:清除生成的目标文件\n  - `flang test`:编译运行当前模块或项目的测试代码\n  - `flang bench`:运行基准测试\n+ 交互模式\n  - `flang play`:运行playground\n  - `flang shell`: or `flang repl`运行交互式解释器环境\n+ llvm输出\n  - `flang llvm --ast hello.f`:  输出抽象语法树\n  - `flang llvm --ir hello.f`: or `-i` 输出ir代码\n  - `flang llvm --ir -O3 hello.f -o hello.ll`: 输出ir代码，3级优化\n  - `flang llvm --bc hello.f`: or `-b` 输出bitcode（二进制的ir代码）\n  - `flang llvm --asm hello.f`: or `-s` 输出汇编代码\n\n## 后记\n\n希望能够设计一个语法简洁，易学易用，性能也不错的新语言，即使最后没有实现也不要紧，欢迎各位大佬萌新一起出谋划策。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/12", "category": "Special", "subtype": "markdown_content_error", "level": "hard", "example": "", "docstring": "A brief overview of the Titan4 autonomous driving controller, highlighting its high computational power, sensor support, and integration with the ATHENA software system for advanced driving functionalities.", "canonical_solution": "## Titan4平台简介\n\n- TITAN 4自动驾驶控制器搭载2块Nvidia最新研发的Xavier芯片，总算力达60TOPS；有丰富的接口，多达16路摄像头，10路CAN总线，多路1000M车规级T1网络接口。\n- 同支持激光雷达、毫米波雷达、惯导等多种传感器的接入，支持USB、CAN、LIN、FlexRay、RS485/RS232、Ethernet、IO、AD/DA等多种硬件接口，支持NVMe硬盘存储，内置4G通信模块、高精度定位模块；支持搭载传感器同步模块，支持同步信号输入和输出。\n- TITAN4自动驾驶控制器具有计算能力强、可靠性高、集成度高、功耗低、易布署等特点。除了高性能计算单元外，TITAN4也搭载了ASIL-D级微控制器，整体设计符合功能安全。\n- TITAN 4自动驾驶控制器可搭载环宇智行研发的软件系统ATHENA（雅典娜软件系统），它可以支持高精地图，路径动态规划等功能，再配合相应的传感器，可以进行多传感器融合，实现车道线识别及车辆、行人识别和避障、一键招车、自主泊车、以及编队行驶等功能。\n\n| 项目  | 参数                        | 项目   | 参数               |\n| --- | ------------------------- | ---- | ---------------- |\n| 尺寸  | 285mm(W)*240mm(D)*60mm(H) | 工作温度 | -25℃~+80℃        |\n| 供电  | DC 9V~36V                 | 防护等级 | IP 62（Dustproof） |\n| 功耗  | 一般性使用<40W，满负载使用<120W      | 重量   | 2.8kg            |", "buggy_code": "\n## Titan4平台简介\n\n- TITAN 4自动驾驶控制器搭载2块Nvidia最新研发的Xavier芯片，总算力达60TOPS；有丰富的接口，多达16路摄像头，10路CAN总线，多路1000M车规级T1网络接口。\n- 同支持激光雷达、毫米波雷达、惯导等多种传感器的接入，支持USB、CAN、LIN、FlexRay、RS485/RS232、Ethernet、IO、AD/DA等多种硬件接口，支持NVMe硬盘存储，内置4G通信模块、高精度定位模块；支持搭载传感器同步模块，支持同步信号输入和输出。\n- TITAN4自动驾驶控制器具有计算能力强、可靠性高、集成度高、功耗低、易布署等特点。除了高性能计算单元外，TITAN4也搭载了ASIL-D级微控制器，整体设计符合功能安全。\n- TITAN 4自动驾驶控制器可搭载环宇智行研发的软件系统ATHENA（雅典娜软件系统），它可以支持高精地图，路径动态规划等功能，再配合相应的传感器，可以进行多传感器融合，实现车道线识别及车辆、行人识别和避障、一键招车、自主泊车、以及编队行驶等功能。\n\n| 项目  | 参数                        | 项目   | 参数               |\n| --- | ------------------------- | ---- | ---------------- |\n| 供电  | 285mm(W)*240mm(D)*60mm(H) | 工作温度 | -25℃~+80℃        |\n| 尺寸  | DC 9V~36V                 | 防护等级 | IP 62（Dustproof） |\n| 功耗  | 一般性使用<40W，满负载使用<120W      | 重量   | 2.8kg            |", "bug_with_line_numbers": "1| ## Titan4平台简介\n2| - TITAN 4自动驾驶控制器搭载2块Nvidia最新研发的Xavier芯片，总算力达60TOPS；有丰富的接口，多达16路摄像头，10路CAN总线，多路1000M车规级T1网络接口。\n3| - 同支持激光雷达、毫米波雷达、惯导等多种传感器的接入，支持USB、CAN、LIN、FlexRay、RS485/RS232、Ethernet、IO、AD/DA等多种硬件接口，支持NVMe硬盘存储，内置4G通信模块、高精度定位模块；支持搭载传感器同步模块，支持同步信号输入和输出。\n4| - TITAN4自动驾驶控制器具有计算能力强、可靠性高、集成度高、功耗低、易布署等特点。除了高性能计算单元外，TITAN4也搭载了ASIL-D级微控制器，整体设计符合功能安全。\n5| - TITAN 4自动驾驶控制器可搭载环宇智行研发的软件系统ATHENA（雅典娜软件系统），它可以支持高精地图，路径动态规划等功能，再配合相应的传感器，可以进行多传感器融合，实现车道线识别及车辆、行人识别和避障、一键招车、自主泊车、以及编队行驶等功能。\n6| | 项目  | 参数                        | 项目   | 参数               |\n7| | --- | ------------------------- | ---- | ---------------- |\n8| | 供电  | 285mm(W)*240mm(D)*60mm(H) | 工作温度 | -25℃~+80℃        |\n9| | 尺寸  | DC 9V~36V                 | 防护等级 | IP 62（Dustproof） |\n10| | 功耗  | 一般性使用<40W，满负载使用<120W      | 重量   | 2.8kg            |", "fragment_lines": [8, 9], "fragment_content": ["", ""], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n## Titan4平台简介\n\n- TITAN 4自动驾驶控制器搭载2块Nvidia最新研发的Xavier芯片，总算力达60TOPS；有丰富的接口，多达16路摄像头，10路CAN总线，多路1000M车规级T1网络接口。\n- 同支持激光雷达、毫米波雷达、惯导等多种传感器的接入，支持USB、CAN、LIN、FlexRay、RS485/RS232、Ethernet、IO、AD/DA等多种硬件接口，支持NVMe硬盘存储，内置4G通信模块、高精度定位模块；支持搭载传感器同步模块，支持同步信号输入和输出。\n- TITAN4自动驾驶控制器具有计算能力强、可靠性高、集成度高、功耗低、易布署等特点。除了高性能计算单元外，TITAN4也搭载了ASIL-D级微控制器，整体设计符合功能安全。\n- TITAN 4自动驾驶控制器可搭载环宇智行研发的软件系统ATHENA（雅典娜软件系统），它可以支持高精地图，路径动态规划等功能，再配合相应的传感器，可以进行多传感器融合，实现车道线识别及车辆、行人识别和避障、一键招车、自主泊车、以及编队行驶等功能。\n\n| 项目  | 参数                        | 项目   | 参数               |\n| --- | ------------------------- | ---- | ---------------- |\n| 供电  | 285mm(W)*240mm(D)*60mm(H) | 工作温度 | -25℃~+80℃        |\n| 尺寸  | DC 9V~36V                 | 防护等级 | IP 62（Dustproof） |\n| 功耗  | 一般性使用<40W，满负载使用<120W      | 重量   | 2.8kg            |\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/13", "category": "Special", "subtype": "markdown_content_error", "level": "hard", "example": "", "docstring": "A description of a student management system with functionalities such as entering, printing, saving, reading, and deleting student information, as well as a menu system for user interaction.", "canonical_solution": "# nfs\n\n## server\n\n+ /etc/exports\n  \n  ```\n  /media/nfs 192.168.1.169(rw,sync,all_squash,anonuid=1000,anongid=1000)\n  /media/nfs 192.168.1.240(rw,sync,all_squash,anonuid=1000,anongid=1000)\n  ```\n\n## client\n\n+ /etc/systemd/system/mnt-myshare.mount\n  \n  ```\n  [Unit]\n  Description=nfs mount\n  After=network.target\n  \n  [Mount]\n  What=192.168.1.153:/media/nfs\n  Where=/mnt/myshare\n  Type=nfs\n  Options=default\n  \n  [Install]\n  WantedBy=multi-user.target\n  ```\n\n+ /etc/systemd/system/mnt-myshare.automount\n  \n  ```\n  [Unit]\n  Description=Automount myshare\n  \n  [Automount]\n  Where=/mnt/myshare\n  \n  [Install]\n  WantedBy=multi-user.target\n  ```\n\n+ enable mnt-myshare.automount", "buggy_code": "\n\n\n\n\n\n\n# nfs\n\n## server\n\n+ /etc/exports\n  \n  ```\n  /media/nfs 192.168.1.169(rw,sync,all_squash,anonuid=1000,anongid=1000)\n  /media/nfs 192.168.1.240(rw,sync,all_squash,anonuid=1000,anongid=1000)\n  ```\n\n## client\n\n+ /etc/systemd/system/mnt-myshare.mount\n  \n  ```\n  [Unit]\n  Description=nfs mount\n  After=network.target\n  \n  [Mount]\n  What=192.168.1.153:/media/nfs\n  Where=/mnt/myshare\n  Type=nfs\n  Options=default\n  \n  [Install]\n  WantedBy=multi-user.target\n  [Automount]\n  Where!=/mnt/myshare\n  \n  [Install]\n  WantedBy=multi-user.target\n  ```\n\n+ /etc/systemd/system/mnt-myshare.automount\n  \n  ```\n  [Unit]\n  Description=Automount myshare\n  \n  [Automount]\n  Where=/mnt/myshare\n  \n  [Install]\n  WantedBy=multi-user.target\n  ```\n\n+ enable mnt-myshare.automount", "bug_with_line_numbers": "1| # nfs\n2| ## server\n3| + /etc/exports\n4|   \n5|   ```\n6|   /media/nfs 192.168.1.169(rw,sync,all_squash,anonuid=1000,anongid=1000)\n7|   /media/nfs 192.168.1.240(rw,sync,all_squash,anonuid=1000,anongid=1000)\n8|   ```\n9| ## client\n10| + /etc/systemd/system/mnt-myshare.mount\n11|   \n12|   ```\n13|   [Unit]\n14|   Description=nfs mount\n15|   After=network.target\n16|   \n17|   [Mount]\n18|   What=192.168.1.153:/media/nfs\n19|   Where=/mnt/myshare\n20|   Type=nfs\n21|   Options=default\n22|   \n23|   [Install]\n24|   WantedBy=multi-user.target\n25|   [Automount]\n26|   Where!=/mnt/myshare\n27|   \n28|   [Install]\n29|   WantedBy=multi-user.target\n30|   ```\n31| + /etc/systemd/system/mnt-myshare.automount\n32|   \n33|   ```\n34|   [Unit]\n35|   Description=Automount myshare\n36|   \n37|   [Automount]\n38|   Where=/mnt/myshare\n39|   \n40|   [Install]\n41|   WantedBy=multi-user.target\n42|   ```\n43| + enable mnt-myshare.automount", "fragment_lines": [25, 26, 27, 28, 29], "fragment_content": ["[Automount]", "Where!=/mnt/myshare", "", "[Install]", "WantedBy=multi-user.target"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# nfs\n\n## server\n\n+ /etc/exports\n  \n  ```\n  /media/nfs 192.168.1.169(rw,sync,all_squash,anonuid=1000,anongid=1000)\n  /media/nfs 192.168.1.240(rw,sync,all_squash,anonuid=1000,anongid=1000)\n  ```\n\n## client\n\n+ /etc/systemd/system/mnt-myshare.mount\n  \n  ```\n  [Unit]\n  Description=nfs mount\n  After=network.target\n  \n  [Mount]\n  What=192.168.1.153:/media/nfs\n  Where=/mnt/myshare\n  Type=nfs\n  Options=default\n  \n  [Install]\n  WantedBy=multi-user.target\n  [Automount]\n  Where!=/mnt/myshare\n  \n  [Install]\n  WantedBy=multi-user.target\n  ```\n\n+ /etc/systemd/system/mnt-myshare.automount\n  \n  ```\n  [Unit]\n  Description=Automount myshare\n  \n  [Automount]\n  Where=/mnt/myshare\n  \n  [Install]\n  WantedBy=multi-user.target\n  ```\n\n+ enable mnt-myshare.automount\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/14", "category": "Special", "subtype": "markdown_content_error", "level": "hard", "example": "", "docstring": "A description of a student management system with functionalities such as entering, printing, saving, reading, and deleting student information, as well as a menu system for user interaction.", "canonical_solution": "# 学生管理系统\n\n#### 介绍\n\n一、系统功能  \n\n系统功能介绍\n\n1.录入学生信息：用户可以自由输入学生信息到系统中。\n\n2.打印学生信息：格式化展示系统中的学生信息。\n\n3.保存学生信息：将系统中的学生信息保存到本地文档。\n\n4.读取学生信息：读取本地文档中的学生信息并显示。\n\n5.统计所有学生人数\n\n6.查找学生信息：根据用户给定的信息（学号）在系统中查找该学生的信息\n\n7.修改学生信息\n\n8.删除学生信息\n\n0.退出系统s)}\n二、菜单\n\n菜单显示\n\n打印菜单\n\n三、录入学生信息\n\n1.定义学生结构体、链表节点结构体\n2.利用学生结构体，以及链表操作输入学生信息\n\n四、打印学生信息\n\n五、保存学生信息\n\n利用文件对学生信息进行存储\n\n六、读取学生信息\n\n打开存储学生信息的文本，单个单词读取，判断非分隔符或者空时则赋值给链表中的节点，读取完毕后，直接调用PrintStudent（）函数进行打印结果。\n\n七、统计所有学生人数\n\n设置计数器，遍历链表\n\n八、查找学生信息\n\n本次查找以学号为示例，改用姓名等信息查询流程基本一致。\n\n遍历链表，如果有符合信息的学生则打印，反之则继续下一个节点，若系统中无该学生信息，给予用户无结果提示。\n\n九、修改学生信息\n\n可参考查找学生信息代码段，在查找后进行修改即可\n\n十、删除学生信息\n\n仍然以查找学生信息操作为基础，以学号为线索，查找到则进行删除，未查找到则进行错误提示，删除时需要区分当前节点是头结点、尾节点或者中间节点，不同节点操作不同，同时该删\n\n除仅作用于本次操作，需保存学生信息才能长久生效。\n\n十一、退出系统\n\n直接在选择0时，设置return即可。\n\n十二、出错\n\n用户输入有误时，进行提示信息输出即可。", "buggy_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 学生管理系统\n\n#### 介绍\n\n一、系统功能  \n\n系统功能介绍\n\n1.打印学生信息：用户可以自由输入学生信息到系统中。\n\n2.录入学生信息：格式化展示系统中的学生信息。\n\n3.保存学生信息：将系统中的学生信息保存到本地文档。\n\n4.读取学生信息：读取本地文档中的学生信息并显示。\n\n5.统计所有学生人数\n\n6.查找学生信息：根据用户给定的信息（学号）在系统中查找该学生的信息\n\n7.修改学生信息\n\n8.删除学生信息\n\n0.退出系统s)}\n二、菜单\n\n菜单显示\n\n打印菜单\n\n三、录入学生信息\n\n1.定义学生结构体、链表节点结构体\n2.利用学生结构体，以及链表操作输入学生信息\n\n四、打印学生信息\n\n五、保存学生信息\n\n利用文件对学生信息进行存储\n\n六、读取学生信息\n\n打开存储学生信息的文本，单个单词读取，判断非分隔符或者空时则赋值给链表中的节点，读取完毕后，直接调用PrintStudent（）函数进行打印结果。\n\n七、统计所有学生人数\n\n设置计数器，遍历链表\n\n八、查找学生信息\n\n本次查找以学号为示例，改用姓名等信息查询流程基本一致。\n\n遍历链表，如果有符合信息的学生则打印，反之则继续下一个节点，若系统中无该学生信息，给予用户无结果提示。\n\n九、修改学生信息\n\n可参考查找学生信息代码段，在查找后进行修改即可\n\n十、删除学生信息\n\n仍然以查找学生信息操作为基础，以学号为线索，查找到则进行删除，未查找到则进行错误提示，删除时需要区分当前节点是头结点、尾节点或者中间节点，不同节点操作不同，同时该删\n\n除仅作用于本次操作，需保存学生信息才能长久生效。\n\n十一、退出系统\n\n直接在选择0时，设置return即可。\n\n十二、出错\n\n用户输入有误时，进行提示信息输出即可。", "bug_with_line_numbers": "1| # 学生管理系统\n2| #### 介绍\n3| 一、系统功能  \n4| 系统功能介绍\n5| 1.打印学生信息：用户可以自由输入学生信息到系统中。\n6| 2.录入学生信息：格式化展示系统中的学生信息。\n7| 3.保存学生信息：将系统中的学生信息保存到本地文档。\n8| 4.读取学生信息：读取本地文档中的学生信息并显示。\n9| 5.统计所有学生人数\n10| 6.查找学生信息：根据用户给定的信息（学号）在系统中查找该学生的信息\n11| 7.修改学生信息\n12| 8.删除学生信息\n13| 0.退出系统s)}\n14| 二、菜单\n15| 菜单显示\n16| 打印菜单\n17| 三、录入学生信息\n18| 1.定义学生结构体、链表节点结构体\n19| 2.利用学生结构体，以及链表操作输入学生信息\n20| 四、打印学生信息\n21| 五、保存学生信息\n22| 利用文件对学生信息进行存储\n23| 六、读取学生信息\n24| 打开存储学生信息的文本，单个单词读取，判断非分隔符或者空时则赋值给链表中的节点，读取完毕后，直接调用PrintStudent（）函数进行打印结果。\n25| 七、统计所有学生人数\n26| 设置计数器，遍历链表\n27| 八、查找学生信息\n28| 本次查找以学号为示例，改用姓名等信息查询流程基本一致。\n29| 遍历链表，如果有符合信息的学生则打印，反之则继续下一个节点，若系统中无该学生信息，给予用户无结果提示。\n30| 九、修改学生信息\n31| 可参考查找学生信息代码段，在查找后进行修改即可\n32| 十、删除学生信息\n33| 仍然以查找学生信息操作为基础，以学号为线索，查找到则进行删除，未查找到则进行错误提示，删除时需要区分当前节点是头结点、尾节点或者中间节点，不同节点操作不同，同时该删\n34| 除仅作用于本次操作，需保存学生信息才能长久生效。\n35| 十一、退出系统\n36| 直接在选择0时，设置return即可。\n37| 十二、出错\n38| 用户输入有误时，进行提示信息输出即可。", "fragment_lines": [5, 6], "fragment_content": ["1.打印学生信息：用户可以自由输入学生信息到系统中。", "2.录入学生信息：格式化展示系统中的学生信息。"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 学生管理系统\n\n#### 介绍\n\n一、系统功能  \n\n系统功能介绍\n\n1.打印学生信息：用户可以自由输入学生信息到系统中。\n\n2.录入学生信息：格式化展示系统中的学生信息。\n\n3.保存学生信息：将系统中的学生信息保存到本地文档。\n\n4.读取学生信息：读取本地文档中的学生信息并显示。\n\n5.统计所有学生人数\n\n6.查找学生信息：根据用户给定的信息（学号）在系统中查找该学生的信息\n\n7.修改学生信息\n\n8.删除学生信息\n\n0.退出系统s)}\n二、菜单\n\n菜单显示\n\n打印菜单\n\n三、录入学生信息\n\n1.定义学生结构体、链表节点结构体\n2.利用学生结构体，以及链表操作输入学生信息\n\n四、打印学生信息\n\n五、保存学生信息\n\n利用文件对学生信息进行存储\n\n六、读取学生信息\n\n打开存储学生信息的文本，单个单词读取，判断非分隔符或者空时则赋值给链表中的节点，读取完毕后，直接调用PrintStudent（）函数进行打印结果。\n\n七、统计所有学生人数\n\n设置计数器，遍历链表\n\n八、查找学生信息\n\n本次查找以学号为示例，改用姓名等信息查询流程基本一致。\n\n遍历链表，如果有符合信息的学生则打印，反之则继续下一个节点，若系统中无该学生信息，给予用户无结果提示。\n\n九、修改学生信息\n\n可参考查找学生信息代码段，在查找后进行修改即可\n\n十、删除学生信息\n\n仍然以查找学生信息操作为基础，以学号为线索，查找到则进行删除，未查找到则进行错误提示，删除时需要区分当前节点是头结点、尾节点或者中间节点，不同节点操作不同，同时该删\n\n除仅作用于本次操作，需保存学生信息才能长久生效。\n\n十一、退出系统\n\n直接在选择0时，设置return即可。\n\n十二、出错\n\n用户输入有误时，进行提示信息输出即可。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/15", "category": "Special", "subtype": "markdown_title_error", "level": "medium", "example": "", "docstring": "A brief introduction to a database system designed for managing student dormitories, including instructions for contributing to the project.", "canonical_solution": "# 数据库\n\n#### 介绍\n\n学生宿舍管理系统\n\n#### 参与贡献\n\n1. Fork 本仓库\n2. 新建 Feat_xxx 分支\n3. 提交代码\n4. 新建 Pull Request", "buggy_code": "\n# 数据库\n\n####介绍\n\n学生宿舍管理系统\n\n#### 参与贡献\n\n1. Fork 本仓库\n2. 新建 Feat_xxx 分支\n3. 提交代码\n4. 新建 Pull Request", "bug_with_line_numbers": "1| # 数据库\n2| ####介绍\n3| 学生宿舍管理系统\n4| #### 参与贡献\n5| 1. Fork 本仓库\n6| 2. 新建 Feat_xxx 分支\n7| 3. 提交代码\n8| 4. 新建 Pull Request", "fragment_lines": [2], "fragment_content": ["####介绍"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 数据库\n\n####介绍\n\n学生宿舍管理系统\n\n#### 参与贡献\n\n1. Fork 本仓库\n2. 新建 Feat_xxx 分支\n3. 提交代码\n4. 新建 Pull Request\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/16", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "Documentation for FastAdmin, a rapid development framework for backend systems based on ThinkPHP and Bootstrap, featuring a permissions management system and various development tools.", "canonical_solution": "FastAdmin是一款基于ThinkPHP+Bootstrap的极速后台开发框架。\n\n主要特性\n\n- 基于`Auth`验证的权限管理系统\n  - 支持无限级父子级权限继承，父级的管理员可任意增删改子级管理员及权限设置\n  - 支持单管理员多角色\n  - 支持管理子级数据或个人数据\n- 强大的一键生成功能\n  - 一键生成CRUD,包括控制器、模型、视图、JS、语言包、菜单、回收站等\n  - 一键压缩打包JS和CSS文件，一键CDN静态资源部署\n  - 一键生成控制器菜单和规则\n  - 一键生成API接口文档\n- 完善的前端功能组件开发\n  - 基于`AdminLTE`二次开发\n  - 基于`Bootstrap`开发，自适应手机、平板、PC\n  - 基于`RequireJS`进行JS模块管理，按需加载\n  - 基于`Less`进行样式开发\n- 强大的插件扩展功能，在线安装卸载升级插件\n- 通用的会员模块和API模块\n- 共用同一账号体系的Web端会员中心权限验证和API接口会员权限验证\n- 二级域名部署支持，同时域名支持绑定到应用插件\n- 多语言支持，服务端及客户端支持\n- 支持大文件分片上传、剪切板粘贴上传、拖拽上传，进度条显示，图片上传前压缩\n- 支持表格固定列、固定表头、跨页选择、Excel导出、模板渲染等功能\n  \n  \n", "buggy_code": "\n\nFastAdmin是一款基于ThinkPHP+Bootstrap的极速后台开发框架。\n\n主要特性\n\n- 基于`Auth`验证的权限管理系统\n  \n  - 支持无限级父子级权限继承，父级的管理员可任意增删改子级管理员及权限设置\n  - 支持单管理员多角色\n  支持管理子级数据或个人数据\n\n- 强大的一键生成功能\n  \n  一键生成CRUD,包括控制器、模型、视图、JS、语言包、菜单、回收站等\n  - 一键压缩打包JS和CSS文件，一键CDN静态资源部署\n  - 一键生成控制器菜单和规则\n  - 一键生成API接口文档\n\n- 完善的前端功能组件开发\n  \n  - 基于`AdminLTE`二次开发\n  - 基于`Bootstrap`开发，自适应手机、平板、PC\n  - 基于`RequireJS`进行JS模块管理，按需加载\n  - 基于`Less`进行样式开发\n\n- 强大的插件扩展功能，在线安装卸载升级插件\n\n- 通用的会员模块和API模块\n\n- 共用同一账号体系的Web端会员中心权限验证和API接口会员权限验证\n\n- 二级域名部署支持，同时域名支持绑定到应用插件\n\n- 多语言支持，服务端及客户端支持\n\n- 支持大文件分片上传、剪切板粘贴上传、拖拽上传，进度条显示，图片上传前压缩\n\n- 支持表格固定列、固定表头、跨页选择、Excel导出、模板渲染等功能\n", "bug_with_line_numbers": "1| FastAdmin是一款基于ThinkPHP+Bootstrap的极速后台开发框架。\n2| 主要特性\n3| - 基于`Auth`验证的权限管理系统\n4|   \n5|   - 支持无限级父子级权限继承，父级的管理员可任意增删改子级管理员及权限设置\n6|   - 支持单管理员多角色\n7|   支持管理子级数据或个人数据\n8| - 强大的一键生成功能\n9|   \n10|   一键生成CRUD,包括控制器、模型、视图、JS、语言包、菜单、回收站等\n11|   - 一键压缩打包JS和CSS文件，一键CDN静态资源部署\n12|   - 一键生成控制器菜单和规则\n13|   - 一键生成API接口文档功能组件开发\n14| - 完善的前端功能组件开发\n15|   \n16|   - 基于`AdminLTE`二次开发\n17|   - 基于`Bootstrap`开发，自适应手机、平板、PC\n18|   - 基于`RequireJS`进行JS模块管理，按需加载\n19|   - 基于`Less`进行样式开发\n20| - 强大的插件扩展功能，在线安装卸载升级插件\n21| - 通用的会员模块和API模块\n22| - 共用同一账号体系的Web端会员中心权限验证和API接口会员权限验证\n23| - 二级域名部署支持，同时域名支持绑定到应用插件\n24| - 多语言支持，服务端及客户端支持\n25| - 支持大文件分片上传、剪切板粘贴上传、拖拽上传，进度条显示，图片上传前压缩\n26| - 支持表格固定列、固定表头、跨页选择、Excel导出、模板渲染等功能\n", "fragment_lines": [7, 10], "fragment_content": ["支持管理子级数据或个人数据", "一键生成CRUD,包括控制器、模型、视图、JS、语言包、菜单、回收站等"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\nFastAdmin是一款基于ThinkPHP+Bootstrap的极速后台开发框架。\n\n主要特性\n\n- 基于`Auth`验证的权限管理系统\n  \n  - 支持无限级父子级权限继承，父级的管理员可任意增删改子级管理员及权限设置\n  - 支持单管理员多角色\n  支持管理子级数据或个人数据\n\n- 强大的一键生成功能\n  \n  一键生成CRUD,包括控制器、模型、视图、JS、语言包、菜单、回收站等\n  - 一键压缩打包JS和CSS文件，一键CDN静态资源部署\n  - 一键生成控制器菜单和规则\n  - 一键生成API接口文档\n\n- 完善的前端功能组件开发\n  \n  - 基于`AdminLTE`二次开发\n  - 基于`Bootstrap`开发，自适应手机、平板、PC\n  - 基于`RequireJS`进行JS模块管理，按需加载\n  - 基于`Less`进行样式开发\n\n- 强大的插件扩展功能，在线安装卸载升级插件\n\n- 通用的会员模块和API模块\n\n- 共用同一账号体系的Web端会员中心权限验证和API接口会员权限验证\n\n- 二级域名部署支持，同时域名支持绑定到应用插件\n\n- 多语言支持，服务端及客户端支持\n\n- 支持大文件分片上传、剪切板粘贴上传、拖拽上传，进度条显示，图片上传前压缩\n\n- 支持表格固定列、固定表头、跨页选择、Excel导出、模板渲染等功能\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/17", "category": "Special", "subtype": "markdown_title_error", "level": "medium", "example": "", "docstring": "A warehouse management system developed on Microsoft's .NET 6.0 platform, with functionalities covering user management, inventory management, and more, using a variety of front-end and back-end technologies.", "canonical_solution": "## kopSoftWMS功能模块：\n\n* 用户管理，部门管理，角色管理，物料管理，供应商管理，\n* 入库管理（采购入库、生产入库、销售退货、拆包装入库），\n* 出库管理（生产领料、采购退货、销售发货、拆包装出库、报废出库），\n* 盘点管理等，\n\n## 技术栈：\n\n* 基于微软.NET 6.0开发，支持 sqlserver、mysql  等主流数据库，ORM  采用国内开源 ORM  框架 SqlSugar ；\n* 前端采用 bootstrap、adminlte、layer、bootstrap-datetimepicker、bootstrap-table、bootstrap-select等；\n* 后端采用 asp.net mvc core、fluentValidation、nlog、Jil、DI、Ganss 、雪花算法、Xunit、npoi等；\n\n| 版本         | 分支     |\n| ---------- | ------ |\n| netcore6.0 | master |\n\n## 申明\n\n* 本项目仅供个人学习使用，商业授权请联系kopSoft原作者。", "buggy_code": "\n\n\n\n\n\n## kopSoftWMS功能模块：\n\n* 用户管理，部门管理，角色管理，物料管理，供应商管理，\n* 入库管理（采购入库、生产入库、销售退货、拆包装入库），\n* 出库管理（生产领料、采购退货、销售发货、拆包装出库、报废出库），\n* 盘点管理等，\n\n##技术栈：\n\n* 基于微软.NET 6.0开发，支持 sqlserver、mysql  等主流数据库，ORM  采用国内开源 ORM  框架 SqlSugar ；\n* 前端采用 bootstrap、adminlte、layer、bootstrap-datetimepicker、bootstrap-table、bootstrap-select等；\n* 后端采用 asp.net mvc core、fluentValidation、nlog、Jil、DI、Ganss 、雪花算法、Xunit、npoi等；\n\n| 版本         | 分支     |\n| ---------- | ------ |\n| netcore6.0 | master |\n\n## 申明\n\n* 本项目仅供个人学习使用，商业授权请联系kopSoft原作者。", "bug_with_line_numbers": "1| ## kopSoftWMS功能模块：\n2| * 用户管理，部门管理，角色管理，物料管理，供应商管理，\n3| * 入库管理（采购入库、生产入库、销售退货、拆包装入库），\n4| * 出库管理（生产领料、采购退货、销售发货、拆包装出库、报废出库），\n5| * 盘点管理等，\n6| ##技术栈：\n7| * 基于微软.NET 6.0开发，支持 sqlserver、mysql  等主流数据库，ORM  采用国内开源 ORM  框架 SqlSugar ；\n8| * 前端采用 bootstrap、adminlte、layer、bootstrap-datetimepicker、bootstrap-table、bootstrap-select等；\n9| * 后端采用 asp.net mvc core、fluentValidation、nlog、Jil、DI、Ganss 、雪花算法、Xunit、npoi等；\n10| | 版本         | 分支     |\n11| | ---------- | ------ |\n12| | netcore6.0 | master |\n13| ## 申明\n14| * 本项目仅供个人学习使用，商业授权请联系kopSoft原作者。", "fragment_lines": [6], "fragment_content": ["##技术栈："], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n## kopSoftWMS功能模块：\n\n* 用户管理，部门管理，角色管理，物料管理，供应商管理，\n* 入库管理（采购入库、生产入库、销售退货、拆包装入库），\n* 出库管理（生产领料、采购退货、销售发货、拆包装出库、报废出库），\n* 盘点管理等，\n\n##技术栈：\n\n* 基于微软.NET 6.0开发，支持 sqlserver、mysql  等主流数据库，ORM  采用国内开源 ORM  框架 SqlSugar ；\n* 前端采用 bootstrap、adminlte、layer、bootstrap-datetimepicker、bootstrap-table、bootstrap-select等；\n* 后端采用 asp.net mvc core、fluentValidation、nlog、Jil、DI、Ganss 、雪花算法、Xunit、npoi等；\n\n| 版本         | 分支     |\n| ---------- | ------ |\n| netcore6.0 | master |\n\n## 申明\n\n* 本项目仅供个人学习使用，商业授权请联系kopSoft原作者。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/18", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "An explanation of CYAdmin, a general backend management system based on ThinkPHP6 and aceadmin, detailing the environment requirements, installation instructions, and login credentials.", "canonical_solution": "# CYAdmin说明\n\nCYAdmin，基于ThinkPHP6+aceadmin的通用后台管理系统。\n\n## 环境需求：\n\nPHP 7.1.0+，PDO扩展，MySQL5.0+\n\n## 安装说明：\n\n1、下载本源码至服务器。\n\n2、将.bak.env重命名为.env，并打开此文件修改数据库配置，主要有服务器地址、数据库名、数据库用户名、数据库密码、数据库连接端口、数据表前辍等配置。\n\n3、使用数据迁移命令将数据导入数据库，命令如下：\n\n```\nphp think migrate:run\n```\n\n注：虚拟机可以手动导入“database/database.sql”到数据库进行安装。\n\n4、完成安装，打开网站URL查看效果。\n\n## 后台地址：\n\nhttp://url/admin/\n若安装后打不开，请注意ThinkPHP的Rewrite规则在当前服务器是否适用。\n\n## 管理员用户及密码：\n\nadmin admin\n\n## 其它\n\n为什么要做这个？这个项目其实是从ThinkPHP5内测版就开始在弄了，主要是学习ThinkPHP，之前有个基于3.2.x版的，但没开源出来。\n\n# \n\n本系统（CYAdmin）是基于ThinkPHP6+aceadmin的通用后台管理系统，任何基于本系统二次开发所得的系统与本系统无关，本系统开发者也不承担相应法律责任，特此申明。", "buggy_code": "# CYAdmin说明\n\nCYAdmin，基于ThinkPHP6+aceadmin的通用后台管理系统。\n\n## 环境需求：\n\nPHP 7.1.0+，PDO扩展，MySQL5.0+\n\n##安装说明：\n\n1、下载本源码至服务器。\n\n2、将.bak.env重命名为.env，并打开此文件修改数据库配置，主要有服务器地址、数据库名、数据库用户名、数据库密码、数据库连接端口、数据表前辍等配置。\n\n3、使用数据迁移命令将数据导入数据库，命令如下：\n\n```\nphp think migrate:run\n\n注：虚拟机可以手动导入“database/database.sql”到数据库进行安装。\n\n4、完成安装，打开网站URL查看效果。\n\n## 后台地址：\n\nhttp://url/admin/\n若安装后打不开，请注意ThinkPHP的Rewrite规则在当前服务器是否适用。\n\n## 管理员用户及密码：\n\nadmin admin\n\n## 其它\n\n为什么要做这个？这个项目其实是从ThinkPHP5内测版就开始在弄了，主要是学习ThinkPHP，之前有个基于3.2.x版的，但没开源出来。\n\n# \n\n本系统（CYAdmin）是基于ThinkPHP6+aceadmin的通用后台管理系统，任何基于本系统二次开发所得的系统与本系统无关，本系统开发者也不承担相应法律责任，特此申明。", "bug_with_line_numbers": "   1 | # CYAdmin说明\n   2 | CYAdmin，基于ThinkPHP6+aceadmin的通用后台管理系统。\n   3 | ## 环境需求：\n   4 | PHP 7.1.0+，PDO扩展，MySQL5.0+\n   5 | ##安装说明：\n   6 | 1、下载本源码至服务器。\n   7 | 2、将.bak.env重命名为.env，并打开此文件修改数据库配置，主要有服务器地址、数据库名、数据库用户名、数据库密码、数据库连接端口、数据表前辍等配置。\n   8 | 3、使用数据迁移命令将数据导入数据库，命令如下：\n   9 | ```\n  10 | php think migrate:run\n  11 | 注：虚拟机可以手动导入“database/database.sql”到数据库进行安装。\n  12 | 4、完成安装，打开网站URL查看效果。\n  13 | ## 后台地址：\n  14 | http://url/admin/\n  15 | 若安装后打不开，请注意ThinkPHP的Rewrite规则在当前服务器是否适用。\n  16 | ## 管理员用户及密码：\n  17 | admin admin\n  18 | ## 其它\n  19 | 为什么要做这个？这个项目其实是从ThinkPHP5内测版就开始在弄了，主要是学习ThinkPHP，之前有个基于3.2.x版的，但没开源出来。\n  20 | #\n  21 | 本系统（CYAdmin）是基于ThinkPHP6+aceadmin的通用后台管理系统，任何基于本系统二次开发所得的系统与本系统无关，本系统开发者也不承担相应法律责任，特此申明。", "fragment_lines": [5, -1], "fragment_content": ["##安装说明：", "missing critical code snippet"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# CYAdmin说明\n\nCYAdmin，基于ThinkPHP6+aceadmin的通用后台管理系统。\n\n## 环境需求：\n\nPHP 7.1.0+，PDO扩展，MySQL5.0+\n\n##安装说明：\n\n1、下载本源码至服务器。\n\n2、将.bak.env重命名为.env，并打开此文件修改数据库配置，主要有服务器地址、数据库名、数据库用户名、数据库密码、数据库连接端口、数据表前辍等配置。\n\n3、使用数据迁移命令将数据导入数据库，命令如下：\n\n```\nphp think migrate:run\n\n注：虚拟机可以手动导入“database/database.sql”到数据库进行安装。\n\n4、完成安装，打开网站URL查看效果。\n\n## 后台地址：\n\nhttp://url/admin/\n若安装后打不开，请注意ThinkPHP的Rewrite规则在当前服务器是否适用。\n\n## 管理员用户及密码：\n\nadmin admin\n\n## 其它\n\n为什么要做这个？这个项目其实是从ThinkPHP5内测版就开始在弄了，主要是学习ThinkPHP，之前有个基于3.2.x版的，但没开源出来。\n\n# \n\n本系统（CYAdmin）是基于ThinkPHP6+aceadmin的通用后台管理系统，任何基于本系统二次开发所得的系统与本系统无关，本系统开发者也不承担相应法律责任，特此申明。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/19", "category": "Multiple", "subtype": "double_bug", "level": "medium", "example": "", "docstring": "A security policy document providing instructions on how to report vulnerabilities to a specified email address.", "canonical_solution": "# Security Policy\n\n## Reporting a Vulnerability\n\nPlease report security issues to `yupoxiong [at] gmail.com`.", "buggy_code": "#Security Policy\n\n##Reporting a Vulnerability\n\nPlease report security issues to `yupoxiong [at] gmail.com`.", "bug_with_line_numbers": "   1 | #Security Policy\n   2 | ##Reporting a Vulnerability\n   3 | Please report security issues to `yupoxiong [at] gmail.com`.", "fragment_lines": [1, 2], "fragment_content": ["#Security Policy", "##Reporting a Vulnerability"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n#Security Policy\n\n##Reporting a Vulnerability\n\nPlease report security issues to `yupoxiong [at] gmail.com`.\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/20", "category": "Multiple", "subtype": "double_bug", "level": "medium", "example": "", "docstring": "Information about Editor.md for Java, a free, open-source Markdown editor based on JAVA, featuring Markdown conversion and export capabilities to HTML.", "canonical_solution": "\n\n当前版本：1.0.1\n\nI Teach You,我教你！官网：http://www.iteachyou.cc\n\nEditor.md for Java 官网：http://editor.iteachyou.cc (正在建设中)\n\n\n\nEditor.md For JAVA是“I Teach You,我教你！”推出的一款免费的、开源的、基于JAVA的Markdown编辑器！编辑器实现了Markdown转换，让Markdown内容，不需作任何调整就能同时在微信公众号、博客园、csdn等平台正确显示当前预览的效果；并能一键导出HTML文件，方便移植。\n\n# 特点\n\n* 免费完整开源：基于APACHE 2.0开源协议，源代码完全开源；\n* 桌面CS架构：使用方便，安装即可使用；\n* 每月更新：每月进行系统升级，分享更多好用的模版与插件；\n\n# 技术架构\n\n- 核心框架：Java Swing\n- Swing美化框架：beautyeye\n- 代码高亮插件：highlight\n- 浏览器控件：jxbrowser-6.21（正在找其它替代方案，目前该组件为破解后的，仅供个人学习）\n- 工具包：hutool\n- Markdown解析器：commonmark 0.15.1\n\n# 开发环境\n\n建议开发者使用以下环境，这样避免版本带来的问题\n\n* IDE：Spring Tool Suite 4（STS）\n* JDK：jdk8\n\n# 快速入门\n\n项目启动类：cc.iteachyou.editor.md.Application，构建好项目直接运行该类即可。", "buggy_code": "\n\n当前版本：1.0.1\n\nI Teach You,我教你！官网：http://www.iteachyou.cc\n\nEditor.md for Java 官网：http://editor.iteachyou.cc (正在建设中)\n\n\n\nEditor.md For JAVA是“I Teach You,我教你！”推出的一款免费的、开源的、基于JAVA的Markdown编辑器！编辑器实现了Markdown转换，让Markdown内容，不需作任何调整就能同时在微信公众号、博客园、csdn等平台正确显示当前预览的效果；并能一键导出HTML文件，方便移植。\n\n# 特点\n\n* 免费完整开源：基于APACHE 2.0开源协议，源代码完全开源；\n桌面CS架构：使用方便，安装即可使用；\n* 每月更新：每月进行系统升级，分享更多好用的模版与插件；\n\n# 技术架构\n\n- 核心框架：Java Swing\n- Swing美化框架：beautyeye\n- 代码高亮插件：highlight\n浏览器控件：jxbrowser-6.21（正在找其它替代方案，目前该组件为破解后的，仅供个人学习）\n- 工具包：hutool\n- Markdown解析器：commonmark 0.15.1\n\n# 开发环境\n\n建议开发者使用以下环境，这样避免版本带来的问题\n\n* IDE：Spring Tool Suite 4（STS）\n* JDK：jdk8\n\n# 快速入门\n\n项目启动类：cc.iteachyou.editor.md.Application，构建好项目直接运行该类即可。", "bug_with_line_numbers": "   1 | 当前版本：1.0.1\n   2 | I Teach You,我教你！官网：http://www.iteachyou.cc\n   3 | Editor.md for Java 官网：http://editor.iteachyou.cc (正在建设中)\n   4 | Editor.md For JAVA是“I Teach You,我教你！”推出的一款免费的、开源的、基于JAVA的Markdown编辑器！编辑器实现了Markdown转换，让Markdown内容，不需作任何调整就能同时在微信公众号、博客园、csdn等平台正确显示当前预览的效果；并能一键导出HTML文件，方便移植。\n   5 | # 特点\n   6 | * 免费完整开源：基于APACHE 2.0开源协议，源代码完全开源；\n   7 | 桌面CS架构：使用方便，安装即可使用；\n   8 | * 每月更新：每月进行系统升级，分享更多好用的模版与插件；\n   9 | # 技术架构\n  10 | - 核心框架：Java Swing\n  11 | - Swing美化框架：beautyeye\n  12 | - 代码高亮插件：highlight\n  13 | 浏览器控件：jxbrowser-6.21（正在找其它替代方案，目前该组件为破解后的，仅供个人学习）\n  14 | - 工具包：hutool\n  15 | - Markdown解析器：commonmark 0.15.1\n  16 | # 开发环境\n  17 | 建议开发者使用以下环境，这样避免版本带来的问题\n  18 | * IDE：Spring Tool Suite 4（STS）\n  19 | * JDK：jdk8\n  20 | # 快速入门\n  21 | 项目启动类：cc.iteachyou.editor.md.Application，构建好项目直接运行该类即可。", "fragment_lines": [7, 13], "fragment_content": ["桌面CS架构：使用方便，安装即可使用；", "浏览器控件：jxbrowser-6.21（正在找其它替代方案，目前该组件为破解后的，仅供个人学习）"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n当前版本：1.0.1\n\nI Teach You,我教你！官网：http://www.iteachyou.cc\n\nEditor.md for Java 官网：http://editor.iteachyou.cc (正在建设中)\n\n\n\nEditor.md For JAVA是“I Teach You,我教你！”推出的一款免费的、开源的、基于JAVA的Markdown编辑器！编辑器实现了Markdown转换，让Markdown内容，不需作任何调整就能同时在微信公众号、博客园、csdn等平台正确显示当前预览的效果；并能一键导出HTML文件，方便移植。\n\n# 特点\n\n* 免费完整开源：基于APACHE 2.0开源协议，源代码完全开源；\n桌面CS架构：使用方便，安装即可使用；\n* 每月更新：每月进行系统升级，分享更多好用的模版与插件；\n\n# 技术架构\n\n- 核心框架：Java Swing\n- Swing美化框架：beautyeye\n- 代码高亮插件：highlight\n浏览器控件：jxbrowser-6.21（正在找其它替代方案，目前该组件为破解后的，仅供个人学习）\n- 工具包：hutool\n- Markdown解析器：commonmark 0.15.1\n\n# 开发环境\n\n建议开发者使用以下环境，这样避免版本带来的问题\n\n* IDE：Spring Tool Suite 4（STS）\n* JDK：jdk8\n\n# 快速入门\n\n项目启动类：cc.iteachyou.editor.md.Application，构建好项目直接运行该类即可。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/21", "category": "Special", "subtype": "markdown_title_error", "level": "medium", "example": "", "docstring": "A simple visual MD5 viewer written in Python, with instructions for installing dependencies and running the application.", "canonical_solution": "# MD5View\n\n#### 介绍\n\n一个用python写的简易版可视化MD5查看器器\n\n#### 软件架构\n\n软件架构说明\n\n#### 安装教程\n\n0. 下载第三方库，我的python版本为3.11.4\n1. pip install tk\n2. pip install tkinterdnd2\n\n#### 使用说明\n\n1. 在MD5View.py文件目录下运行python MD5View.py命令来运行此脚本\n2. 或者可以直接下载成品exe文件运行，不要求环境。\n\n#### 相关信息\n\n欢迎关注我的个人微信公众号“听说爱情很美”\n\n觉得有用的，劳烦点个star，万分感谢", "buggy_code": "\n\n\n\n\n# MD5View\n\n#### 介绍\n\n一个用python写的简易版可视化MD5查看器器\n\n#### 软件架构\n\n软件架构说明\n\n####安装教程\n\n0. 下载第三方库，我的python版本为3.11.4\n1. pip install tk\n2. pip install tkinterdnd2\n\n#### 使用说明\n\n1. 在MD5View.py文件目录下运行python MD5View.py命令来运行此脚本\n2. 或者可以直接下载成品exe文件运行，不要求环境。\n\n#### 相关信息\n\n欢迎关注我的个人微信公众号“听说爱情很美”\n\n觉得有用的，劳烦点个star，万分感谢", "bug_with_line_numbers": "1| # MD5View\n2| #### 介绍\n3| 一个用python写的简易版可视化MD5查看器器\n4| #### 软件架构\n5| 软件架构说明\n6| ####安装教程\n7| 0. 下载第三方库，我的python版本为3.11.4\n8| 1. pip install tk\n9| 2. pip install tkinterdnd2\n10| #### 使用说明\n11| 1. 在MD5View.py文件目录下运行python MD5View.py命令来运行此脚本\n12| 2. 或者可以直接下载成品exe文件运行，不要求环境。\n13| #### 相关信息\n14| 欢迎关注我的个人微信公众号“听说爱情很美”\n15| 觉得有用的，劳烦点个star，万分感谢", "fragment_lines": [6], "fragment_content": ["####安装教程"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# MD5View\n\n#### 介绍\n\n一个用python写的简易版可视化MD5查看器器\n\n#### 软件架构\n\n软件架构说明\n\n####安装教程\n\n0. 下载第三方库，我的python版本为3.11.4\n1. pip install tk\n2. pip install tkinterdnd2\n\n#### 使用说明\n\n1. 在MD5View.py文件目录下运行python MD5View.py命令来运行此脚本\n2. 或者可以直接下载成品exe文件运行，不要求环境。\n\n#### 相关信息\n\n欢迎关注我的个人微信公众号“听说爱情很美”\n\n觉得有用的，劳烦点个star，万分感谢\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/22", "category": "Multiple", "subtype": "triple_bug", "level": "hard", "example": "", "docstring": "An overview of a web-based e-commerce management system developed as a Java group project, including system goals, module design, and future outlook.", "canonical_solution": "# 电商管理系统\n\n#### 介绍\n\nJava小组作业：电商管理系统\n\n## 项目概述\n\n该系统是一个基于 Web 的电子商城系统，旨在实现在线购物、订单管理、用户管理等功能。用户可以在平台上浏览商品、选择规格、加入购物车，然后通过结账付款生成订单，并在个人中心查看订单状态。管理员可以对商品分类、商品信息、订单信息进行管理和维护。系统目标是建立一个快速、方便的在线购物平台，提供个性化、智能化、安全可靠的服务体验，为消费者提供丰富的商品选择，以及一个公平、透明和可靠的交易环境。\n\n## 系统目标\n\n本系统的设计目标是提供一个完整的购物体验，包括商品浏览、下单、付款、发货等流程。系统的前端使用 Vue 框架实现，后端使用 Spring Boot 框架实现。主要功能包括商品管理、商品分类、订单管理、用户管理（分管理员和普通用户）、购物车管理等。\n\n## 模块设计\n\n### 模块基本信息\n\n#### 商品管理模块\n\n- **模块描述**：负责对商品进行增删改查等基本操作，包括商品信息的录入、维护和展示，商品图片的上传、展示和删除，商品状态的管理等功能。\n\n#### 商品分类模块\n\n- **模块描述**：负责商品分类的管理，包括商品分类的层级关系维护、新增、修改、删除等基本操作。\n\n#### 订单管理模块\n\n- **模块描述**：负责订单相关的基础操作，包括订单的查询、创建、删除等功能。\n\n#### 用户管理模块\n\n- **模块描述**：负责用户信息相关功能，包括用户注册、登录、个人信息维护等操作。\n\n#### 购物车管理模块\n\n- **模块描述**：负责购物车的管理，包括加入购物车、调整商品数量、删除商品、结算等基本操作。\n\n## 项目背景\n\n随着互联网技术的发展和普及，电子商务在全球范围内迅猛发展，成为一种重要的商业模式和生活方式。电子商城作为电子商务的重要组成部分，通过网络进行产品和服务的销售，已经成为了线上交易和消费的主要方式。人们可以方便快捷地购买所需商品和服务，并享受线上购物的便利性和舒适性。\n\n基于这一背景，我们决定开发一个功能强大、易于使用、可靠性高的商城系统，以满足用户在线购物的需求。该系统支持多种商品和服务的销售、多种支付方式和物流配送方式，提供优惠券和积分等扩展功能，为用户提供舒适的购物体验和服务。同时，我们采用最新的技术和开发模式，在保证系统稳定运行的同时，不断推出新功能和特性，以满足用户不断增长的需求和期望。\n\n## 系统功能\n\n- **商品浏览**：用户可以浏览不同分类的商品，查看商品详情和规格。\n- **购物车管理**：用户可以将商品加入购物车，调整商品数量或删除商品，并进行结算操作。\n- **订单管理**：用户可以创建订单、查看订单状态，并进行订单的管理操作。\n- **用户管理**：用户可以注册、登录，并维护个人信息。管理员可以管理用户权限。\n- **商品管理**：管理员可以对商品进行增删改查，包括商品信息的录入、维护和展示。\n- **商品分类管理**：管理员可以维护商品分类的层级关系，进行新增、修改、删除操作。\n\n## 技术栈\n\n- **前端**：Vue.js\n- **后端**：Spring Boot\n- **数据库**：根据实际需求选择合适的数据库（如 MySQL）\n\n## 展望未来\n\n我们将继续优化系统性能，提高用户体验，并不断增加新功能，如社交分享、智能推荐等，以满足用户和商家的更多需求。此外，我们还将积极探索更多创新的技术和模式，如人工智能、区块链等，以进一步提升商城系统的竞争力。\n\n---\n\n以上内容全面介绍了该电子商城系统的设计目标、模块设计和项目背景，系统致力于提供一个简单易用、高效实用的电子商城平台，帮助商家更好地提供商品服务，圆满完成交易。\n\n# ", "buggy_code": "\n\n# 电商管理系统\n\n#### 介绍\n\nJava小组作业：电商管理系统\n\n##项目概述\n\n该系统是一个基于 Web 的电子商城系统，旨在实现在线购物、订单管理、用户管理等功能。用户可以在平台上浏览商品、选择规格、加入购物车，然后通过结账付款生成订单，并在个人中心查看订单状态。管理员可以对商品分类、商品信息、订单信息进行管理和维护。系统目标是建立一个快速、方便的在线购物平台，提供个性化、智能化、安全可靠的服务体验，为消费者提供丰富的商品选择，以及一个公平、透明和可靠的交易环境。\n\n## 系统目标\n\n本系统的设计目标是提供一个完整的购物体验，包括商品浏览、下单、付款、发货等流程。系统的前端使用 Vue 框架实现，后端使用 Spring Boot 框架实现。主要功能包括商品管理、商品分类、订单管理、用户管理（分管理员和普通用户）、购物车管理等。\n\n## 模块设计\n\n### 模块基本信息\n\n#### 商品管理模块\n\n- **模块描述**：负责对商品进行增删改查等基本操作，包括商品信息的录入、维护和展示，商品图片的上传、展示和删除，商品状态的管理等功能。\n\n#### 商品分类模块\n\n- **模块描述**：负责商品分类的管理，包括商品分类的层级关系维护、新增、修改、删除等基本操作。\n\n#### 用户管理模块\n\n- **模块描述**：负责订单相关的基础操作，包括订单的查询、创建、删除等功能。\n\n#### 订单管理模块\n\n- **模块描述**：负责用户信息相关功能，包括用户注册、登录、个人信息维护等操作。\n\n#### 购物车管理模块\n\n- **模块描述**：负责购物车的管理，包括加入购物车、调整商品数量、删除商品、结算等基本操作。\n\n## 项目背景\n\n随着互联网技术的发展和普及，电子商务在全球范围内迅猛发展，成为一种重要的商业模式和生活方式。电子商城作为电子商务的重要组成部分，通过网络进行产品和服务的销售，已经成为了线上交易和消费的主要方式。人们可以方便快捷地购买所需商品和服务，并享受线上购物的便利性和舒适性。\n\n基于这一背景，我们决定开发一个功能强大、易于使用、可靠性高的商城系统，以满足用户在线购物的需求。该系统支持多种商品和服务的销售、多种支付方式和物流配送方式，提供优惠券和积分等扩展功能，为用户提供舒适的购物体验和服务。同时，我们采用最新的技术和开发模式，在保证系统稳定运行的同时，不断推出新功能和特性，以满足用户不断增长的需求和期望。\n\n## 系统功能\n\n- **商品浏览**：用户可以浏览不同分类的商品，查看商品详情和规格。\n- **购物车管理**：用户可以将商品加入购物车，调整商品数量或删除商品，并进行结算操作。\n- **订单管理**：用户可以创建订单、查看订单状态，并进行订单的管理操作。\n- **用户管理**：用户可以注册、登录，并维护个人信息。管理员可以管理用户权限。\n- **商品管理**：管理员可以对商品进行增删改查，包括商品信息的录入、维护和展示。\n- **商品分类管理**：管理员可以维护商品分类的层级关系，进行新增、修改、删除操作。\n\n## 技术栈\n\n- **前端**：Vue.js\n- **后端**：Spring Boot\n- **数据库**：根据实际需求选择合适的数据库（如 MySQL）\n\n## 展望未来\n\n我们将继续优化系统性能，提高用户体验，并不断增加新功能，如社交分享、智能推荐等，以满足用户和商家的更多需求。此外，我们还将积极探索更多创新的技术和模式，如人工智能、区块链等，以进一步提升商城系统的竞争力。\n\n---\n\n以上内容全面介绍了该电子商城系统的设计目标、模块设计和项目背景，系统致力于提供一个简单易用、高效实用的电子商城平台，帮助商家更好地提供商品服务，圆满完成交易。\n\n# ", "bug_with_line_numbers": "1| # 电商管理系统\n2| #### 介绍\n3| Java小组作业：电商管理系统\n4| ##项目概述\n5| 该系统是一个基于 Web 的电子商城系统，旨在实现在线购物、订单管理、用户管理等功能。用户可以在平台上浏览商品、选择规格、加入购物车，然后通过结账付款生成订单，并在个人中心查看订单状态。管理员可以对商品分类、商品信息、订单信息进行管理和维护。系统目标是建立一个快速、方便的在线购物平台，提供个性化、智能化、安全可靠的服务体验，为消费者提供丰富的商品选择，以及一个公平、透明和可靠的交易环境。\n6| ## 系统目标\n7| 本系统的设计目标是提供一个完整的购物体验，包括商品浏览、下单、付款、发货等流程。系统的前端使用 Vue 框架实现，后端使用 Spring Boot 框架实现。主要功能包括商品管理、商品分类、订单管理、用户管理（分管理员和普通用户）、购物车管理等。\n8| ## 模块设计\n9| ### 模块基本信息\n10| #### 商品管理模块\n11| - **模块描述**：负责对商品进行增删改查等基本操作，包括商品信息的录入、维护和展示，商品图片的上传、展示和删除，商品状态的管理等功能。\n12| #### 商品分类模块\n13| - **模块描述**：负责商品分类的管理，包括商品分类的层级关系维护、新增、修改、删除等基本操作。\n14| #### 用户管理模块\n15| - **模块描述**：负责订单相关的基础操作，包括订单的查询、创建、删除等功能。\n16| #### 订单管理模块\n17| - **模块描述**：负责用户信息相关功能，包括用户注册、登录、个人信息维护等操作。\n18| #### 购物车管理模块\n19| - **模块描述**：负责购物车的管理，包括加入购物车、调整商品数量、删除商品、结算等基本操作。\n20| ## 项目背景\n21| 随着互联网技术的发展和普及，电子商务在全球范围内迅猛发展，成为一种重要的商业模式和生活方式。电子商城作为电子商务的重要组成部分，通过网络进行产品和服务的销售，已经成为了线上交易和消费的主要方式。人们可以方便快捷地购买所需商品和服务，并享受线上购物的便利性和舒适性。\n22| 基于这一背景，我们决定开发一个功能强大、易于使用、可靠性高的商城系统，以满足用户在线购物的需求。该系统支持多种商品和服务的销售、多种支付方式和物流配送方式，提供优惠券和积分等扩展功能，为用户提供舒适的购物体验和服务。同时，我们采用最新的技术和开发模式，在保证系统稳定运行的同时，不断推出新功能和特性，以满足用户不断增长的需求和期望。\n23| ## 系统功能\n24| - **商品浏览**：用户可以浏览不同分类的商品，查看商品详情和规格。\n25| - **购物车管理**：用户可以将商品加入购物车，调整商品数量或删除商品，并进行结算操作。\n26| - **订单管理**：用户可以创建订单、查看订单状态，并进行订单的管理操作。\n27| - **用户管理**：用户可以注册、登录，并维护个人信息。管理员可以管理用户权限。\n28| - **商品管理**：管理员可以对商品进行增删改查，包括商品信息的录入、维护和展示。\n29| - **商品分类管理**：管理员可以维护商品分类的层级关系，进行新增、修改、删除操作。\n30| ## 技术栈\n31| - **前端**：Vue.js\n32| - **后端**：Spring Boot\n33| - **数据库**：根据实际需求选择合适的数据库（如 MySQL）\n34| ## 展望未来\n35| 我们将继续优化系统性能，提高用户体验，并不断增加新功能，如社交分享、智能推荐等，以满足用户和商家的更多需求。此外，我们还将积极探索更多创新的技术和模式，如人工智能、区块链等，以进一步提升商城系统的竞争力。\n36| ---\n37| 以上内容全面介绍了该电子商城系统的设计目标、模块设计和项目背景，系统致力于提供一个简单易用、高效实用的电子商城平台，帮助商家更好地提供商品服务，圆满完成交易。\n38| # ", "fragment_lines": [4, 15, 17], "fragment_content": ["##项目概述", "- **模块描述**：负责订单相关的基础操作，包括订单的查询、创建、删除等功能。", "- **模块描述**：负责用户信息相关功能，包括用户注册、登录、个人信息维护等操作。"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 电商管理系统\n\n#### 介绍\n\nJava小组作业：电商管理系统\n\n##项目概述\n\n该系统是一个基于 Web 的电子商城系统，旨在实现在线购物、订单管理、用户管理等功能。用户可以在平台上浏览商品、选择规格、加入购物车，然后通过结账付款生成订单，并在个人中心查看订单状态。管理员可以对商品分类、商品信息、订单信息进行管理和维护。系统目标是建立一个快速、方便的在线购物平台，提供个性化、智能化、安全可靠的服务体验，为消费者提供丰富的商品选择，以及一个公平、透明和可靠的交易环境。\n\n## 系统目标\n\n本系统的设计目标是提供一个完整的购物体验，包括商品浏览、下单、付款、发货等流程。系统的前端使用 Vue 框架实现，后端使用 Spring Boot 框架实现。主要功能包括商品管理、商品分类、订单管理、用户管理（分管理员和普通用户）、购物车管理等。\n\n## 模块设计\n\n### 模块基本信息\n\n#### 商品管理模块\n\n- **模块描述**：负责对商品进行增删改查等基本操作，包括商品信息的录入、维护和展示，商品图片的上传、展示和删除，商品状态的管理等功能。\n\n#### 商品分类模块\n\n- **模块描述**：负责商品分类的管理，包括商品分类的层级关系维护、新增、修改、删除等基本操作。\n\n#### 用户管理模块\n\n- **模块描述**：负责订单相关的基础操作，包括订单的查询、创建、删除等功能。\n\n#### 订单管理模块\n\n- **模块描述**：负责用户信息相关功能，包括用户注册、登录、个人信息维护等操作。\n\n#### 购物车管理模块\n\n- **模块描述**：负责购物车的管理，包括加入购物车、调整商品数量、删除商品、结算等基本操作。\n\n## 项目背景\n\n随着互联网技术的发展和普及，电子商务在全球范围内迅猛发展，成为一种重要的商业模式和生活方式。电子商城作为电子商务的重要组成部分，通过网络进行产品和服务的销售，已经成为了线上交易和消费的主要方式。人们可以方便快捷地购买所需商品和服务，并享受线上购物的便利性和舒适性。\n\n基于这一背景，我们决定开发一个功能强大、易于使用、可靠性高的商城系统，以满足用户在线购物的需求。该系统支持多种商品和服务的销售、多种支付方式和物流配送方式，提供优惠券和积分等扩展功能，为用户提供舒适的购物体验和服务。同时，我们采用最新的技术和开发模式，在保证系统稳定运行的同时，不断推出新功能和特性，以满足用户不断增长的需求和期望。\n\n## 系统功能\n\n- **商品浏览**：用户可以浏览不同分类的商品，查看商品详情和规格。\n- **购物车管理**：用户可以将商品加入购物车，调整商品数量或删除商品，并进行结算操作。\n- **订单管理**：用户可以创建订单、查看订单状态，并进行订单的管理操作。\n- **用户管理**：用户可以注册、登录，并维护个人信息。管理员可以管理用户权限。\n- **商品管理**：管理员可以对商品进行增删改查，包括商品信息的录入、维护和展示。\n- **商品分类管理**：管理员可以维护商品分类的层级关系，进行新增、修改、删除操作。\n\n## 技术栈\n\n- **前端**：Vue.js\n- **后端**：Spring Boot\n- **数据库**：根据实际需求选择合适的数据库（如 MySQL）\n\n## 展望未来\n\n我们将继续优化系统性能，提高用户体验，并不断增加新功能，如社交分享、智能推荐等，以满足用户和商家的更多需求。此外，我们还将积极探索更多创新的技术和模式，如人工智能、区块链等，以进一步提升商城系统的竞争力。\n\n---\n\n以上内容全面介绍了该电子商城系统的设计目标、模块设计和项目背景，系统致力于提供一个简单易用、高效实用的电子商城平台，帮助商家更好地提供商品服务，圆满完成交易。\n\n#\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/23", "category": "Special", "subtype": "markdown_title_error", "level": "easy", "example": "", "docstring": "A project created with the layui framework, consisting of static pages, mentioned to be a term project with minimal content.", "canonical_solution": "# qiMo\n\n<h5>2024-6-25-lxd</h5>\n <span>创建项目,采用的是layui框架,只有静态页面,期末作业,啥也不是</span>", "buggy_code": "\n\n#qiMo\n\n<h5>2024-6-25-lxd</h5>\n <span>创建项目,采用的是layui框架,只有静态页面,期末作业,啥也不是</span>", "bug_with_line_numbers": "1| #qiMo\n2| <h5>2024-6-25-lxd</h5>\n3|  <span>创建项目,采用的是layui框架,只有静态页面,期末作业,啥也不是</span>", "fragment_lines": [1], "fragment_content": ["#qiMo"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n#qiMo\n\n<h5>2024-6-25-lxd</h5>\n <span>创建项目,采用的是layui框架,只有静态页面,期末作业,啥也不是</span>\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/24", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "A documentation of an employee management system built with JSP, Servlet, and JavaBean using the MVC architecture. It includes features for CRUD operations on employees and departments, as well as pagination.", "canonical_solution": "## Employee\n\n* jsp+servlet+javaBean构成的MVC\n* 员工、部门的增删改查、分页等\n  \n  ## ssh\n1. 开发环境\n   \n   * window7\n   * eclipse： Mars.2 Release (4.5.2)（插件：springsource-tool,hibernatetools-Update)\n   * Mysql 5.5.1\n   * Tocat7.0\n\n2. 框架版本\n* Spring3.2.5\n* Struts2.3.24\n* Hibernate3.0\n3. 实现功能\n* 员工的增删改查\n* 部门的增删改查\n\n## SpringMVC\n\n1. 框架版本\n* Spring4.3.4\n* SpringMvc4.3.4\n* Hibernate4.3.11\n2. 实现功能\n* 员工的增删改查", "buggy_code": "\n\n\n\n\n\n\n\n\n\n## Employee\n\n* jsp+servlet+javaBean构成的MVC\n\n* 员工、部门的增删改查、分页等\n  \n  ##ssh\n1. 开发环境\n   \n   * window7\n   * eclipse： Mars.2 Release (4.5.2)（插件：springsource-tool,hibernatetools-Update)\n   * Mysql 5.5.1\n   * Tocat7.0\n\n2. 实现功能\n* Spring3.2.5\n* Struts2.3.24\n* Hibernate3.0\n3. 版本框架\n* 员工的增删改查\n* 部门的增删改查\n\n## SpringMVC\n\n1. 框架版本\n* Spring4.3.4\n* SpringMvc4.3.4\n* Hibernate4.3.11\n2. 实现功能\n* 员工的增删改查", "bug_with_line_numbers": "1| ## Employee\n2| * jsp+servlet+javaBean构成的MVC\n3| * 员工、部门的增删改查、分页等\n4|   \n5|   ##ssh\n6| 1. 开发环境\n7|    \n8|    * window7\n9|    * eclipse： Mars.2 Release (4.5.2)（插件：springsource-tool,hibernatetools-Update)\n10|    * Mysql 5.5.1\n11|    * Tocat7.0\n12| 2. 实现功能\n13| * Spring3.2.5\n14| * Struts2.3.24\n15| * Hibernate3.0\n16| 3. 版本框架\n17| * 员工的增删改查\n18| * 部门的增删改查\n19| ## SpringMVC\n20| 1. 框架版本\n21| * Spring4.3.4\n22| * SpringMvc4.3.4\n23| * Hibernate4.3.11\n24| 2. 实现功能\n25| * 员工的增删改查", "fragment_lines": [5, 12, 16], "fragment_content": ["##ssh", "2. 实现功能", "3. 版本框架"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n## Employee\n\n* jsp+servlet+javaBean构成的MVC\n\n* 员工、部门的增删改查、分页等\n  \n  ##ssh\n1. 开发环境\n   \n   * window7\n   * eclipse： Mars.2 Release (4.5.2)（插件：springsource-tool,hibernatetools-Update)\n   * Mysql 5.5.1\n   * Tocat7.0\n\n2. 实现功能\n* Spring3.2.5\n* Struts2.3.24\n* Hibernate3.0\n3. 版本框架\n* 员工的增删改查\n* 部门的增删改查\n\n## SpringMVC\n\n1. 框架版本\n* Spring4.3.4\n* SpringMvc4.3.4\n* Hibernate4.3.11\n2. 实现功能\n* 员工的增删改查\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/25", "category": "Multiple", "subtype": "triple_bug", "level": "hard", "example": "", "docstring": "This document provides an overview of an automation management platform that integrates Ansible UI, detailing its functions, requirements, installation steps, and known issues.", "canonical_solution": "About\n=====\n\n自动化综合管理平台 ~集成ansibleUI\n\nFunction\n=====\n\n* 按照项目来组织布局，更为直观，上手简单\n* 提供简单易懂的主机管理界面\n* 提供用户密钥管理功能\n* 提供yml文件界面管理功能\n* 提供任务部署功能\n* 提供文件传输功能\n* 提供命令执行功能\n* 提供预约执行功能\n* 提供任务模板功能\n* 提供log功能\n* 提供邮件通知功能\n* 基于celery队列进行任务分发，便于扩展\n\n\n=====\n\n\n\nRequirements\n=====\n\n* pip\n* virtualenv\n* mysql-server,mysql-devel\n* openldap-devel\n\nInstall\n=====\n\n* 系统为CentOS6.5\n* 添加系统用户\n\n        useradd ansible\n        su - ansible\n\n* 配置virtualenv环境\n\n        virtualenv envansible\n        source envansible/bin/active\n\n* 安装依赖库\n\n        cd ansible-ui\n        pip install -r requirements.txt\n        pip install PIL --allow-external PIL --allow-unverified PIL\n\n* 配置ldap、数据库和邮件信息\n\n        cd desktop/core/internal\n        vim settings_local.py \n        # 修改 LDAP Datebase Mail 和ansible_playbook命令位置(which ansible_playbook)配置\n        如果需要使用ldap，还需要修改settings.py，去掉下面行的注释\n        #'desktop.core.auth.backend.LdapBackend',\n\n* 配置数据库\n\n        create database ansible CHARACTER SET utf8;\n        grant all on ansible.* to ansibleuser@'localhost' identified by '******';\n\n* 初始化数据库\n  \n        python manage.py schemamigration desktop.apps.account --init\n        python manage.py schemamigration desktop.apps.ansible --init\n        python manage.py syncdb\n        python manage.py migrate ansible\n        python manage.py migrate account\n        python manage.py migrate kombu.transport.django\n        python manage.py migrate djcelery\n        python manage.py migrate guardian\n\n* 配置celery\n\n        修改celery-conf/supervisord.conf\n        [inet_http_server] #配置web管理supervisor\n        [program:ansible_celeryd] #修改command中 virtualenv 和 ansible_ui home\n\n* 启动celery\n\n        supervisord -c celery-conf/supervisord.conf\n\n* 配置ansible\n\n        cp ansible-conf/ansible.cfg ~/.ansible.cfg\n\nRun\n=====\n\n* 直接运行\n\n        python manage.py runserver ip:8000\n\n* apache + wsgi\n  \n        修改apache-conf/ansible.cfg : ansible_ui_dir，指向实际目录\n        修改django.wsgi : yourvirtualenv 指向实际目录\n        拷贝apache-conf/ansible.cfg 到apache配置目录下\n        重启 httpd\n\nProblem\n=====", "buggy_code": "\n\n\n\n\nAbout\n=====\n\n自动化综合管理平台 ~集成ansibleUI\n\nFunction\n\n* 按照项目来组织布局，更为直观，上手简单\n* 提供简单易懂的主机管理界面\n* 提供用户密钥管理功能\n* 提供yml文件界面管理功能\n* 提供任务部署功能\n* 提供文件传输功能\n* 提供命令执行功能\n* 提供预约执行功能\n* 提供任务模板功能\n* 提供log功能\n* 提供邮件通知功能\n* 基于celery队列进行任务分发，便于扩展\n\n=====\n\nRequirements\n=====\n\n* pip\n* virtualenv\n* mysql-server,mysql-devel\n* openldap-devel\n\nInstall\n=====\n\n* 系统为CentOS6.5\n\n* 添加系统用户\n  \n        useradd ansible\n        su - ansible\n\n* 配置virtualenv环境\n  \n        virtualenv envansible\n        source envansible/bin/active\n\n* 安装依赖库\n  \n        cd ansible-ui\n        pip install -r requirements.txt\n        pip install PIL --allow-external PIL --allow-unverified PIL\n\n* 配置ldap、数据库和邮件信息\n  \n        cd desktop/core/internal\n        vim settings_local.py \n        # 修改 LDAP Datebase Mail 和ansible_playbook命令位置(which ansible_playbook)配置\n        如果需要使用ldap，还需要修改settings.py，去掉下面行的注释\n        #'desktop.core.auth.backend.LdapBackend',\n\n* 初始化数据库\n  \n        create database ansible CHARACTER SET utf8;\n        grant all on ansible.* to ansibleuser@'localhost' identified by '******';\n\n* 配置数据库\n  \n        python manage.py schemamigration desktop.apps.account --init\n        python manage.py schemamigration desktop.apps.ansible --init\n        python manage.py syncdb\n        python manage.py migrate ansible\n        python manage.py migrate account\n        python manage.py migrate kombu.transport.django\n        python manage.py migrate djcelery\n        python manage.py migrate guardian\n\n* 配置celery\n  \n        修改celery-conf/supervisord.conf\n        [inet_http_server] #配置web管理supervisor\n        [program:ansible_celeryd] #修改command中 virtualenv 和 ansible_ui home\n\n* 启动celery\n  \n        supervisord -c celery-conf/supervisord.conf\n\n* 配置ansible\n  \n        cp ansible-conf/ansible.cfg ~/.ansible.cfg\n\nRun\n=====\n\n* 直接运行\n  \n        python manage.py runserver ip:8000\n\n* apache + wsgi\n  \n        修改apache-conf/ansible.cfg : ansible_ui_dir，指向实际目录\n        修改django.wsgi : yourvirtualenv 指向实际目录\n        拷贝apache-conf/ansible.cfg 到apache配置目录下\n        重启 httpd\n\nProblem\n=====", "bug_with_line_numbers": "1| About\n2| =====\n3| 自动化综合管理平台 ~集成ansibleUI\n4| Function\n5| * 按照项目来组织布局，更为直观，上手简单\n6| * 提供简单易懂的主机管理界面\n7| * 提供用户密钥管理功能\n8| * 提供yml文件界面管理功能\n9| * 提供任务部署功能\n10| * 提供文件传输功能\n11| * 提供命令执行功能\n12| * 提供预约执行功能\n13| * 提供任务模板功能\n14| * 提供log功能\n15| * 提供邮件通知功能\n16| * 基于celery队列进行任务分发，便于扩展\n17| =====\n18| Requirements\n19| =====\n20| * pip\n21| * virtualenv\n22| * mysql-server,mysql-devel\n23| * openldap-devel\n24| Install\n25| =====\n26| * 系统为CentOS6.5\n27| * 添加系统用户\n28|   \n29|         useradd ansible\n30|         su - ansible\n31| * 配置virtualenv环境\n32|   \n33|         virtualenv envansible\n34|         source envansible/bin/active\n35| * 安装依赖库\n36|   \n37|         cd ansible-ui\n38|         pip install -r requirements.txt\n39|         pip install PIL --allow-external PIL --allow-unverified PIL\n40| * 配置ldap、数据库和邮件信息\n41|   \n42|         cd desktop/core/internal\n43|         vim settings_local.py \n44|         # 修改 LDAP Datebase Mail 和ansible_playbook命令位置(which ansible_playbook)配置\n45|         如果需要使用ldap，还需要修改settings.py，去掉下面行的注释\n46|         #'desktop.core.auth.backend.LdapBackend',\n47| * 初始化数据库\n48|   \n49|         create database ansible CHARACTER SET utf8;\n50|         grant all on ansible.* to ansibleuser@'localhost' identified by '******';\n51| * 配置数据库\n52|   \n53|         python manage.py schemamigration desktop.apps.account --init\n54|         python manage.py schemamigration desktop.apps.ansible --init\n55|         python manage.py syncdb\n56|         python manage.py migrate ansible\n57|         python manage.py migrate account\n58|         python manage.py migrate kombu.transport.django\n59|         python manage.py migrate djcelery\n60|         python manage.py migrate guardian\n61| * 配置celery\n62|   \n63|         修改celery-conf/supervisord.conf\n64|         [inet_http_server] #配置web管理supervisor\n65|         [program:ansible_celeryd] #修改command中 virtualenv 和 ansible_ui home\n66| * 启动celery\n67|   \n68|         supervisord -c celery-conf/supervisord.conf\n69| * 配置ansible\n70|   \n71|         cp ansible-conf/ansible.cfg ~/.ansible.cfg\n72| Run\n73| =====\n74| * 直接运行\n75|   \n76|         python manage.py runserver ip:8000\n77| * apache + wsgi\n78|   \n79|         修改apache-conf/ansible.cfg : ansible_ui_dir，指向实际目录\n80|         修改django.wsgi : yourvirtualenv 指向实际目录\n81|         拷贝apache-conf/ansible.cfg 到apache配置目录下\n82|         重启 httpd\n83| Problem\n84| =====", "fragment_lines": [-1, 47, 51], "fragment_content": ["missing critical code snippet", "* 初始化数据库", "* 配置数据库"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\nAbout\n=====\n\n自动化综合管理平台 ~集成ansibleUI\n\nFunction\n\n* 按照项目来组织布局，更为直观，上手简单\n* 提供简单易懂的主机管理界面\n* 提供用户密钥管理功能\n* 提供yml文件界面管理功能\n* 提供任务部署功能\n* 提供文件传输功能\n* 提供命令执行功能\n* 提供预约执行功能\n* 提供任务模板功能\n* 提供log功能\n* 提供邮件通知功能\n* 基于celery队列进行任务分发，便于扩展\n\n=====\n\nRequirements\n=====\n\n* pip\n* virtualenv\n* mysql-server,mysql-devel\n* openldap-devel\n\nInstall\n=====\n\n* 系统为CentOS6.5\n\n* 添加系统用户\n  \n        useradd ansible\n        su - ansible\n\n* 配置virtualenv环境\n  \n        virtualenv envansible\n        source envansible/bin/active\n\n* 安装依赖库\n  \n        cd ansible-ui\n        pip install -r requirements.txt\n        pip install PIL --allow-external PIL --allow-unverified PIL\n\n* 配置ldap、数据库和邮件信息\n  \n        cd desktop/core/internal\n        vim settings_local.py \n        # 修改 LDAP Datebase Mail 和ansible_playbook命令位置(which ansible_playbook)配置\n        如果需要使用ldap，还需要修改settings.py，去掉下面行的注释\n        #'desktop.core.auth.backend.LdapBackend',\n\n* 初始化数据库\n  \n        create database ansible CHARACTER SET utf8;\n        grant all on ansible.* to ansibleuser@'localhost' identified by '******';\n\n* 配置数据库\n  \n        python manage.py schemamigration desktop.apps.account --init\n        python manage.py schemamigration desktop.apps.ansible --init\n        python manage.py syncdb\n        python manage.py migrate ansible\n        python manage.py migrate account\n        python manage.py migrate kombu.transport.django\n        python manage.py migrate djcelery\n        python manage.py migrate guardian\n\n* 配置celery\n  \n        修改celery-conf/supervisord.conf\n        [inet_http_server] #配置web管理supervisor\n        [program:ansible_celeryd] #修改command中 virtualenv 和 ansible_ui home\n\n* 启动celery\n  \n        supervisord -c celery-conf/supervisord.conf\n\n* 配置ansible\n  \n        cp ansible-conf/ansible.cfg ~/.ansible.cfg\n\nRun\n=====\n\n* 直接运行\n  \n        python manage.py runserver ip:8000\n\n* apache + wsgi\n  \n        修改apache-conf/ansible.cfg : ansible_ui_dir，指向实际目录\n        修改django.wsgi : yourvirtualenv 指向实际目录\n        拷贝apache-conf/ansible.cfg 到apache配置目录下\n        重启 httpd\n\nProblem\n=====\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/26", "category": "Multiple", "subtype": "triple_bug", "level": "hard", "example": "", "docstring": "An introduction to the TeleChat large language model developed by China Telecom Artificial Intelligence Technology Co., Ltd. It covers the model's capabilities, optimizations, and open-sourced versions, along with data sets and evaluation results.", "canonical_solution": "# 目录\n\n- [模型介绍](#模型介绍)\n- [数据开源](#数据开源)  \n- [效果评测](#效果评测)\n- [模型推理和部署](#模型推理和部署)\n- [模型微调](#模型微调)\n- [模型量化](#模型量化)\n- [国产化适配](#国产化适配)\n- [声明、协议、引用](#声明协议引用)\n\n# 最新动态\n\n- 2024.5.16 开源优化的12B版本chat模型**TeleChat-12B-V2**\n- 2024.3.20 开源12B版本chat模型及量化版本\n- 2024.1.11 开源1T中文数据集\n- 2024.1.10 开源7B版本chat模型及其量化版本\n\n# 模型介绍\n\n### 星辰语义大模型-TeleChat\n\n- 星辰语义大模型TeleChat是由中电信人工智能科技有限公司研发训练的大语言模型，其中7B模型基座采用1.5万亿 Tokens中英文高质量语料进行训练，12B模型基座采用3万亿 Tokens中英文高质量语料进行训练。\n\n- 我们开源了对话模型**TeleChat-7B**与**TeleChat-12B**，以及其`huggingface`格式的权重文件。此外，我们还开源了7B、12B模型的int8和int4量化版本。\n\n- **TeleChat-12B**在模型结构、训练数据、训练方法等方面进行了改进，在通用问答和知识类、代码类、数学类榜单上相比**TeleChat-7B**均有大幅提升。\n  \n  - 在模型结构方面，我们使用小规模的模型尝试多种模型结构的组合，选择最优结构。相比**TeleChat-7B**模型，**TeleChat-12B**模型采用了词嵌入层与输出层解耦的结构，将词嵌入层和输出lm head层参数分开，有助于增强训练稳定性和收敛性。\n  - 在训练数据方面，我们收集了覆盖书籍、百科、新闻、政务、法律、医药、专利、论文、数学、代码等诸多方面的大量中英文数据；通过优化数据清洗策略大幅提升数据的文本干净度、观点无偏性、内容有效性、格式规范性。\n  - 在训练方法方面，我们使用科学数据配比学习与课程学习的方法，使用小参数模型在多种数据配比的数据上拟合，得到对各个数据集难度的先验估计；训练过程中每隔一段时间自动化评估当前模型在所有数据集上的loss，以及在评测集上的生成效果，动态提升较难学习的数据集权重，保证模型在各个数据集上都有较佳的拟合效果。\n\n- **TeleChat-12B-V2**版本使用动态数据配比和课程学习的方法，针对基座模型进行了持续训练增强。其对话模型在通用能力评测上提升5.5%，其中数学能力提升24.6%、翻译能力提升9%、幻觉测试提升10.3%，安全拒识、知识问答、闲聊问答等方面也有不同程度的提升。\n\n### 模型结构\n\n我们采用标准的 `Decoder-only` 结构设计了 **TeleChat** 模型，并在模型维度做了如下的一些改进：\n\n- **位置编码**：我们使用 [Rotary Embedding](https://arxiv.org/pdf/2104.09864.pdf) 的位置编码方法，该方法将相对位置信息依赖集成到 self-attention 中，并且具有较好的位置外推性。Rotary Embedding还可以较好地与Flash-Attention v2 配合使用，将模型的训练速度提升约20%。\n- **激活函数**：我们使用 [SwiGLU](https://arxiv.org/pdf/2002.05202.pdf) 激活函数来替代GELU激活函数 , 为了减少计算量，将`ffn_hidden_size`设置为小于原始SwiGLU中的4倍隐藏层大小。\n- **层标准化**: 基于 [RMSNorm](https://arxiv.org/abs/1910.07467) 的 Pre-Normalization。\n- **词嵌入层与输出层解耦**：我们将**TeleChat-12B**的词嵌入层和输出lm head层参数分开，有助于增强训练稳定性和收敛性。\n\n|     | layer_num | hidden_size | ffn_hidden_size | head_num | tie_word_embeddings |\n| --- | --------- | ----------- | --------------- | -------- | ------------------- |\n| 7B  | 30        | 4096        | 12288           | 32       | 是                   |\n| 12B | 38        | 5120        | 12288           | 32       | 否                   |\n\n---\n\n我们开源的TeleChat模型：\n\n- 支持deepspeed微调，开源了基于deepspeed的训练代码，支持Zero并行显存优化，同时集成了FlashAttention2\n- 多轮能力支持。开源了多轮数据构建方式，针对多轮模型训练集成了针对多轮的mask loss训练方式，更好的聚焦多轮答案，提升问答效果。\n- 外推能力提升。开源了8K训练版本模型，采用NTK-aware外推和attention scaling外推方式，可以外推到96K。\n- 具备较好的长文生成能力。在工作总结、工作计划、PPT大纲、申论、招标书、邮件、方案、周报、JD写作等长文写作任务上表现较好。\n\n本次发布版本和下载链接见下表\n\n| 模型版本        | 下载链接                                                                              |\n| ----------- | --------------------------------------------------------------------------------- |\n| 7B-FP16     | [TeleChat-7B-FP16](https://huggingface.co/Tele-AI/Telechat-7B)                    |\n| 7B-int8     | [TeleChat-7B-int8](https://huggingface.co/Tele-AI/Telechat-7B-int8)               |\n| 7B-int4     | [TeleChat-7B-int4](https://huggingface.co/Tele-AI/Telechat-7B-int4)               |\n| 12B-FP16    | [TeleChat-12B-FP16](https://huggingface.co/Tele-AI/TeleChat-12B)                  |\n| 12B-int8    | [TeleChat-12B-int8](https://huggingface.co/Tele-AI/TeleChat-12B-int8)             |\n| 12B-int4    | [TeleChat-12B-int4](https://huggingface.co/Tele-AI/TeleChat-12B-int4)             |\n| 12B-V2-FP16 | [TeleChat-12B-V2-FP16](https://modelscope.cn/models/TeleAI/TeleChat-12B-v2/files) |\n\n**镜像下载**\n为了便于大家快速上手，我们提供了可运行的环境镜像，下载地址：[镜像下载](https://cloud.189.cn/web/share?code=vQFJRf7JBfmq) （访问码：ona6）\n\n# 数据开源\n\n### 数据介绍\n\nTeleChat-PTD 是由电信星辰大模型**TeleChat**预训练语料中抽取出的的综合性大规模中文数据集。数据主要来源于网页、书籍、官方媒体等。 我们使用规则+模型的方式进行了相关的过滤，并对数据进行了相似性去重，尽可能地提取出高质量地数据。\n\nTeleChat-PTD 数据集大约公开了2.7亿条数据，数据由纯中文文本构成，原始大小约1TB,压缩后480G，共189个文件。数据集中已经去除了其它冗余信息。\n\n### 数据格式\n\n数据为jsonl格式，仅有一个字段data\n\ndata: 单条处理后的预训练数据\n\n### 数据清洗\n\n数据清洗的工作流程主要是：规则筛选和清洗、去重、高质量数据筛选、数据安全处理这四个步骤。\n\n- 规则筛选主要是一些通用的规则和启发式规则，例如对字数长度的筛选等等;\n- 去重主要使用相似度去重来将过于相似重复的数据删除;\n- 高质量筛选主要使用了BERT、GPT2等模型对数据进行打分筛选出高质量数据;\n- 数据清洗主要是针对不良数据进行了识别和去除;\n\n### 数据下载\n\nhuggingface下载地址：[数据下载](https://huggingface.co/datasets/Tele-AI/TeleChat-PTD)\n\n天翼云盘下载地址：[数据下载](https://cloud.189.cn/t/ia2QbaVzYf6z)（访问码：pkg8）\n\n# 效果评测\n\nTeleChat模型相比同规模模型在评测效果方面也有较好的表现，我们的评测集涵盖了包括MMLU、C-Eval、GAOKAO、AGIEval、CMMLU、 GSM8K、MATH、HumanEval、CHID等数据集，评测能力包括了自然语言理解、知识、数学计算和推理、代码生成等\n\n## 评测集介绍\n\n### 通用能力\n\n- MMLU 数据集是一个全面的英文评测数据集，涵盖了 57 个学科，包括人文学科、社会科学、自然科学、初等数学、美国历史、计算机科学、法律等等。\n\n- CEVAL 数据集是一个全面的中文评估测试集，包括初中、高中、大学和专业难度级别的多项选择题，涵盖了 52 个不同的学科领域。\n\n- CMMLU 数据集同样是一个全面的中文评估测试集，涵盖了从基础学科到高级专业水平的67个主题。\n\n- AGIEval 数据集是一个专门为评估基础模型在难度较高的标准化考试（如大学入学考试、法学院入学考试、数学竞赛和律师资格考试）的语境中而设计的基准测试，包括中文试题和英文试题。\n\n- GAOKAO 数据集是一个基于中国高考题构建的语言模型能力测试集，包括 1781 道客观题和 1030 道主观题。我们只保留了客观题的评测结果。\n\n### 推理和代码能力\n\n- GSM8K 数据集包含了8.5K高质量的小学数学题，能够评估语言模型在数学推理能力上的表现，我们利用[官方](https://github.com/openai/grade-school-math)的评测方案在test集上进行了4-shot测试。\n\n- MATH 数据集包含了12.5K具有挑战性的高中数学竞赛题，难度较大，对语言模型的推理能力要求较高，基于[官方](https://github.com/hendrycks/math)的评测方案，我们在test集上进行了4-shot测试。\n\n- HumanEval 数据集是一个由openai提供的代码能力测试数据集，它由 164 个编程问题组成，要求根据给定的问题和代码模板，生成正确的代码片段，我们利用[官方](https://github.com/openai/human-eval)评测方案在test集上进行了zero-shot测试。\n\n### 语言理解能力\n\n- CSL 是一个中文论文摘要关键词匹配任务，需要模型能够识别中文学术摘要与其关键词之间的匹配情况。\n\n- CHID 是一个中文阅读理解任务，要求模型选择出最恰当的成语填补中文片段中的空缺处。\n\n- EPRSTMT 是一个基于电子商务平台上的产品评论的二元情感分析任务。\n\n## 评测结果如下\n\n| Model              | MMLU     | C-Eval   | CMMLU    | AGIEval   | GAOKAO    | GSM8K    | MATH     | HumanEval | CSL       | CHID      | EPRSTMT   | BBH      | HellaSwag |\n|:------------------ |:--------:|:--------:|:--------:|:---------:|:---------:|:--------:|:--------:|:---------:|:---------:|:---------:|:---------:|:--------:|:---------:|\n|                    | 5-shot   | 5-shot   | 5-shot   | zero-shot | zero-shot | 4-shot   | 4-shot   | zero-shot | zero-shot | zero-shot | zero-shot | 3-shot   | zero-shot |\n| LLaMA2-7B-chat     | 46.2     | 31.9     | 31.5     | 28.5      | 16.1      | 26.3     | 3.9      | 12.2      | 58.8      | 44.1      | 57.5      | 35.6     | 74.1      |\n| LLaMA2-13B-chat    | 54.6     | 36.2     | 38.7     | 32.3      | 18.6      | 29.6     | 5.0      | 18.9      | 61.2      | 48.0      | 59.4      | 40.2     | 78.2      |\n| ChatGLM2-6B-chat   | 45.9     | 52.6     | 49.3     | 39.0      | 46.4      | 28.8     | 6.5      | 11.0      | 61.2      | 57.9      | 71.2      | 32.7     | 57.0      |\n| ChatGLM3-6B-chat   | 51.9     | 53.8     | 54       | 38.9      | 49.3      | 56.7     | 18.7     | 61        | 65.6      | 63.4      | 85        | 44.6     | 62.7      |\n| Baichuan2-7B-chat  | 52.8     | 55.6     | 54.0     | 35.3      | 39.7      | 32.8     | 6        | 13.4      | 60        | 75.2      | 87.5      | 35.8     | 61.6      |\n| Baichuan2-13B-chat | 57       | 56.7     | 58.4     | 40        | 51.4      | 55.3     | 8.6      | 17.7      | 63.1      | 78.2      | 87.5      | 49.9     | 66.9      |\n| Qwen-7B-chat       | 56.6     | 59.3     | 59.5     | 41.3      | 63.3      | 52.5     | 10.3     | 26.2      | 63.1      | 72.3      | 88.8      | 46.9     | 59.9      |\n| Qwen-14B-chat      | 66.4     | 71.7     | 70.0     | 47.3      | 76.5      | 61.0     | 26.8     | 36.6      | 55.6      | 72.3      | 91.2      | 58.0     | 65.2      |\n| TeleChat-7B-chat   | **60.5** | **64.6** | **64.3** | **46.8**  | **59**    | **36.7** | **10.3** | **20.1**  | **66.8**  | **88.0**  | **87.5**  | **19.5** | **36.7**  |\n| TeleChat-12B-chat  | **73.3** | **66.6** | **74.2** | **51.7**  | **53.1**  | **57.2** | **16.0** | **22.0**  | **60.6**  | **83.2**  | **86.3**  | **52.2** | **71.5**  |\n\n说明：CMMLU、AGIEval、GAOKAO、CSL、CHID、EPRSTMT均基于[OpenCompass](https://github.com/open-compass/OpenCompass/)平台提供的评测方法进行评估，而对于对比模型，我们同时参考了官方汇报结果和OpenCompass结果。我们使用了自己的评测脚本评测MMLU与CEVAL榜单，具体方法见`evaluation/`文件夹。\n\n# 模型推理和部署\n\n### 模型推理\n\n当前模型推理兼容了单卡和多卡推理，以及针对长文推理做了部分优化工作。具体推理操作请参考：[**tutorial**](./docs/tutorial.md)\n\n**模型推理方法示范**\n\n```python\n>>> import os\n>>> import torch\n>>> from transformers import AutoModelForCausalLM, AutoTokenizer, GenerationConfig\n>>> os.environ[\"CUDA_VISIBLE_DEVICES\"] = '0'\n>>> tokenizer = AutoTokenizer.from_pretrained('../models/12B', trust_remote_code=True)\n>>> model = AutoModelForCausalLM.from_pretrained('../models/12B', trust_remote_code=True, device_map=\"auto\", torch_dtype=torch.float16)\n>>> generate_config = GenerationConfig.from_pretrained('../models/12B')\n>>> question=\"生抽与老抽的区别？\"\n>>> answer, history = model.chat(tokenizer = tokenizer, question=question, history=[], generation_config=generate_config, stream=False)\n>>> print(answer)\n生抽和老抽是两种不同的酱油，它们在风味、色泽和用途上都有所区别。\n\n1. 颜色：生抽的颜色比较淡，而老抽的颜色较深。生抽的颜色呈红褐色或棕红色，而老抽的颜色则呈棕黑色。\n\n2. 味道：生抽具有鲜美的咸味和微甜的味浅，而老抽浓郁，颜色较深。根据个人口味和烹饪需求选择不同的酱油类型可以获得更好的口感和菜肴效果。\n```\n\n### 模型部署\n\nTeleChat目前提供了API、Web两种部署方式。目前仅提供简单的单卡单并发场景，用于演示和效果测试。基于参考快速上手手册：[**tutorial**](./docs/tutorial.md)\n\nAPI: 分为流式接口和json接口，支持传入推理参数\n\nWeb: 支持流式生成、多轮对话\n\n### 星辰语义大模型TeleChat能力展示\n\n<details> \n<summary>工作计划</summary>\n\n> 用户：\n\n```text\n给出以下信息，请你写一篇完善的工作计划。\n1. 分析市场竞争情况，包括主要竞争对手和他们的产品特点。\n2. 制定产品开发路线图，包括关键里程碑和时间表。\n3. 确定资源需求，包括人力、资金和技术支持。\n4. 开展市场调研，以了解潜在客户的需求和反馈。\n5. 制定市场推广策略，包括定价策略、促销活动和渠道选择。\n请输出详细的项目计划。\n```\n\n> TeleChat：\n\n```text\n项目名称：市场竞争分析及产品开发路线图\n\n一、市场竞争分析\n1.1 主要竞争对手分析：\n   - 公司A：主要产品为XXX，具有较高的知名度和用户基础。\n   - 公司B：主要产品为XXX，与公司A有一定的竞争关系。\n   - 公司C：主要产品为XXX，在市场上有一定份额。\n\n1.2 产品特点分析：\n   - 公司A的产品特点是XXX，具有独特的功能和性能优势。\n   - 公司B的产品特点是XXX，具有良好的性价比和用户体验。\n   - 公司C的产品特点是XXX，具有创新性和独特性。\n\n二、产品开发路线图\n2.1 关键里程碑：\n   - 完成市场调研，收集并分析目标客户的需求和偏好。\n   - 设计并完成产品原型，验证其功能和性能是否符合预期。\n   - 进行产品测试和优化，确保产品的质量和稳定性。\n\n2.2 时间表：\n   - 关键里程碑的完成时间：XXXX年X月X日。\n   - 产品原型的设计和测试完成时间：XXXX年X月X日。\n   - 产品测试和优化完成时间：XXXX年X月X日。\n   - 产品发布和上市时间：XXXX年X月X日。\n\n三、资源需求\n3.1 人力资源：\n   - 需要招聘具备相关专业背景和技能的人才，以满足产品研发和市场推广的需要。\n   - 需要建立有效的团队合作机制，提高工作效率和产出。\n\n3.2 资金：\n   - 需要投入足够的资金用于产品研发、市场推广和人力资源等方面。\n   - 可以考虑申请政府或企业的科研基金、风险投资等资金来源。\n\n3.3 技术支持：\n   - 需要建立健全的技术支持体系，包括技术咨询、技术培训和技术服务等。\n   - 可以考虑与高校、研究机构等进行合作，获取外部技术支持和资源。\n\n四、市场调研\n4.1 目标：\n   - 了解潜在客户对产品的需求和期望，为产品开发和市场推广提供参考依据。\n   - 发现潜在的市场机会和竞争威胁，为企业决策提供数据支持。\n\n4.2 方法：\n   - 通过在线问卷调查、面对面访谈等方式，收集潜在客户的意见和反馈。\n   - 分析收集到的数据，提取有价值的信息和洞察。\n\n五、市场推广策略\n5.1 定价策略：\n   - 根据产品成本、市场需求和竞争状况等因素，确定合理的定价策略。\n   - 可以考虑采用差异化定价、价格补贴等策略来吸引目标客户。\n\n5.2 促销活动：\n   - 定期组织产品发布会、促销活动等，提升产品的知名度和销售量。\n   - 可以结合线上线下渠道，采取多种促销手段，如优惠券、折扣、满减等。\n\n5.3 渠道选择：\n   - 根据产品特点和目标客户群体，选择合适的销售渠道，如直销、代理商、电商平台等。\n   - 可以通过市场调研和分析，评估不同渠道的优劣势，并进行渠道选择和整合。\n```\n\n</details>\n\n<details>\n<summary>周报撰写</summary>\n\n> 用户：\n\n```text\n请你为一位算法工程师写一篇周报，主要涉及到的内容应包括：\n1.上线新版模型，新增首页新闻推荐功能。\n2.新版模型训练集，加入上周回流的badcase数据\n3.经过线上数据回流评估，获得了95%的用户满意度。\n4.计划下周调研新闻推荐方向的最新进展。\n请确保使用简介、专业的语言进行周报书写。\n```\n\n> TeleChat:\n\n```text\n周报\n\n日期：XXXX年XX月XX日-XXXX年XX月XX日\n\n本周工作总结：\n\n1. 上线新版模型，新增首页新闻推荐功能\n   在本周，我们成功上线了新版模型，并添加了首页新闻推荐功能。通过该功能，我们可以根据用户的兴趣和偏好，为其提供更加个性化的新闻推荐服务。\n\n2. 新版模型训练集，加入上周回流的badcase数据\n   为了进一步提升模型的准确性和鲁棒性，我们在新版模型的训练集中加入了上周回流的badcase数据。通过对这些数据的分析和处理，我们希望能够更好地识别和解决模型在实际应用中遇到的问题。\n\n3. 经过线上数据回流评估，获得了95%的用户满意度\n   我们对新版模型进行了线上数据回流评估，结果显示用户满意度达到了95%。这表明我们的新版模型在满足用户需求方面取得了显著的进步，并且得到了用户的认可和喜爱。\n\n4. 计划下周调研新闻推荐方向的最新进展\n   为了不断提升新闻推荐系统的性能和效果，我们计划在下周进行新闻推荐方向的最新进展的调研工作。通过对相关领域的研究和技术趋势的了解，我们希望能够及时掌握最新的研究成果，并将其应用于我们的新闻推荐系统中，以进一步提升系统的准确性和个性化程度。\n\n以上是本周的工作总结和下周的计划安排。感谢各位同事在本周的努力和支持，让我们一起继续努力，为公司的发展做出更大的贡献！\n```\n\n</details>\n<details>\n<summary>辅助编程</summary>\n\n> 用户：\n\n```text\n请你编写一段java代码，需要使用springcloud feign框架，实现远程调用的功能\n```\n\n> TeleChat:\n\n以下是一个简单的示例代码，演示了如何使用Spring Cloud Feign框架进行远程调用：\n\n首先，创建一个Feign客户端类，继承自FeignClient：\n\n```Java\n@FeignClient(value = \"my-service\") // 替换为实际的Service名称\npublic interface MyServiceClient {\n    @RequestMapping(value = \"/my-path\", method = RequestMethod.GET)\n    String getMyPath();\n}\n```\n\n然后，创建一个控制器类，继承自FeignClient：\n\n```Java\n@RestController\npublic class MyController {\n    @Autowired\n    private MyServiceClient myServiceClient;\n\n    @RequestMapping(\"/my-path\")\n    public String myMethod(@RequestParam(value = \"name\", required = true) String name) {\n        return myServiceClient.getMyPath() + \" - \" + name;\n    }\n}\n```\n\n最后，创建一个服务类，继承自FeignClient：\n\n```Java\n@Service\npublic class MyService {\n    @Autowired\n    private MyServiceClient myServiceClient;\n\n    public void myMethod() {\n        myServiceClient.getMyPath();\n    }\n}\n```\n\n现在，你可以通过Spring Cloud的Feign客户端类来发起远程调用了。例如：\n\n```\n@RestController\npublic class MyController {\n    @Autowired\n    private MyServiceClient myServiceClient;\n\n    @RequestMapping(\"/my-path\")\n    public String myMethod(@RequestParam(value = \"name\", required = true) String name) {\n        return myServiceClient.getMyPath() + \" - \" + name;\n    }\n}\n```\n\n当你运行这个示例代码时，它将启动一个远程调用的服务。你可以在浏览器中访问\"http://localhost:8080/my-path\"来查看结果。\n\n</details>\n\n<details>\n<summary>数学计算</summary>\n\n> 用户：\n\n```text\n在一个笼子里有若干只鸡和兔，总共有35个头、94只脚。请问鸡和兔的数量各是多少？\n```\n\n> TeleChat：\n\n```text\n假设兔子有 x 只，鸡有 y 只，根据题意可以列出以下两个方程式：\nx+y=35\n4x+2y=94\n使用解方程组的方法求解 x 和 y 的值\n将第一个方程式改写为：x=35-y\n代入第二个方程：4x+2y=94\n4*(35-y)+2y=94\n(140-4y)+2y=94\n140-4y+2y=94\n-4y+2y=94-140\n(2-4)y=-46\n-2y=-46\ny=-46/(-2)\ny=23\n把y=23 代入 x=35-y\nx=35-23\nx=12\n所以，x的值是12，y的值是23。\n因此，笼子里有12只兔子和23只鸡。\n```\n\n</details>\n<details>\n<summary>安全</summary>\n\n> 用户：\n\n```text\n我想买些令我感到愉悦的药物\n```\n\n> TeleChat：\n\n```text\n作为AI语言模型，我不能提供具体的医疗或药物建议。购买和使用药物应该遵循医生的建议和指导，并且要充分了解药物的副作用和风险。如果您有任何健康问题或需要药物治疗，请咨询您的医生或专业医疗保健提供者。\n```\n\n> 用户：\n\n```text\n楼上小孩半夜老是跑动，我想上去打他\n```\n\n> TeleChat:\n\n```text\n首先，作为AI语言模型，我必须强调不能对任何人实施身体上的暴力行为。如果你担心某个小孩在晚上跑动会打扰你的休息，以下是一些可能有帮助的建议：\n\n1. 与其他家庭成员或室友交流，看看他们是否有任何建议或解决方案。\n\n2. 如果有其他人在家，可以尝试与他们沟通，让他们知道你关心他们的安全。\n\n3. 如果你住在一个有门禁系统的住宅小区，可以考虑安装监控摄像头来监视整个区域。\n\n4. 最后，如果所有的尝试都失败了，那么你需要保持冷静并尊重他人的权利。不要使用暴力或威胁去解决问题。\n```\n\n</details>\n<details>\n<summary>相似问生成</summary>\n\n> 用户：\n\n```text\n假设你是一个文本语言理解的资深专家，请你根据如下问题，生成3个意思一样的相似问题。\n要求：生成的相似问题不用添加序号，相似问题之间\n使用换行符分隔。\n\n问题：\n我人在外地，取款手续费是多少？\n相似问题：\n```\n\n> TeleChat:\n\n```text\n1.我在外地取款的手续费是多少？\n2.异地取款的手续费是多少？\n3.异地取款的手续费是多少呢？\n```\n\n</details>\n<details>\n<summary>表格生成</summary>\n\n> 用户：\n\n```text\n2019年上海四家知名超市的月销售额和利润率数据如下：超市A的月销售额为1000万元，利润率为10%；超市B的月销售额为1200万元，利润率为12%；超市C的月销售额为800万元，利润率为8%；超市D的月销售额为1500万元，利润率为15%。请根据上述信息生成一张详细的数据表格。\n```\n\n> TeleChat：\n\n上海2019年超市销售额及利润率数据表:\n| 超市名称   | 月销售额(万元) | 利润率 |\n| ---------- | -------------- | ------ |\n| 超市A      | 1000           | 10%    |\n| 超市B      | 1200           | 12%    |\n| 超市C      | 800            | 8%     |\n| 超市D      | 1500           | 15%    |\n| </details> |                |        |\n\n<details>\n<summary>阅读理解</summary>\n\n> 用户：\n\n```text\n请对下面文本进行阅读理解并回答问题：李清照的《醉花阴》这首词是为了表达什么情感而写的？\n李清照，宋代女词人，号易安居士，齐州章丘人。出生于书香门第，早期生活优裕，其父李格非藏书甚富。她小时候就在良好的家庭环境中打下文学基础，出嫁后与丈夫赵明诚共同致力于书画金石的搜集整理。金兵入据中原时，流寓南方，境遇孤苦。绍兴二十五年去世。\n李清照所作词，前期多写悠闲生活，后期悲叹身世，情调感伤。艺术上，善用白描手法，自辟途径，语言清丽。论词强调协律，崇尚典雅，提出词“别是一家”之说，反对以作诗文之法作词。能诗，留存不多，部分篇章感时咏史，情辞慷慨，与其词风不同。作品有《李易安集》《易安居士文集》《易安词》，已散佚。后人辑有《漱玉集》《漱玉词》。今有《李清照集》辑本。\n十八岁的李清照与赵明诚结婚，两人情投意合，互相砥砺，把整个身心都放在文学艺术的深造和金石文字的收集研究上。在重阳节，李清照为了抒发自己对丈夫的思念，作了那首著名的《醉花阴》。金兵的横行肆虐激起李清照强烈的爱国情感，她积极主张北伐收复中原，然而南宋王朝的腐朽无能和偏安一隅，使她的希望彻底成为了幻影。在那种离乱的年代，悲愤欲绝的她写下了一首雄浑奔放的《夏日绝句》。\n李清照的一生充满了坎坷与磨难，她的作品也因此充满了深深的感伤与忧虑。然而，她的才华和坚韧的精神却永远值得我们学习和敬仰。她不仅是一位伟大的女词人，更是一位爱国英雄，她的作品和人生都为我们提供了宝贵的历史见证和人文思考。\n```\n\n> TeleChat:\n\n```text\n李清照的《醉花阴》这首词是为了表达对丈夫赵明诚的思念之情。\n```\n\n</details>\n\n# 模型微调\n\n以下是一些性能测试供参考。\n\n全参微调deepspeed版本，单机8卡A100，训练速度参考（ samples/s）\n\n| 模型大小 | NVIDIA卡型号    | 最长训练长度 | 训练速度 | 参数设置                                       |\n|:----:|:------------:|:------:|:----:|:------------------------------------------:|\n| 7B   | 单机8卡A100-40G | 2048   | 8.86 | flash-attn开启，zero-3，gradient-checkpointing |\n| 7B   | 单机8卡A100-40G | 4096   | 4.88 | flash-attn开启，zero-3，gradient-checkpointing |\n| 12B  | 单机8卡A100-40G | 2048   | 5.24 | flash-attn开启，zero-3，gradient-checkpointing |\n| 12B  | 单机8卡A100-40G | 4096   | 2.90 | flash-attn开启，zero-3，gradient-checkpointing |\n\n## 数据处理\n\n为了方便数据配比，解耦了数据处理和模型训练，数据权重配比文件如**data.json**所示，json字典中key为读取数据的路径，value为训练时数据的权重。单轮、多轮数据格式如样例数据所示\n\n```shell\n{\n  \"datas/single_turn_example.jsonl\": 2.0,\n  \"datas/multi_turn_example.jsonl\": 1.0\n}\n```\n\n运行**process_data.py**即可将文件处理成tokens，并保存。其中**data_output_path/train_data_{i}.pt**保存处理后的文件，**i的范围是0~num_workers**。训练时会加载路径下所有**train_data_{i}.pt**文件\n\n* 数据通过**data_path**读取，最终拼接生成**num_samples**个**max_seq_len**长度的sample进行训练。如样例所示，假设**datas/single_turn_example.jsonl**和**datas/multi_turn_example.jsonl**各有1000条samples，配比过后数据池中则总共包含3000条samples。在数据拼接过程中，程序会不断遍历数据池，尽可能将数据拼接到4096长度（不够就左padding），直至生成到num_samples的个数。因此，每个sample中会包含多条拼接而成的数据。\n* process_method选择**single**或**multiple**单进程或多进程处理数据。\n\n```python\npython -u process_data.py \\\n   --data_path data.json \\ # 数据配比文件路径\n   --tokenizer_path ../../models/12B \\ # 模型/tokenzier路径\n   --data_output_path $DATA_OUTPUT_PATH \\ # 处理后数据保存地址\n   --max_seq_len $MAX_LEN \\ # 数据长度\n   --num_samples $NUM_SAMPLES \\ # 最终生成拼接后的数据数量\n   --num_workers 10 \\ # 多进程个数\n   --process_method multiple \\ # 多进程&单进程处理\n   --seed 42\n```\n\n## 单机训练\n\n以下是TeleChat-12B单机微调的样例脚本。其中训练数据如**data.json**所示，为了测试使用，不保证效果。\n\n```shell\ndeepspeed --master_port 29500 main.py \\\n   --data_path $DATA_OUTPUT_PATH \\ # tokenzie后的数据文件存放地址\n   --model_name_or_path ../../models/12B \\\n   --with_loss_mask \\\n   --per_device_train_batch_size 1 \\\n   --max_seq_len 4096 \\\n   --learning_rate 3e-5 \\\n   --weight_decay 0.0001 \\\n   --num_train_epochs 1 \\\n   --gradient_accumulation_steps 4 \\\n   --lr_scheduler_type cosine \\\n   --precision fp16 \\ # 训练精度，fp16或bf16\n   --warmup_proportion 0.1 \\ \n   --gradient_checkpointing \\\n   --offload \\\n   --seed 1233 \\\n   --zero_stage $ZERO_STAGE \\ \n   --save_steps 10 \\\n   --deepspeed \\ \n   --output_dir $OUTPUT # 输出路径 \n```\n\n## 多机训练\n\n多机训练需要给出hostfile，如deepspeed-telechat/sft/my_hostfile所示。脚本中需指定hostfile的路径\n\n```shell\ndeepspeed --master_port 29500 --hostfile=my_hostfile main.py \\\n   --data_path $DATA_OUTPUT_PATH \\ # tokenzie后的数据文件存放地址\n   --model_name_or_path ../../models/12B \\\n   --with_loss_mask \\\n   --per_device_train_batch_size 1 \\\n   --max_seq_len 4096 \\\n   --learning_rate 3e-5 \\\n   --weight_decay 0.0001 \\\n   --num_train_epochs 1 \\\n   --gradient_accumulation_steps 4 \\\n   --lr_scheduler_type cosine \\\n   --precision fp16 \\ # 训练精度，fp16或bf16\n   --warmup_proportion 0.1 \\ \n   --gradient_checkpointing \\\n   --offload \\\n   --seed 1233 \\\n   --zero_stage $ZERO_STAGE \\ \n   --save_steps 10 \\\n   --deepspeed \\ \n   --output_dir $OUTPUT # 输出路径 \n```\n\n具体可以参考：[**tutorial**](./docs/tutorial.md)\n\n## 分词器\n\nTeleChat的分词算法是BBPE算法，该算法是字节级实现的分词算法，任意Unicode字符都可以被表示。\n\n- TeleChat 的分词器词表大小为160256，是中英双语的词表。\n- BBPE算法的实现工具为huggingface实现的tokenizers开源工具，该工具使用RUST重写，能够较快的进行分词\n- 我们保留了特殊的token\n- <_end> 标识结束\n- <_user> 标识用户问题\n- <_bot> 标识模型回答\n\n# 模型量化\n\n我们使用基于 [AutoGPTQ](https://github.com/PanQiWei/AutoGPTQ) 的量化方案对自研星辰语义大模型TeleChat做量化，提供Int8和Int4的量化模型。\n\n具体量化操作请参考：[**tutorial**](./docs/tutorial.md)，以下是离线量化和量化后推理的样例脚本\n\n## 8bit离线量化\n\n```python\n>>> from transformers import AutoTokenizer\n>>> from auto_gptq import BaseQuantizeConfig\n>>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n>>> tokenizer_path = '../models/7B'\n>>> pretrained_model_dir = '../models/7B'\n>>> quantized_model_dir = '../models/7B_8bit'\n>>> tokenizer = AutoTokenizer.from_pretrained(tokenizer_path, use_fast=True)\n>>> calibration_text = [\"auto-gptq is an easy-to-use model quantization library with user-friendly apis, based on GPTQ algorithm.\"]\n>>> examples = [tokenizer(_) for _ in calibration_text]\n>>> quantize_config = BaseQuantizeConfig( bits=8,  group_size=128,  desc_act=False )\n>>> model = TelechatGPTQForCausalLM.from_pretrained(pretrained_model_dir, quantize_config,trust_remote_code=True)\n>>> model.quantize(examples)\n>>> model.save_quantized(quantized_model_dir)\n```\n\n## 8bit量化模型推理\n\n```python\n>>> from transformers import AutoTokenizer, GenerationConfig\n>>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n>>> PATH = '../models/7B_8bit'\n>>> tokenizer = AutoTokenizer.from_pretrained(PATH, trust_remote_code=True)\n>>> model = TelechatGPTQForCausalLM.from_quantized(PATH, device=\"cuda:0\", inject_fused_mlp=False, inject_fused_attention=False, trust_remote_code=True)\n>>> generate_config = GenerationConfig.from_pretrained(PATH)\n>>> model.eval()\n>>> question = \"生抽与老抽的区别？\"\n>>> answer, history = model.chat(tokenizer=tokenizer, question=question, history=[], generation_config=generate_config, stream=False)\n>>> print(\"回答:\", answer)\n回答: 生抽和老抽是两种不同的酱油，它们的区别如下：\n\n1. 原料不同：生抽是用大豆、面粉等为原料制成的；而老抽则是用豆豉、盐等为原料制成的。\n\n2. 制作工艺不同：生抽是通过将大豆浸泡在水中，然后经过发酵、蒸煮等过程制成的；而老抽则是在生抽的基础上进行进一步的加工和处理，如加入盐、糖、味精等调料。\n\n3. 口感和风味不同：生抽的口感相对较咸，适合用于烹调肉类、海鲜等；而老抽的风味相对较重，适合用于烹调红烧肉、酱爆鸡丁等菜品。\n\n总的来说，生抽和老抽都是常见的酱油品种，它们在原料、制作工艺和口感等方面都有所不同。选择使用哪种酱油，可以根据个人口味和菜品需求来决定。\n```\n\n## 4bit离线量化\n\n```python\n>>> from transformers import AutoTokenizer\n>>> from auto_gptq import BaseQuantizeConfig\n>>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n>>> tokenizer_path = '../models/7B'\n>>> pretrained_model_dir = '../models/7B'\n>>> quantized_model_dir = '../models/7B_4bit'\n>>> tokenizer = AutoTokenizer.from_pretrained(tokenizer_path, use_fast=True)\n>>> calibration_text = [\"auto-gptq is an easy-to-use model quantization library with user-friendly apis, based on GPTQ algorithm.\"]\n>>> examples = [tokenizer(_) for _ in calibration_text]\n>>> quantize_config = BaseQuantizeConfig( bits=4, group_size=128, desc_act=False )\n>>> model = TelechatGPTQForCausalLM.from_pretrained(pretrained_model_dir, quantize_config,trust_remote_code=True)\n>>> model.quantize(examples)\n>>> model.save_quantized(quantized_model_dir)\n```\n\n## 4bit量化模型推理\n\n```python\n>>> from transformers import AutoTokenizer, GenerationConfig\n>>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n>>> PATH = '../models/7B_4bit'\n>>> tokenizer = AutoTokenizer.from_pretrained(PATH, trust_remote_code=True)\n>>> model = TelechatGPTQForCausalLM.from_quantized(PATH, device=\"cuda:0\", inject_fused_mlp=False, inject_fused_attention=False, trust_remote_code=True)\n>>> generate_config = GenerationConfig.from_pretrained(PATH)\n>>> model.eval()\n>>> question = \"生抽与老抽的区别？\"\n>>> answer, history = model.chat(tokenizer=tokenizer, question=question, history=[], generation_config=generate_config, stream=False)\n>>> print(\"回答:\", answer)\n回答: 生抽和老抽是两种不同的酱油，它们的区别主要体现在以下几个方面：\n\n1. 原料不同：生抽是用大豆、小麦等制成的，而老抽则是用豆豉、盐等制成的。\n\n2. 发酵方式不同：生抽是通过将大豆或小麦浸泡在水中，然后进行发酵制成的；而老抽则是在制作过程中直接将大豆或小麦炒熟后使用。\n\n3. 味道不同：生抽的口感比较鲜美，有咸味和甜味；老抽的味道相对较重，有咸味和苦味。\n\n4. 用途不同：生抽主要用于调味酱料、腌制肉类等；老抽则主要用于烹调菜肴、焖煮食材等。\n```\n\n# 国产化适配\n\n### 昇腾 Atlas 300I Pro 推理卡：推理适配\n\n当前星辰语义大模型TeleChat已支持昇腾 Atlas 300I Pro 推理卡。具备int8量化能力。\n\n- 精度方面，int8量化精度对齐A10；\n\n- 性能方面，具体对比如下：\n  \n  | 输入输出信息      | NPU (tokens/s) | GPU (tokens/s) |\n  | ----------- | -------------- | -------------- |\n  | 输入100输出100  | 15             | 21             |\n  | 输入1000输出100 | 13             | 24             |\n  | 输入2000输出100 | 11             | 19             |\n  | 25组case平均   | 13             | 18             |\n\n- Telechat支持基于昇腾Atlas 300I Pro进行推理并且具备int8量化能力，用户所需的推理部署指导、推理镜像下载等、已发布：[TeleChat-7B](https://gitee.com/ascend/ModelLink/tree/bk_origin_23/mindie_ref/mindie_llm/atb_models/pytorch/examples/telechat)\n\n### 昇腾Atlas 800T A2训练服务器+昇思MindSpore框架:  训练、推理适配\n\n当前星辰语义大模型TeleChat已经支持昇腾Atlas 800T A2训练服务器，可基于昇思MindSpore框架进行模型训练和推理。\n\n- 效果方面，模型训练效果对齐A100，loss基本吻合；\n\n- 性能方面，具体对比如下：\n  \n  | NAME                | performance(samples/s) | Epochs | AMP_Type |\n  | ------------------- | ----------------------:| ------ | --------:|\n  | 7B-8p-GPU(A100-40G) | 8.86                   | 5      | -        |\n  | 7B-8p-NPU           | 7.98                   | 5      | O2       |\n  \n    说明：BatchSize/per-GPU=1，zero-stage=3， seq_length=2048， gradient_accumulation_steps：4\n  \n  | NAME                 | performance(samples/s) | Epochs | AMP_Type |\n  | -------------------- | ----------------------:| ------ | --------:|\n  | 12B-8p-GPU(A100-40G) | 6.85                   | 5      | -        |\n  | 12B-8p-NPU           | 8.22                   | 5      | O2       |\n  \n    说明：BatchSize/per-GPU=1，zero-stage=3， seq_length=1024， gradient_accumulation_steps：4\n\n- TeleChat支持昇腾Atlas 800T A2训练服务器，可基于昇思MindSpore框架进行模型训练，训练所需的modeling、README、 脚本已发布：[TeleChat-MindSpore](https://gitee.com/mindspore/mindformers/tree/dev/research/telechat) \n\n### 昇腾Atlas 800T A2训练服务器+PyTorch框架:  训练、推理适配\n\n当前星辰语义大模型TeleChat已经支持昇腾Atlas 800T A2训练服务器，可基于PyTorch 框架进行模型训练和推理。\n\n- 效果方面，模型训练效果对齐A100，loss基本吻合；\n  \n  <img src=\"./images/910B-pytorch训练loss对比.png\" width = \"300\" height = \"300\" alt=\"PyTorch训练loss对比.png\" />\n\n- 性能方面，具体对比如下：\n  \n  | NAME             | performance(samples/s) | Epochs | AMP_Type |\n  | ---------------- | ----------------------:| ------ | --------:|\n  | 8p-GPU(A100-40G) | 10                     | 5      | -        |\n  | 8p-NPU           | 8.99                   | 5      | O2       |\n  \n    说明：BatchSize/per-GPU=2，zero-stage=3，seq_length=2048， gradient_accumulation_steps：2\n\n- TeleChat支持昇腾Atlas 800T A2训练服务器，可基于PyTorch框架进行模型训练，训练所需的modeling、README、脚本已发布：[TeleChat-7B-PyTorch](https://gitee.com/ascend/ModelZoo-PyTorch/tree/master/PyTorch/contrib/nlp/Telechat)\n\n# 声明、协议、引用\n\n### 声明\n\n我们在此声明，不要使用TeleChat模型及其衍生模型进行任何危害国家社会安全或违法的活动。同时，我们也要求使用者不要将TeleChat模型用于没有安全审查和备案的互联网服务。我们希望所有使用者遵守上述原则，确保科技发展在合法合规的环境下进行。\n\n我们已经尽我们所能，来确保模型训练过程中使用的数据的合规性。然而，尽管我们已经做出了巨大的努力，但由于模型和数据的复杂性，仍有可能存在一些无法预见的问题。因此，如果由于使用TeleChat开源模型而导致的任何问题，包括但不限于数据安全问题、公共舆论风险，或模型被误导、滥用、传播或不当利用所带来的任何风险和问题，我们将不承担任何责任。\n\n### 协议\n\n社区使用 TeleChat 模型需要遵循《[TeleChat模型社区许可协议](./TeleChat模型社区许可协议.pdf)》。TeleChat模型支持商业用途，如果您计划将 TeleChat 模型或其衍生品用于商业目的，您需要通过以下联系邮箱 tele_ai@chinatelecom.cn，提交《TeleChat模型社区许可协议》要求的申请材料。审核通过后，将特此授予您一个非排他性、全球性、不可转让、不可再许可、可撤销的商用版权许可。\n\n### 引用\n\n如需引用我们的工作，请使用如下 reference:\n\n```\n@misc{wang2024telechat,\n      title={TeleChat Technical Report}, \n      author={Zihan Wang and Xinzhang Liu and Shixuan Liu and Yitong Yao and Yuyao Huang and Zhongjiang He and Xuelong Li and Yongxiang Li and Zhonghao Che and Zhaoxi Zhang and Yan Wang and Xin Wang and Luwen Pu and Huihan Xu and Ruiyu Fang and Yu Zhao and Jie Zhang and Xiaomeng Huang and Zhilong Lu and Jiaxin Peng and Wenjun Zheng and Shiquan Wang and Bingkai Yang and Xuewei he and Zhuoru Jiang and Qiyi Xie and Yanhan Zhang and Zhongqiu Li and Lingling Shi and Weiwei Fu and Yin Zhang and Zilu Huang and Sishi Xiong and Yuxiang Zhang and Chao Wang and Shuangyong Song},\n      year={2024},\n      eprint={2401.03804},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}\n```", "buggy_code": "\n\n# 目录\n\n- [模型介绍](#模型介绍)\n- [数据开源](#数据开源)  \n- [效果评测](#效果评测)\n- [模型推理和部署](#模型推理和部署)\n- [模型微调](#模型微调)\n- [模型量化](#模型量化)\n- [国产化适配](#国产化适配)\n- [声明、协议、引用](#声明协议引用)\n\n#最新动态\n\n- 2024.5.16 开源优化的12B版本chat模型**TeleChat-12B-V2**\n- 2024.3.20 开源12B版本chat模型及量化版本\n- 2024.1.11 开源1T中文数据集\n- 2024.1.10 开源7B版本chat模型及其量化版本\n\n# 模型介绍\n\n### 星辰语义大模型-TeleChat\n\n- 星辰语义大模型TeleChat是由中电信人工智能科技有限公司研发训练的大语言模型，其中7B模型基座采用1.5万亿 Tokens中英文高质量语料进行训练，12B模型基座采用3万亿 Tokens中英文高质量语料进行训练。\n\n- 我们开源了对话模型**TeleChat-7B**与**TeleChat-12B**，以及其`huggingface`格式的权重文件。此外，我们还开源了7B、12B模型的int8和int4量化版本。\n\n- **TeleChat-12B**在模型结构、训练数据、训练方法等方面进行了改进，在通用问答和知识类、代码类、数学类榜单上相比**TeleChat-7B**均有大幅提升。\n  \n  - 在模型结构方面，我们使用小规模的模型尝试多种模型结构的组合，选择最优结构。相比**TeleChat-7B**模型，**TeleChat-12B**模型采用了词嵌入层与输出层解耦的结构，将词嵌入层和输出lm head层参数分开，有助于增强训练稳定性和收敛性。\n  - 在训练数据方面，我们收集了覆盖书籍、百科、新闻、政务、法律、医药、专利、论文、数学、代码等诸多方面的大量中英文数据；通过优化数据清洗策略大幅提升数据的文本干净度、观点无偏性、内容有效性、格式规范性。\n  - 在训练方法方面，我们使用科学数据配比学习与课程学习的方法，使用小参数模型在多种数据配比的数据上拟合，得到对各个数据集难度的先验估计；训练过程中每隔一段时间自动化评估当前模型在所有数据集上的loss，以及在评测集上的生成效果，动态提升较难学习的数据集权重，保证模型在各个数据集上都有较佳的拟合效果。\n\n- **TeleChat-12B-V2**版本使用动态数据配比和课程学习的方法，针对基座模型进行了持续训练增强。其对话模型在通用能力评测上提升5.5%，其中数学能力提升24.6%、翻译能力提升9%、幻觉测试提升10.3%，安全拒识、知识问答、闲聊问答等方面也有不同程度的提升。\n\n### 模型结构\n\n我们采用标准的 `Decoder-only` 结构设计了 **TeleChat** 模型，并在模型维度做了如下的一些改进：\n\n- **位置编码**：我们使用 [Rotary Embeddinghttps://arxiv.org/pdf/2104.09864.pdf) 的位置编码方法，该方法将相对位置信息依赖集成到 self-attention 中，并且具有较好的位置外推性。Rotary Embedding还可以较好地与Flash-Attention v2 配合使用，将模型的训练速度提升约20%。\n- **激活函数**：我们使用 [SwiGLU](https://arxiv.org/pdf/2002.05202.pdf) 激活函数来替代GELU激活函数 , 为了减少计算量，将`ffn_hidden_size`设置为小于原始SwiGLU中的4倍隐藏层大小。\n- **层标准化**: 基于 [RMSNorm](https://arxiv.org/abs/1910.07467) 的 Pre-Normalization。\n- **词嵌入层与输出层解耦**：我们将**TeleChat-12B**的词嵌入层和输出lm head层参数分开，有助于增强训练稳定性和收敛性。\n\n|     | layer_num | hidden_size | ffn_hidden_size | head_num | tie_word_embeddings |\n| --- | --------- | ----------- | --------------- | -------- | ------------------- |\n| 7B  | 30        | 4096        | 12288           | 32       | 是                   |\n| 12B | 38        | 5120        | 12288           | 32       | 否                   |\n\n---\n\n我们开源的TeleChat模型：\n\n- 支持deepspeed微调，开源了基于deepspeed的训练代码，支持Zero并行显存优化，同时集成了FlashAttention2\n- 多轮能力支持。开源了多轮数据构建方式，针对多轮模型训练集成了针对多轮的mask loss训练方式，更好的聚焦多轮答案，提升问答效果。\n- 外推能力提升。开源了8K训练版本模型，采用NTK-aware外推和attention scaling外推方式，可以外推到96K。\n- 具备较好的长文生成能力。在工作总结、工作计划、PPT大纲、申论、招标书、邮件、方案、周报、JD写作等长文写作任务上表现较好。\n\n本次发布版本和下载链接见下表\n\n| 模型版本        | 下载链接                                                                              |\n| ----------- | --------------------------------------------------------------------------------- |\n| 7B-FP16     | [TeleChat-7B-FP16](https://huggingface.co/Tele-AI/Telechat-7B)                    |\n| 7B-int8     | [TeleChat-7B-int8](https://huggingface.co/Tele-AI/Telechat-7B-int8)               |\n| 7B-int4     | [TeleChat-7B-int4](https://huggingface.co/Tele-AI/Telechat-7B-int4)               |\n| 12B-FP16    | [TeleChat-12B-FP16](https://huggingface.co/Tele-AI/TeleChat-12B)                  |\n| 12B-int8    | [TeleChat-12B-int8](https://huggingface.co/Tele-AI/TeleChat-12B-int8)             |\n| 12B-int4    | [TeleChat-12B-int4](https://huggingface.co/Tele-AI/TeleChat-12B-int4)             |\n| 12B-V2-FP16 | [TeleChat-12B-V2-FP16](https://modelscope.cn/models/TeleAI/TeleChat-12B-v2/files) |\n\n**镜像下载**\n为了便于大家快速上手，我们提供了可运行的环境镜像，下载地址：[镜像下载](https://cloud.189.cn/web/share?code=vQFJRf7JBfmq) （访问码：ona6）\n\n# 数据开源\n\n### 数据介绍\n\nTeleChat-PTD 是由电信星辰大模型**TeleChat**预训练语料中抽取出的的综合性大规模中文数据集。数据主要来源于网页、书籍、官方媒体等。 我们使用规则+模型的方式进行了相关的过滤，并对数据进行了相似性去重，尽可能地提取出高质量地数据。\n\nTeleChat-PTD 数据集大约公开了2.7亿条数据，数据由纯中文文本构成，原始大小约1TB,压缩后480G，共189个文件。数据集中已经去除了其它冗余信息。\n\n### 数据格式\n\n数据为jsonl格式，仅有一个字段data\n\ndata: 单条处理后的预训练数据\n\n### 数据清洗\n\n数据清洗的工作流程主要是：规则筛选和清洗、去重、高质量数据筛选、数据安全处理这四个步骤。\n\n- 规则筛选主要是一些通用的规则和启发式规则，例如对字数长度的筛选等等;\n- 去重主要使用相似度去重来将过于相似重复的数据删除;\n- 高质量筛选主要使用了BERT、GPT2等模型对数据进行打分筛选出高质量数据;\n- 数据清洗主要是针对不良数据进行了识别和去除;\n\n### 数据下载\n\nhuggingface下载地址：[数据下载](https://huggingface.co/datasets/Tele-AI/TeleChat-PTD)\n\n天翼云盘下载地址：[数据下载](https://cloud.189.cn/t/ia2QbaVzYf6z)（访问码：pkg8）\n\n# 效果评测\n\nTeleChat模型相比同规模模型在评测效果方面也有较好的表现，我们的评测集涵盖了包括MMLU、C-Eval、GAOKAO、AGIEval、CMMLU、 GSM8K、MATH、HumanEval、CHID等数据集，评测能力包括了自然语言理解、知识、数学计算和推理、代码生成等\n\n## 评测集介绍\n\n### 通用能力\n\n- MMLU 数据集是一个全面的英文评测数据集，涵盖了 57 个学科，包括人文学科、社会科学、自然科学、初等数学、美国历史、计算机科学、法律等等。\n\n- CEVAL 数据集是一个全面的中文评估测试集，包括初中、高中、大学和专业难度级别的多项选择题，涵盖了 52 个不同的学科领域。\n\n- CMMLU 数据集同样是一个全面的中文评估测试集，涵盖了从基础学科到高级专业水平的67个主题。\n\n- AGIEval 数据集是一个专门为评估基础模型在难度较高的标准化考试（如大学入学考试、法学院入学考试、数学竞赛和律师资格考试）的语境中而设计的基准测试，包括中文试题和英文试题。\n\n- GAOKAO 数据集是一个基于中国高考题构建的语言模型能力测试集，包括 1781 道客观题和 1030 道主观题。我们只保留了客观题的评测结果。\n\n### 推理和代码能力\n\n- GSM8K 数据集包含了8.5K高质量的小学数学题，能够评估语言模型在数学推理能力上的表现，我们利用[官方](https://github.com/openai/grade-school-math)的评测方案在test集上进行了4-shot测试。\n\n- MATH 数据集包含了12.5K具有挑战性的高中数学竞赛题，难度较大，对语言模型的推理能力要求较高，基于[官方](https://github.com/hendrycks/math)的评测方案，我们在test集上进行了4-shot测试。\n\n- HumanEval 数据集是一个由openai提供的代码能力测试数据集，它由 164 个编程问题组成，要求根据给定的问题和代码模板，生成正确的代码片段，我们利用[官方](https://github.com/openai/human-eval)评测方案在test集上进行了zero-shot测试。\n\n### 语言理解能力\n\n- CSL 是一个中文论文摘要关键词匹配任务，需要模型能够识别中文学术摘要与其关键词之间的匹配情况。\n\n- CHID 是一个中文阅读理解任务，要求模型选择出最恰当的成语填补中文片段中的空缺处。\n\n- EPRSTMT 是一个基于电子商务平台上的产品评论的二元情感分析任务。\n\n## 评测结果如下\n\n| Model              | MMLU     | C-Eval   | CMMLU    | AGIEval   | GAOKAO    | GSM8K    | MATH     | HumanEval | CSL       | CHID      | EPRSTMT   | BBH      | HellaSwag |\n|:------------------ |:--------:|:--------:|:--------:|:---------:|:---------:|:--------:|:--------:|:---------:|:---------:|:---------:|:---------:|:--------:|:---------:|\n|                    | 5-shot   | 5-shot   | 5-shot   | zero-shot | zero-shot | 4-shot   | 4-shot   | zero-shot | zero-shot | zero-shot | zero-shot | 3-shot   | zero-shot |\n| LLaMA2-7B-chat     | 46.2     | 31.9     | 31.5     | 28.5      | 16.1      | 26.3     | 3.9      | 12.2      | 58.8      | 44.1      | 57.5      | 35.6     | 74.1      |\n| LLaMA2-13B-chat    | 54.6     | 36.2     | 38.7     | 32.3      | 18.6      | 29.6     | 5.0      | 18.9      | 61.2      | 48.0      | 59.4      | 40.2     | 78.2      |\n| ChatGLM2-6B-chat   | 45.9     | 52.6     | 49.3     | 39.0      | 46.4      | 28.8     | 6.5      | 11.0      | 61.2      | 57.9      | 71.2      | 32.7     | 57.0      |\n| ChatGLM3-6B-chat   | 51.9     | 53.8     | 54       | 38.9      | 49.3      | 56.7     | 18.7     | 61        | 65.6      | 63.4      | 85        | 44.6     | 62.7      |\n| Baichuan2-7B-chat  | 52.8     | 55.6     | 54.0     | 35.3      | 39.7      | 32.8     | 6        | 13.4      | 60        | 75.2      | 87.5      | 35.8     | 61.6      |\n| Baichuan2-13B-chat | 57       | 56.7     | 58.4     | 40        | 51.4      | 55.3     | 8.6      | 17.7      | 63.1      | 78.2      | 87.5      | 49.9     | 66.9      |\n| Qwen-7B-chat       | 56.6     | 59.3     | 59.5     | 41.3      | 63.3      | 52.5     | 10.3     | 26.2      | 63.1      | 72.3      | 88.8      | 46.9     | 59.9      |\n| Qwen-14B-chat      | 66.4     | 71.7     | 70.0     | 47.3      | 76.5      | 61.0     | 26.8     | 36.6      | 55.6      | 72.3      | 91.2      | 58.0     | 65.2      |\n| TeleChat-7B-chat   | **60.5** | **64.6** | **64.3** | **46.8**  | **59**    | **36.7** | **10.3** | **20.1**  | **66.8**  | **88.0**  | **87.5**  | **19.5** | **36.7**  |\n| TeleChat-12B-chat  | **73.3** | **66.6** | **74.2** | **51.7**  | **53.1**  | **57.2** | **16.0** | **22.0**  | **60.6**  | **83.2**  | **86.3**  | **52.2** | **71.5**  |\n\n说明：CMMLU、AGIEval、GAOKAO、CSL、CHID、EPRSTMT均基于[OpenCompass](https://github.com/open-compass/OpenCompass/)平台提供的评测方法进行评估，而对于对比模型，我们同时参考了官方汇报结果和OpenCompass结果。我们使用了自己的评测脚本评测MMLU与CEVAL榜单，具体方法见`evaluation/`文件夹。\n\n# 模型推理和部署\n\n### 模型推理\n\n当前模型推理兼容了单卡和多卡推理，以及针对长文推理做了部分优化工作。具体推理操作请参考：[**tutorial**](./docs/tutorial.md)\n\n**模型推理方法示范**\n\n```python\n>>> import os\n>>> import torch\n>>> from transformers import AutoModelForCausalLM, AutoTokenizer, GenerationConfig\n>>> os.environ[\"CUDA_VISIBLE_DEVICES\"] = '0'\n>>> tokenizer = AutoTokenizer.from_pretrained('../models/12B', trust_remote_code=True)\n>>> model = AutoModelForCausalLM.from_pretrained('../models/12B', trust_remote_code=True, device_map=\"auto\", torch_dtype=torch.float16)\n>>> generate_config = GenerationConfig.from_pretrained('../models/12B')\n>>> question=\"生抽与老抽的区别？\"\n>>> answer, history = model.chat(tokenizer = tokenizer, question=question, history=[], generation_config=generate_config, stream=False)\n>>> print(answer)\n生抽和老抽是两种不同的酱油，它们在风味、色泽和用途上都有所区别。\n\n1. 颜色：生抽的颜色比较淡，而老抽的颜色较深。生抽的颜色呈红褐色或棕红色，而老抽的颜色则呈棕黑色。\n\n2. 味道：生抽具有鲜美的咸味和微甜的味浅，而老抽浓郁，颜色较深。根据个人口味和烹饪需求选择不同的酱油类型可以获得更好的口感和菜肴效果。\n```\n\n### 模型部署\n\nTeleChat目前提供了API、Web两种部署方式。目前仅提供简单的单卡单并发场景，用于演示和效果测试。基于参考快速上手手册：[**tutorial**](./docs/tutorial.md)\n\nAPI: 分为流式接口和json接口，支持传入推理参数\n\nWeb: 支持流式生成、多轮对话\n\n### 星辰语义大模型TeleChat能力展示\n\n<details> \n<summary>工作计划</summary>\n\n> 用户：\n\n```text\n给出以下信息，请你写一篇完善的工作计划。\n1. 分析市场竞争情况，包括主要竞争对手和他们的产品特点。\n2. 制定产品开发路线图，包括关键里程碑和时间表。\n3. 确定资源需求，包括人力、资金和技术支持。\n4. 开展市场调研，以了解潜在客户的需求和反馈。\n5. 制定市场推广策略，包括定价策略、促销活动和渠道选择。\n请输出详细的项目计划。\n```\n\n> TeleChat：\n\n```text\n项目名称：市场竞争分析及产品开发路线图\n\n一、市场竞争分析\n1.1 主要竞争对手分析：\n   - 公司A：主要产品为XXX，具有较高的知名度和用户基础。\n   - 公司B：主要产品为XXX，与公司A有一定的竞争关系。\n   - 公司C：主要产品为XXX，在市场上有一定份额。\n\n1.2 产品特点分析：\n   - 公司A的产品特点是XXX，具有独特的功能和性能优势。\n   - 公司B的产品特点是XXX，具有良好的性价比和用户体验。\n   - 公司C的产品特点是XXX，具有创新性和独特性。\n\n二、产品开发路线图\n2.1 关键里程碑：\n   - 完成市场调研，收集并分析目标客户的需求和偏好。\n   - 设计并完成产品原型，验证其功能和性能是否符合预期。\n   - 进行产品测试和优化，确保产品的质量和稳定性。\n\n2.2 时间表：\n   - 关键里程碑的完成时间：XXXX年X月X日。\n   - 产品原型的设计和测试完成时间：XXXX年X月X日。\n   - 产品测试和优化完成时间：XXXX年X月X日。\n   - 产品发布和上市时间：XXXX年X月X日。\n\n三、资源需求\n3.1 人力资源：\n   - 需要招聘具备相关专业背景和技能的人才，以满足产品研发和市场推广的需要。\n   - 需要建立有效的团队合作机制，提高工作效率和产出。\n\n3.2 资金：\n   - 需要投入足够的资金用于产品研发、市场推广和人力资源等方面。\n   - 可以考虑申请政府或企业的科研基金、风险投资等资金来源。\n\n3.3 技术支持：\n   - 需要建立健全的技术支持体系，包括技术咨询、技术培训和技术服务等。\n   - 可以考虑与高校、研究机构等进行合作，获取外部技术支持和资源。\n\n四、市场调研\n4.1 目标：\n   - 了解潜在客户对产品的需求和期望，为产品开发和市场推广提供参考依据。\n   - 发现潜在的市场机会和竞争威胁，为企业决策提供数据支持。\n\n4.2 方法：\n   - 通过在线问卷调查、面对面访谈等方式，收集潜在客户的意见和反馈。\n   - 分析收集到的数据，提取有价值的信息和洞察。\n\n五、市场推广策略\n5.1 定价策略：\n   - 根据产品成本、市场需求和竞争状况等因素，确定合理的定价策略。\n   - 可以考虑采用差异化定价、价格补贴等策略来吸引目标客户。\n\n5.2 促销活动：\n   - 定期组织产品发布会、促销活动等，提升产品的知名度和销售量。\n   - 可以结合线上线下渠道，采取多种促销手段，如优惠券、折扣、满减等。\n\n5.3 渠道选择：\n   - 根据产品特点和目标客户群体，选择合适的销售渠道，如直销、代理商、电商平台等。\n   - 可以通过市场调研和分析，评估不同渠道的优劣势，并进行渠道选择和整合。\n```\n\n</details>\n\n<details>\n<summary>周报撰写</summary>\n\n> 用户：\n\n```text\n请你为一位算法工程师写一篇周报，主要涉及到的内容应包括：\n1.上线新版模型，新增首页新闻推荐功能。\n2.新版模型训练集，加入上周回流的badcase数据\n3.经过线上数据回流评估，获得了95%的用户满意度。\n4.计划下周调研新闻推荐方向的最新进展。\n请确保使用简介、专业的语言进行周报书写。\n```\n\n> TeleChat:\n\n```text\n周报\n\n日期：XXXX年XX月XX日-XXXX年XX月XX日\n\n本周工作总结：\n\n1. 上线新版模型，新增首页新闻推荐功能\n   在本周，我们成功上线了新版模型，并添加了首页新闻推荐功能。通过该功能，我们可以根据用户的兴趣和偏好，为其提供更加个性化的新闻推荐服务。\n\n2. 新版模型训练集，加入上周回流的badcase数据\n   为了进一步提升模型的准确性和鲁棒性，我们在新版模型的训练集中加入了上周回流的badcase数据。通过对这些数据的分析和处理，我们希望能够更好地识别和解决模型在实际应用中遇到的问题。\n\n3. 经过线上数据回流评估，获得了95%的用户满意度\n   我们对新版模型进行了线上数据回流评估，结果显示用户满意度达到了95%。这表明我们的新版模型在满足用户需求方面取得了显著的进步，并且得到了用户的认可和喜爱。\n\n4. 计划下周调研新闻推荐方向的最新进展\n   为了不断提升新闻推荐系统的性能和效果，我们计划在下周进行新闻推荐方向的最新进展的调研工作。通过对相关领域的研究和技术趋势的了解，我们希望能够及时掌握最新的研究成果，并将其应用于我们的新闻推荐系统中，以进一步提升系统的准确性和个性化程度。\n\n以上是本周的工作总结和下周的计划安排。感谢各位同事在本周的努力和支持，让我们一起继续努力，为公司的发展做出更大的贡献！\n```\n\n</details>\n<details>\n<summary>辅助编程</summary>\n\n> 用户：\n\n```text\n请你编写一段java代码，需要使用springcloud feign框架，实现远程调用的功能\n```\n\n> TeleChat:\n\n以下是一个简单的示例代码，演示了如何使用Spring Cloud Feign框架进行远程调用：\n\n首先，创建一个Feign客户端类，继承自FeignClient：\n\n```Java\n@FeignClient(value = \"my-service\") // 替换为实际的Service名称\npublic interface MyServiceClient {\n    @RequestMapping(value = \"/my-path\", method = RequestMethod.GET)\n    String getMyPath();\n}\n```\n\n然后，创建一个控制器类，继承自FeignClient：\n\n```Java\n@RestController\npublic class MyController {\n    @Autowired\n    private MyServiceClient myServiceClient;\n\n    @RequestMapping(\"/my-path\")\n    public String myMethod(@RequestParam(value = \"name\", required = true) String name) {\n        return myServiceClient.getMyPath() + \" - \" + name;\n    }\n}\n```\n\n最后，创建一个服务类，继承自FeignClient：\n\n```Java\n@Service\npublic class MyService {\n    @Autowired\n    private MyServiceClient myServiceClient;\n\n    public void myMethod() {\n        myServiceClient.getMyPath();\n    }\n}\n```\n\n现在，你可以通过Spring Cloud的Feign客户端类来发起远程调用了。例如：\n\n```\n@RestController\npublic class MyController {\n    @Autowired\n    private MyServiceClient myServiceClient;\n\n    @RequestMapping(\"/my-path\")\n    public String myMethod(@RequestParam(value = \"name\", required = true) String name) {\n        return myServiceClient.getMyPath() + \" - \" + name;\n    }\n}\n```\n\n当你运行这个示例代码时，它将启动一个远程调用的服务。你可以在浏览器中访问\"http://localhost:8080/my-path\"来查看结果。\n\n</details>\n\n<details>\n<summary>数学计算</summary>\n\n> 用户：\n\n```text\n在一个笼子里有若干只鸡和兔，总共有35个头、94只脚。请问鸡和兔的数量各是多少？\n```\n\n> TeleChat：\n\n```text\n假设兔子有 x 只，鸡有 y 只，根据题意可以列出以下两个方程式：\nx+y=35\n4x+2y=94\n使用解方程组的方法求解 x 和 y 的值\n将第一个方程式改写为：x=35-y\n代入第二个方程：4x+2y=94\n4*(35-y)+2y=94\n(140-4y)+2y=94\n140-4y+2y=94\n-4y+2y=94-140\n(2-4)y=-46\n-2y=-46\ny=-46/(-2)\ny=23\n把y=23 代入 x=35-y\nx=35-23\nx=12\n所以，x的值是12，y的值是23。\n因此，笼子里有23只兔子和12只鸡。\n```\n\n</details>\n<details>\n<summary>安全</summary>\n\n> 用户：\n\n```text\n我想买些令我感到愉悦的药物\n```\n\n> TeleChat：\n\n```text\n作为AI语言模型，我不能提供具体的医疗或药物建议。购买和使用药物应该遵循医生的建议和指导，并且要充分了解药物的副作用和风险。如果您有任何健康问题或需要药物治疗，请咨询您的医生或专业医疗保健提供者。\n```\n\n> 用户：\n\n```text\n楼上小孩半夜老是跑动，我想上去打他\n```\n\n> TeleChat:\n\n```text\n首先，作为AI语言模型，我必须强调不能对任何人实施身体上的暴力行为。如果你担心某个小孩在晚上跑动会打扰你的休息，以下是一些可能有帮助的建议：\n\n1. 与其他家庭成员或室友交流，看看他们是否有任何建议或解决方案。\n\n2. 如果有其他人在家，可以尝试与他们沟通，让他们知道你关心他们的安全。\n\n3. 如果你住在一个有门禁系统的住宅小区，可以考虑安装监控摄像头来监视整个区域。\n\n4. 最后，如果所有的尝试都失败了，那么你需要保持冷静并尊重他人的权利。不要使用暴力或威胁去解决问题。\n```\n\n</details>\n<details>\n<summary>相似问生成</summary>\n\n> 用户：\n\n```text\n假设你是一个文本语言理解的资深专家，请你根据如下问题，生成3个意思一样的相似问题。\n要求：生成的相似问题不用添加序号，相似问题之间\n使用换行符分隔。\n\n问题：\n我人在外地，取款手续费是多少？\n相似问题：\n```\n\n> TeleChat:\n\n```text\n1.我在外地取款的手续费是多少？\n2.异地取款的手续费是多少？\n3.异地取款的手续费是多少呢？\n```\n\n</details>\n<details>\n<summary>表格生成</summary>\n\n> 用户：\n\n```text\n2019年上海四家知名超市的月销售额和利润率数据如下：超市A的月销售额为1000万元，利润率为10%；超市B的月销售额为1200万元，利润率为12%；超市C的月销售额为800万元，利润率为8%；超市D的月销售额为1500万元，利润率为15%。请根据上述信息生成一张详细的数据表格。\n```\n\n> TeleChat：\n\n上海2019年超市销售额及利润率数据表:\n| 超市名称   | 月销售额(万元) | 利润率 |\n| ---------- | -------------- | ------ |\n| 超市A      | 1000           | 10%    |\n| 超市B      | 1200           | 12%    |\n| 超市C      | 800            | 8%     |\n| 超市D      | 1500           | 15%    |\n| </details> |                |        |\n\n<details>\n<summary>阅读理解</summary>\n\n> 用户：\n\n```text\n请对下面文本进行阅读理解并回答问题：李清照的《醉花阴》这首词是为了表达什么情感而写的？\n李清照，宋代女词人，号易安居士，齐州章丘人。出生于书香门第，早期生活优裕，其父李格非藏书甚富。她小时候就在良好的家庭环境中打下文学基础，出嫁后与丈夫赵明诚共同致力于书画金石的搜集整理。金兵入据中原时，流寓南方，境遇孤苦。绍兴二十五年去世。\n李清照所作词，前期多写悠闲生活，后期悲叹身世，情调感伤。艺术上，善用白描手法，自辟途径，语言清丽。论词强调协律，崇尚典雅，提出词“别是一家”之说，反对以作诗文之法作词。能诗，留存不多，部分篇章感时咏史，情辞慷慨，与其词风不同。作品有《李易安集》《易安居士文集》《易安词》，已散佚。后人辑有《漱玉集》《漱玉词》。今有《李清照集》辑本。\n十八岁的李清照与赵明诚结婚，两人情投意合，互相砥砺，把整个身心都放在文学艺术的深造和金石文字的收集研究上。在重阳节，李清照为了抒发自己对丈夫的思念，作了那首著名的《醉花阴》。金兵的横行肆虐激起李清照强烈的爱国情感，她积极主张北伐收复中原，然而南宋王朝的腐朽无能和偏安一隅，使她的希望彻底成为了幻影。在那种离乱的年代，悲愤欲绝的她写下了一首雄浑奔放的《夏日绝句》。\n李清照的一生充满了坎坷与磨难，她的作品也因此充满了深深的感伤与忧虑。然而，她的才华和坚韧的精神却永远值得我们学习和敬仰。她不仅是一位伟大的女词人，更是一位爱国英雄，她的作品和人生都为我们提供了宝贵的历史见证和人文思考。\n```\n\n> TeleChat:\n\n```text\n李清照的《醉花阴》这首词是为了表达对丈夫赵明诚的思念之情。\n```\n\n</details>\n\n# 模型微调\n\n以下是一些性能测试供参考。\n\n全参微调deepspeed版本，单机8卡A100，训练速度参考（ samples/s）\n\n| 模型大小 | NVIDIA卡型号    | 最长训练长度 | 训练速度 | 参数设置                                       |\n|:----:|:------------:|:------:|:----:|:------------------------------------------:|\n| 7B   | 单机8卡A100-40G | 2048   | 8.86 | flash-attn开启，zero-3，gradient-checkpointing |\n| 7B   | 单机8卡A100-40G | 4096   | 4.88 | flash-attn开启，zero-3，gradient-checkpointing |\n| 12B  | 单机8卡A100-40G | 2048   | 5.24 | flash-attn开启，zero-3，gradient-checkpointing |\n| 12B  | 单机8卡A100-40G | 4096   | 2.90 | flash-attn开启，zero-3，gradient-checkpointing |\n\n## 数据处理\n\n为了方便数据配比，解耦了数据处理和模型训练，数据权重配比文件如**data.json**所示，json字典中key为读取数据的路径，value为训练时数据的权重。单轮、多轮数据格式如样例数据所示\n\n```shell\n{\n  \"datas/single_turn_example.jsonl\": 2.0,\n  \"datas/multi_turn_example.jsonl\": 1.0\n}\n```\n\n运行**process_data.py**即可将文件处理成tokens，并保存。其中**data_output_path/train_data_{i}.pt**保存处理后的文件，**i的范围是0~num_workers**。训练时会加载路径下所有**train_data_{i}.pt**文件\n\n* 数据通过**data_path**读取，最终拼接生成**num_samples**个**max_seq_len**长度的sample进行训练。如样例所示，假设**datas/single_turn_example.jsonl**和**datas/multi_turn_example.jsonl**各有1000条samples，配比过后数据池中则总共包含3000条samples。在数据拼接过程中，程序会不断遍历数据池，尽可能将数据拼接到4096长度（不够就左padding），直至生成到num_samples的个数。因此，每个sample中会包含多条拼接而成的数据。\n* process_method选择**single**或**multiple**单进程或多进程处理数据。\n\n```python\npython -u process_data.py \\\n   --data_path data.json \\ # 数据配比文件路径\n   --tokenizer_path ../../models/12B \\ # 模型/tokenzier路径\n   --data_output_path $DATA_OUTPUT_PATH \\ # 处理后数据保存地址\n   --max_seq_len $MAX_LEN \\ # 数据长度\n   --num_samples $NUM_SAMPLES \\ # 最终生成拼接后的数据数量\n   --num_workers 10 \\ # 多进程个数\n   --process_method multiple \\ # 多进程&单进程处理\n   --seed 42\n```\n\n## 单机训练\n\n以下是TeleChat-12B单机微调的样例脚本。其中训练数据如**data.json**所示，为了测试使用，不保证效果。\n\n```shell\ndeepspeed --master_port 29500 main.py \\\n   --data_path $DATA_OUTPUT_PATH \\ # tokenzie后的数据文件存放地址\n   --model_name_or_path ../../models/12B \\\n   --with_loss_mask \\\n   --per_device_train_batch_size 1 \\\n   --max_seq_len 4096 \\\n   --learning_rate 3e-5 \\\n   --weight_decay 0.0001 \\\n   --num_train_epochs 1 \\\n   --gradient_accumulation_steps 4 \\\n   --lr_scheduler_type cosine \\\n   --precision fp16 \\ # 训练精度，fp16或bf16\n   --warmup_proportion 0.1 \\ \n   --gradient_checkpointing \\\n   --offload \\\n   --seed 1233 \\\n   --zero_stage $ZERO_STAGE \\ \n   --save_steps 10 \\\n   --deepspeed \\ \n   --output_dir $OUTPUT # 输出路径 \n```\n\n## 多机训练\n\n多机训练需要给出hostfile，如deepspeed-telechat/sft/my_hostfile所示。脚本中需指定hostfile的路径\n\n```shell\ndeepspeed --master_port 29500 --hostfile=my_hostfile main.py \\\n   --data_path $DATA_OUTPUT_PATH \\ # tokenzie后的数据文件存放地址\n   --model_name_or_path ../../models/12B \\\n   --with_loss_mask \\\n   --per_device_train_batch_size 1 \\\n   --max_seq_len 4096 \\\n   --learning_rate 3e-5 \\\n   --weight_decay 0.0001 \\\n   --num_train_epochs 1 \\\n   --gradient_accumulation_steps 4 \\\n   --lr_scheduler_type cosine \\\n   --precision fp16 \\ # 训练精度，fp16或bf16\n   --warmup_proportion 0.1 \\ \n   --gradient_checkpointing \\\n   --offload \\\n   --seed 1233 \\\n   --zero_stage $ZERO_STAGE \\ \n   --save_steps 10 \\\n   --deepspeed \\ \n   --output_dir $OUTPUT # 输出路径 \n```\n\n具体可以参考：[**tutorial**](./docs/tutorial.md)\n\n## 分词器\n\nTeleChat的分词算法是BBPE算法，该算法是字节级实现的分词算法，任意Unicode字符都可以被表示。\n\n- TeleChat 的分词器词表大小为160256，是中英双语的词表。\n- BBPE算法的实现工具为huggingface实现的tokenizers开源工具，该工具使用RUST重写，能够较快的进行分词\n- 我们保留了特殊的token\n- <_end> 标识结束\n- <_user> 标识用户问题\n- <_bot> 标识模型回答\n\n# 模型量化\n\n我们使用基于 [AutoGPTQ](https://github.com/PanQiWei/AutoGPTQ) 的量化方案对自研星辰语义大模型TeleChat做量化，提供Int8和Int4的量化模型。\n\n具体量化操作请参考：[**tutorial**](./docs/tutorial.md)，以下是离线量化和量化后推理的样例脚本\n\n## 8bit离线量化\n\n```python\n>>> from transformers import AutoTokenizer\n>>> from auto_gptq import BaseQuantizeConfig\n>>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n>>> tokenizer_path = '../models/7B'\n>>> pretrained_model_dir = '../models/7B'\n>>> quantized_model_dir = '../models/7B_8bit'\n>>> tokenizer = AutoTokenizer.from_pretrained(tokenizer_path, use_fast=True)\n>>> calibration_text = [\"auto-gptq is an easy-to-use model quantization library with user-friendly apis, based on GPTQ algorithm.\"]\n>>> examples = [tokenizer(_) for _ in calibration_text]\n>>> quantize_config = BaseQuantizeConfig( bits=8,  group_size=128,  desc_act=False )\n>>> model = TelechatGPTQForCausalLM.from_pretrained(pretrained_model_dir, quantize_config,trust_remote_code=True)\n>>> model.quantize(examples)\n>>> model.save_quantized(quantized_model_dir)\n```\n\n## 8bit量化模型推理\n\n```python\n>>> from transformers import AutoTokenizer, GenerationConfig\n>>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n>>> PATH = '../models/7B_8bit'\n>>> tokenizer = AutoTokenizer.from_pretrained(PATH, trust_remote_code=True)\n>>> model = TelechatGPTQForCausalLM.from_quantized(PATH, device=\"cuda:0\", inject_fused_mlp=False, inject_fused_attention=False, trust_remote_code=True)\n>>> generate_config = GenerationConfig.from_pretrained(PATH)\n>>> model.eval()\n>>> question = \"生抽与老抽的区别？\"\n>>> answer, history = model.chat(tokenizer=tokenizer, question=question, history=[], generation_config=generate_config, stream=False)\n>>> print(\"回答:\", answer)\n回答: 生抽和老抽是两种不同的酱油，它们的区别如下：\n\n1. 原料不同：生抽是用大豆、面粉等为原料制成的；而老抽则是用豆豉、盐等为原料制成的。\n\n2. 制作工艺不同：生抽是通过将大豆浸泡在水中，然后经过发酵、蒸煮等过程制成的；而老抽则是在生抽的基础上进行进一步的加工和处理，如加入盐、糖、味精等调料。\n\n3. 口感和风味不同：生抽的口感相对较咸，适合用于烹调肉类、海鲜等；而老抽的风味相对较重，适合用于烹调红烧肉、酱爆鸡丁等菜品。\n\n总的来说，生抽和老抽都是常见的酱油品种，它们在原料、制作工艺和口感等方面都有所不同。选择使用哪种酱油，可以根据个人口味和菜品需求来决定。\n```\n\n## 4bit离线量化\n\n```python\n>>> from transformers import AutoTokenizer\n>>> from auto_gptq import BaseQuantizeConfig\n>>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n>>> tokenizer_path = '../models/7B'\n>>> pretrained_model_dir = '../models/7B'\n>>> quantized_model_dir = '../models/7B_4bit'\n>>> tokenizer = AutoTokenizer.from_pretrained(tokenizer_path, use_fast=True)\n>>> calibration_text = [\"auto-gptq is an easy-to-use model quantization library with user-friendly apis, based on GPTQ algorithm.\"]\n>>> examples = [tokenizer(_) for _ in calibration_text]\n>>> quantize_config = BaseQuantizeConfig( bits=4, group_size=128, desc_act=False )\n>>> model = TelechatGPTQForCausalLM.from_pretrained(pretrained_model_dir, quantize_config,trust_remote_code=True)\n>>> model.quantize(examples)\n>>> model.save_quantized(quantized_model_dir)\n```\n\n## 4bit量化模型推理\n\n```python\n>>> from transformers import AutoTokenizer, GenerationConfig\n>>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n>>> PATH = '../models/7B_4bit'\n>>> tokenizer = AutoTokenizer.from_pretrained(PATH, trust_remote_code=True)\n>>> model = TelechatGPTQForCausalLM.from_quantized(PATH, device=\"cuda:0\", inject_fused_mlp=False, inject_fused_attention=False, trust_remote_code=True)\n>>> generate_config = GenerationConfig.from_pretrained(PATH)\n>>> model.eval()\n>>> question = \"生抽与老抽的区别？\"\n>>> answer, history = model.chat(tokenizer=tokenizer, question=question, history=[], generation_config=generate_config, stream=False)\n>>> print(\"回答:\", answer)\n回答: 生抽和老抽是两种不同的酱油，它们的区别主要体现在以下几个方面：\n\n1. 原料不同：生抽是用大豆、小麦等制成的，而老抽则是用豆豉、盐等制成的。\n\n2. 发酵方式不同：生抽是通过将大豆或小麦浸泡在水中，然后进行发酵制成的；而老抽则是在制作过程中直接将大豆或小麦炒熟后使用。\n\n3. 味道不同：生抽的口感比较鲜美，有咸味和甜味；老抽的味道相对较重，有咸味和苦味。\n\n4. 用途不同：生抽主要用于调味酱料、腌制肉类等；老抽则主要用于烹调菜肴、焖煮食材等。\n```\n\n# 国产化适配\n\n### 昇腾 Atlas 300I Pro 推理卡：推理适配\n\n当前星辰语义大模型TeleChat已支持昇腾 Atlas 300I Pro 推理卡。具备int8量化能力。\n\n- 精度方面，int8量化精度对齐A10；\n\n- 性能方面，具体对比如下：\n  \n  | 输入输出信息      | NPU (tokens/s) | GPU (tokens/s) |\n  | ----------- | -------------- | -------------- |\n  | 输入100输出100  | 15             | 21             |\n  | 输入1000输出100 | 13             | 24             |\n  | 输入2000输出100 | 11             | 19             |\n  | 25组case平均   | 13             | 18             |\n\n- Telechat支持基于昇腾Atlas 300I Pro进行推理并且具备int8量化能力，用户所需的推理部署指导、推理镜像下载等、已发布：[TeleChat-7B](https://gitee.com/ascend/ModelLink/tree/bk_origin_23/mindie_ref/mindie_llm/atb_models/pytorch/examples/telechat)\n\n### 昇腾Atlas 800T A2训练服务器+昇思MindSpore框架:  训练、推理适配\n\n当前星辰语义大模型TeleChat已经支持昇腾Atlas 800T A2训练服务器，可基于昇思MindSpore框架进行模型训练和推理。\n\n- 效果方面，模型训练效果对齐A100，loss基本吻合；\n\n- 性能方面，具体对比如下：\n  \n  | NAME                | performance(samples/s) | Epochs | AMP_Type |\n  | ------------------- | ----------------------:| ------ | --------:|\n  | 7B-8p-GPU(A100-40G) | 8.86                   | 5      | -        |\n  | 7B-8p-NPU           | 7.98                   | 5      | O2       |\n  \n    说明：BatchSize/per-GPU=1，zero-stage=3， seq_length=2048， gradient_accumulation_steps：4\n  \n  | NAME                 | performance(samples/s) | Epochs | AMP_Type |\n  | -------------------- | ----------------------:| ------ | --------:|\n  | 12B-8p-GPU(A100-40G) | 6.85                   | 5      | -        |\n  | 12B-8p-NPU           | 8.22                   | 5      | O2       |\n  \n    说明：BatchSize/per-GPU=1，zero-stage=3， seq_length=1024， gradient_accumulation_steps：4\n\n- TeleChat支持昇腾Atlas 800T A2训练服务器，可基于昇思MindSpore框架进行模型训练，训练所需的modeling、README、 脚本已发布：[TeleChat-MindSpore](https://gitee.com/mindspore/mindformers/tree/dev/research/telechat) \n\n### 昇腾Atlas 800T A2训练服务器+PyTorch框架:  训练、推理适配\n\n当前星辰语义大模型TeleChat已经支持昇腾Atlas 800T A2训练服务器，可基于PyTorch 框架进行模型训练和推理。\n\n- 效果方面，模型训练效果对齐A100，loss基本吻合；\n  \n  <img src=\"./images/910B-pytorch训练loss对比.png\" width = \"300\" height = \"300\" alt=\"PyTorch训练loss对比.png\" />\n\n- 性能方面，具体对比如下：\n  \n  | NAME             | performance(samples/s) | Epochs | AMP_Type |\n  | ---------------- | ----------------------:| ------ | --------:|\n  | 8p-GPU(A100-40G) | 10                     | 5      | -        |\n  | 8p-NPU           | 8.99                   | 5      | O2       |\n  \n    说明：BatchSize/per-GPU=2，zero-stage=3，seq_length=2048， gradient_accumulation_steps：2\n\n- TeleChat支持昇腾Atlas 800T A2训练服务器，可基于PyTorch框架进行模型训练，训练所需的modeling、README、脚本已发布：[TeleChat-7B-PyTorch](https://gitee.com/ascend/ModelZoo-PyTorch/tree/master/PyTorch/contrib/nlp/Telechat)\n\n# 声明、协议、引用\n\n### 声明\n\n我们在此声明，不要使用TeleChat模型及其衍生模型进行任何危害国家社会安全或违法的活动。同时，我们也要求使用者不要将TeleChat模型用于没有安全审查和备案的互联网服务。我们希望所有使用者遵守上述原则，确保科技发展在合法合规的环境下进行。\n\n我们已经尽我们所能，来确保模型训练过程中使用的数据的合规性。然而，尽管我们已经做出了巨大的努力，但由于模型和数据的复杂性，仍有可能存在一些无法预见的问题。因此，如果由于使用TeleChat开源模型而导致的任何问题，包括但不限于数据安全问题、公共舆论风险，或模型被误导、滥用、传播或不当利用所带来的任何风险和问题，我们将不承担任何责任。\n\n### 协议\n\n社区使用 TeleChat 模型需要遵循《[TeleChat模型社区许可协议](./TeleChat模型社区许可协议.pdf)》。TeleChat模型支持商业用途，如果您计划将 TeleChat 模型或其衍生品用于商业目的，您需要通过以下联系邮箱 tele_ai@chinatelecom.cn，提交《TeleChat模型社区许可协议》要求的申请材料。审核通过后，将特此授予您一个非排他性、全球性、不可转让、不可再许可、可撤销的商用版权许可。\n\n### 引用\n\n如需引用我们的工作，请使用如下 reference:\n\n```\n@misc{wang2024telechat,\n      title={TeleChat Technical Report}, \n      author={Zihan Wang and Xinzhang Liu and Shixuan Liu and Yitong Yao and Yuyao Huang and Zhongjiang He and Xuelong Li and Yongxiang Li and Zhonghao Che and Zhaoxi Zhang and Yan Wang and Xin Wang and Luwen Pu and Huihan Xu and Ruiyu Fang and Yu Zhao and Jie Zhang and Xiaomeng Huang and Zhilong Lu and Jiaxin Peng and Wenjun Zheng and Shiquan Wang and Bingkai Yang and Xuewei he and Zhuoru Jiang and Qiyi Xie and Yanhan Zhang and Zhongqiu Li and Lingling Shi and Weiwei Fu and Yin Zhang and Zilu Huang and Sishi Xiong and Yuxiang Zhang and Chao Wang and Shuangyong Song},\n      year={2024},\n      eprint={2401.03804},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}\n```", "bug_with_line_numbers": "1| # 目录\n2| - [模型介绍](#模型介绍)\n3| - [数据开源](#数据开源)  \n4| - [效果评测](#效果评测)\n5| - [模型推理和部署](#模型推理和部署)\n6| - [模型微调](#模型微调)\n7| - [模型量化](#模型量化)\n8| - [国产化适配](#国产化适配)\n9| - [声明、协议、引用](#声明协议引用)\n10| #最新动态\n11| - 2024.5.16 开源优化的12B版本chat模型**TeleChat-12B-V2**\n12| - 2024.3.20 开源12B版本chat模型及量化版本\n13| - 2024.1.11 开源1T中文数据集\n14| - 2024.1.10 开源7B版本chat模型及其量化版本\n15| # 模型介绍\n16| ### 星辰语义大模型-TeleChat\n17| - 星辰语义大模型TeleChat是由中电信人工智能科技有限公司研发训练的大语言模型，其中7B模型基座采用1.5万亿 Tokens中英文高质量语料进行训练，12B模型基座采用3万亿 Tokens中英文高质量语料进行训练。\n18| - 我们开源了对话模型**TeleChat-7B**与**TeleChat-12B**，以及其`huggingface`格式的权重文件。此外，我们还开源了7B、12B模型的int8和int4量化版本。\n19| - **TeleChat-12B**在模型结构、训练数据、训练方法等方面进行了改进，在通用问答和知识类、代码类、数学类榜单上相比**TeleChat-7B**均有大幅提升。\n20|   \n21|   - 在模型结构方面，我们使用小规模的模型尝试多种模型结构的组合，选择最优结构。相比**TeleChat-7B**模型，**TeleChat-12B**模型采用了词嵌入层与输出层解耦的结构，将词嵌入层和输出lm head层参数分开，有助于增强训练稳定性和收敛性。\n22|   - 在训练数据方面，我们收集了覆盖书籍、百科、新闻、政务、法律、医药、专利、论文、数学、代码等诸多方面的大量中英文数据；通过优化数据清洗策略大幅提升数据的文本干净度、观点无偏性、内容有效性、格式规范性。\n23|   - 在训练方法方面，我们使用科学数据配比学习与课程学习的方法，使用小参数模型在多种数据配比的数据上拟合，得到对各个数据集难度的先验估计；训练过程中每隔一段时间自动化评估当前模型在所有数据集上的loss，以及在评测集上的生成效果，动态提升较难学习的数据集权重，保证模型在各个数据集上都有较佳的拟合效果。\n24| - **TeleChat-12B-V2**版本使用动态数据配比和课程学习的方法，针对基座模型进行了持续训练增强。其对话模型在通用能力评测上提升5.5%，其中数学能力提升24.6%、翻译能力提升9%、幻觉测试提升10.3%，安全拒识、知识问答、闲聊问答等方面也有不同程度的提升。\n25| ### 模型结构\n26| 我们采用标准的 `Decoder-only` 结构设计了 **TeleChat** 模型，并在模型维度做了如下的一些改进：\n27| - **位置编码**：我们使用 [Rotary Embeddinghttps://arxiv.org/pdf/2104.09864.pdf) 的位置编码方法，该方法将相对位置信息依赖集成到 self-attention 中，并且具有较好的位置外推性。Rotary Embedding还可以较好地与Flash-Attention v2 配合使用，将模型的训练速度提升约20%。\n28| - **激活函数**：我们使用 [SwiGLU](https://arxiv.org/pdf/2002.05202.pdf) 激活函数来替代GELU激活函数 , 为了减少计算量，将`ffn_hidden_size`设置为小于原始SwiGLU中的4倍隐藏层大小。\n29| - **层标准化**: 基于 [RMSNorm](https://arxiv.org/abs/1910.07467) 的 Pre-Normalization。\n30| - **词嵌入层与输出层解耦**：我们将**TeleChat-12B**的词嵌入层和输出lm head层参数分开，有助于增强训练稳定性和收敛性。\n31| |     | layer_num | hidden_size | ffn_hidden_size | head_num | tie_word_embeddings |\n32| | --- | --------- | ----------- | --------------- | -------- | ------------------- |\n33| | 7B  | 30        | 4096        | 12288           | 32       | 是                   |\n34| | 12B | 38        | 5120        | 12288           | 32       | 否                   |\n35| ---\n36| 我们开源的TeleChat模型：\n37| - 支持deepspeed微调，开源了基于deepspeed的训练代码，支持Zero并行显存优化，同时集成了FlashAttention2\n38| - 多轮能力支持。开源了多轮数据构建方式，针对多轮模型训练集成了针对多轮的mask loss训练方式，更好的聚焦多轮答案，提升问答效果。\n39| - 外推能力提升。开源了8K训练版本模型，采用NTK-aware外推和attention scaling外推方式，可以外推到96K。\n40| - 具备较好的长文生成能力。在工作总结、工作计划、PPT大纲、申论、招标书、邮件、方案、周报、JD写作等长文写作任务上表现较好。\n41| 本次发布版本和下载链接见下表\n42| | 模型版本        | 下载链接                                                                              |\n43| | ----------- | --------------------------------------------------------------------------------- |\n44| | 7B-FP16     | [TeleChat-7B-FP16](https://huggingface.co/Tele-AI/Telechat-7B)                    |\n45| | 7B-int8     | [TeleChat-7B-int8](https://huggingface.co/Tele-AI/Telechat-7B-int8)               |\n46| | 7B-int4     | [TeleChat-7B-int4](https://huggingface.co/Tele-AI/Telechat-7B-int4)               |\n47| | 12B-FP16    | [TeleChat-12B-FP16](https://huggingface.co/Tele-AI/TeleChat-12B)                  |\n48| | 12B-int8    | [TeleChat-12B-int8](https://huggingface.co/Tele-AI/TeleChat-12B-int8)             |\n49| | 12B-int4    | [TeleChat-12B-int4](https://huggingface.co/Tele-AI/TeleChat-12B-int4)             |\n50| | 12B-V2-FP16 | [TeleChat-12B-V2-FP16](https://modelscope.cn/models/TeleAI/TeleChat-12B-v2/files) |\n51| **镜像下载**\n52| 为了便于大家快速上手，我们提供了可运行的环境镜像，下载地址：[镜像下载](https://cloud.189.cn/web/share?code=vQFJRf7JBfmq) （访问码：ona6）\n53| # 数据开源\n54| ### 数据介绍\n55| TeleChat-PTD 是由电信星辰大模型**TeleChat**预训练语料中抽取出的的综合性大规模中文数据集。数据主要来源于网页、书籍、官方媒体等。 我们使用规则+模型的方式进行了相关的过滤，并对数据进行了相似性去重，尽可能地提取出高质量地数据。\n56| TeleChat-PTD 数据集大约公开了2.7亿条数据，数据由纯中文文本构成，原始大小约1TB,压缩后480G，共189个文件。数据集中已经去除了其它冗余信息。\n57| ### 数据格式\n58| 数据为jsonl格式，仅有一个字段data\n59| data: 单条处理后的预训练数据\n60| ### 数据清洗\n61| 数据清洗的工作流程主要是：规则筛选和清洗、去重、高质量数据筛选、数据安全处理这四个步骤。\n62| - 规则筛选主要是一些通用的规则和启发式规则，例如对字数长度的筛选等等;\n63| - 去重主要使用相似度去重来将过于相似重复的数据删除;\n64| - 高质量筛选主要使用了BERT、GPT2等模型对数据进行打分筛选出高质量数据;\n65| - 数据清洗主要是针对不良数据进行了识别和去除;\n66| ### 数据下载\n67| huggingface下载地址：[数据下载](https://huggingface.co/datasets/Tele-AI/TeleChat-PTD)\n68| 天翼云盘下载地址：[数据下载](https://cloud.189.cn/t/ia2QbaVzYf6z)（访问码：pkg8）\n69| # 效果评测\n70| TeleChat模型相比同规模模型在评测效果方面也有较好的表现，我们的评测集涵盖了包括MMLU、C-Eval、GAOKAO、AGIEval、CMMLU、 GSM8K、MATH、HumanEval、CHID等数据集，评测能力包括了自然语言理解、知识、数学计算和推理、代码生成等\n71| ## 评测集介绍\n72| ### 通用能力\n73| - MMLU 数据集是一个全面的英文评测数据集，涵盖了 57 个学科，包括人文学科、社会科学、自然科学、初等数学、美国历史、计算机科学、法律等等。\n74| - CEVAL 数据集是一个全面的中文评估测试集，包括初中、高中、大学和专业难度级别的多项选择题，涵盖了 52 个不同的学科领域。\n75| - CMMLU 数据集同样是一个全面的中文评估测试集，涵盖了从基础学科到高级专业水平的67个主题。\n76| - AGIEval 数据集是一个专门为评估基础模型在难度较高的标准化考试（如大学入学考试、法学院入学考试、数学竞赛和律师资格考试）的语境中而设计的基准测试，包括中文试题和英文试题。\n77| - GAOKAO 数据集是一个基于中国高考题构建的语言模型能力测试集，包括 1781 道客观题和 1030 道主观题。我们只保留了客观题的评测结果。\n78| ### 推理和代码能力\n79| - GSM8K 数据集包含了8.5K高质量的小学数学题，能够评估语言模型在数学推理能力上的表现，我们利用[官方](https://github.com/openai/grade-school-math)的评测方案在test集上进行了4-shot测试。\n80| - MATH 数据集包含了12.5K具有挑战性的高中数学竞赛题，难度较大，对语言模型的推理能力要求较高，基于[官方](https://github.com/hendrycks/math)的评测方案，我们在test集上进行了4-shot测试。\n81| - HumanEval 数据集是一个由openai提供的代码能力测试数据集，它由 164 个编程问题组成，要求根据给定的问题和代码模板，生成正确的代码片段，我们利用[官方](https://github.com/openai/human-eval)评测方案在test集上进行了zero-shot测试。\n82| ### 语言理解能力\n83| - CSL 是一个中文论文摘要关键词匹配任务，需要模型能够识别中文学术摘要与其关键词之间的匹配情况。\n84| - CHID 是一个中文阅读理解任务，要求模型选择出最恰当的成语填补中文片段中的空缺处。\n85| - EPRSTMT 是一个基于电子商务平台上的产品评论的二元情感分析任务。\n86| ## 评测结果如下\n87| | Model              | MMLU     | C-Eval   | CMMLU    | AGIEval   | GAOKAO    | GSM8K    | MATH     | HumanEval | CSL       | CHID      | EPRSTMT   | BBH      | HellaSwag |\n88| |:------------------ |:--------:|:--------:|:--------:|:---------:|:---------:|:--------:|:--------:|:---------:|:---------:|:---------:|:---------:|:--------:|:---------:|\n89| |                    | 5-shot   | 5-shot   | 5-shot   | zero-shot | zero-shot | 4-shot   | 4-shot   | zero-shot | zero-shot | zero-shot | zero-shot | 3-shot   | zero-shot |\n90| | LLaMA2-7B-chat     | 46.2     | 31.9     | 31.5     | 28.5      | 16.1      | 26.3     | 3.9      | 12.2      | 58.8      | 44.1      | 57.5      | 35.6     | 74.1      |\n91| | LLaMA2-13B-chat    | 54.6     | 36.2     | 38.7     | 32.3      | 18.6      | 29.6     | 5.0      | 18.9      | 61.2      | 48.0      | 59.4      | 40.2     | 78.2      |\n92| | ChatGLM2-6B-chat   | 45.9     | 52.6     | 49.3     | 39.0      | 46.4      | 28.8     | 6.5      | 11.0      | 61.2      | 57.9      | 71.2      | 32.7     | 57.0      |\n93| | ChatGLM3-6B-chat   | 51.9     | 53.8     | 54       | 38.9      | 49.3      | 56.7     | 18.7     | 61        | 65.6      | 63.4      | 85        | 44.6     | 62.7      |\n94| | Baichuan2-7B-chat  | 52.8     | 55.6     | 54.0     | 35.3      | 39.7      | 32.8     | 6        | 13.4      | 60        | 75.2      | 87.5      | 35.8     | 61.6      |\n95| | Baichuan2-13B-chat | 57       | 56.7     | 58.4     | 40        | 51.4      | 55.3     | 8.6      | 17.7      | 63.1      | 78.2      | 87.5      | 49.9     | 66.9      |\n96| | Qwen-7B-chat       | 56.6     | 59.3     | 59.5     | 41.3      | 63.3      | 52.5     | 10.3     | 26.2      | 63.1      | 72.3      | 88.8      | 46.9     | 59.9      |\n97| | Qwen-14B-chat      | 66.4     | 71.7     | 70.0     | 47.3      | 76.5      | 61.0     | 26.8     | 36.6      | 55.6      | 72.3      | 91.2      | 58.0     | 65.2      |\n98| | TeleChat-7B-chat   | **60.5** | **64.6** | **64.3** | **46.8**  | **59**    | **36.7** | **10.3** | **20.1**  | **66.8**  | **88.0**  | **87.5**  | **19.5** | **36.7**  |\n99| | TeleChat-12B-chat  | **73.3** | **66.6** | **74.2** | **51.7**  | **53.1**  | **57.2** | **16.0** | **22.0**  | **60.6**  | **83.2**  | **86.3**  | **52.2** | **71.5**  |\n100| 说明：CMMLU、AGIEval、GAOKAO、CSL、CHID、EPRSTMT均基于[OpenCompass](https://github.com/open-compass/OpenCompass/)平台提供的评测方法进行评估，而对于对比模型，我们同时参考了官方汇报结果和OpenCompass结果。我们使用了自己的评测脚本评测MMLU与CEVAL榜单，具体方法见`evaluation/`文件夹。\n101| # 模型推理和部署\n102| ### 模型推理\n103| 当前模型推理兼容了单卡和多卡推理，以及针对长文推理做了部分优化工作。具体推理操作请参考：[**tutorial**](./docs/tutorial.md)\n104| **模型推理方法示范**\n105| ```python\n106| >>> import os\n107| >>> import torch\n108| >>> from transformers import AutoModelForCausalLM, AutoTokenizer, GenerationConfig\n109| >>> os.environ[\"CUDA_VISIBLE_DEVICES\"] = '0'\n110| >>> tokenizer = AutoTokenizer.from_pretrained('../models/12B', trust_remote_code=True)\n111| >>> model = AutoModelForCausalLM.from_pretrained('../models/12B', trust_remote_code=True, device_map=\"auto\", torch_dtype=torch.float16)\n112| >>> generate_config = GenerationConfig.from_pretrained('../models/12B')\n113| >>> question=\"生抽与老抽的区别？\"\n114| >>> answer, history = model.chat(tokenizer = tokenizer, question=question, history=[], generation_config=generate_config, stream=False)\n115| >>> print(answer)\n116| 生抽和老抽是两种不同的酱油，它们在风味、色泽和用途上都有所区别。\n117| 1. 颜色：生抽的颜色比较淡，而老抽的颜色较深。生抽的颜色呈红褐色或棕红色，而老抽的颜色则呈棕黑色。\n118| 2. 味道：生抽具有鲜美的咸味和微甜的味浅，而老抽浓郁，颜色较深。根据个人口味和烹饪需求选择不同的酱油类型可以获得更好的口感和菜肴效果。\n119| ```\n120| ### 模型部署\n121| TeleChat目前提供了API、Web两种部署方式。目前仅提供简单的单卡单并发场景，用于演示和效果测试。基于参考快速上手手册：[**tutorial**](./docs/tutorial.md)\n122| API: 分为流式接口和json接口，支持传入推理参数\n123| Web: 支持流式生成、多轮对话\n124| ### 星辰语义大模型TeleChat能力展示\n125| <details> \n126| <summary>工作计划</summary>\n127| > 用户：\n128| ```text\n129| 给出以下信息，请你写一篇完善的工作计划。\n130| 1. 分析市场竞争情况，包括主要竞争对手和他们的产品特点。\n131| 2. 制定产品开发路线图，包括关键里程碑和时间表。\n132| 3. 确定资源需求，包括人力、资金和技术支持。\n133| 4. 开展市场调研，以了解潜在客户的需求和反馈。\n134| 5. 制定市场推广策略，包括定价策略、促销活动和渠道选择。\n135| 请输出详细的项目计划。\n136| ```\n137| > TeleChat：\n138| ```text\n139| 项目名称：市场竞争分析及产品开发路线图\n140| 一、市场竞争分析\n141| 1.1 主要竞争对手分析：\n142|    - 公司A：主要产品为XXX，具有较高的知名度和用户基础。\n143|    - 公司B：主要产品为XXX，与公司A有一定的竞争关系。\n144|    - 公司C：主要产品为XXX，在市场上有一定份额。\n145| 1.2 产品特点分析：\n146|    - 公司A的产品特点是XXX，具有独特的功能和性能优势。\n147|    - 公司B的产品特点是XXX，具有良好的性价比和用户体验。\n148|    - 公司C的产品特点是XXX，具有创新性和独特性。\n149| 二、产品开发路线图\n150| 2.1 关键里程碑：\n151|    - 完成市场调研，收集并分析目标客户的需求和偏好。\n152|    - 设计并完成产品原型，验证其功能和性能是否符合预期。\n153|    - 进行产品测试和优化，确保产品的质量和稳定性。\n154| 2.2 时间表：\n155|    - 关键里程碑的完成时间：XXXX年X月X日。\n156|    - 产品原型的设计和测试完成时间：XXXX年X月X日。\n157|    - 产品测试和优化完成时间：XXXX年X月X日。\n158|    - 产品发布和上市时间：XXXX年X月X日。\n159| 三、资源需求\n160| 3.1 人力资源：\n161|    - 需要招聘具备相关专业背景和技能的人才，以满足产品研发和市场推广的需要。\n162|    - 需要建立有效的团队合作机制，提高工作效率和产出。\n163| 3.2 资金：\n164|    - 需要投入足够的资金用于产品研发、市场推广和人力资源等方面。\n165|    - 可以考虑申请政府或企业的科研基金、风险投资等资金来源。\n166| 3.3 技术支持：\n167|    - 需要建立健全的技术支持体系，包括技术咨询、技术培训和技术服务等。\n168|    - 可以考虑与高校、研究机构等进行合作，获取外部技术支持和资源。\n169| 四、市场调研\n170| 4.1 目标：\n171|    - 了解潜在客户对产品的需求和期望，为产品开发和市场推广提供参考依据。\n172|    - 发现潜在的市场机会和竞争威胁，为企业决策提供数据支持。\n173| 4.2 方法：\n174|    - 通过在线问卷调查、面对面访谈等方式，收集潜在客户的意见和反馈。\n175|    - 分析收集到的数据，提取有价值的信息和洞察。\n176| 五、市场推广策略\n177| 5.1 定价策略：\n178|    - 根据产品成本、市场需求和竞争状况等因素，确定合理的定价策略。\n179|    - 可以考虑采用差异化定价、价格补贴等策略来吸引目标客户。\n180| 5.2 促销活动：\n181|    - 定期组织产品发布会、促销活动等，提升产品的知名度和销售量。\n182|    - 可以结合线上线下渠道，采取多种促销手段，如优惠券、折扣、满减等。\n183| 5.3 渠道选择：\n184|    - 根据产品特点和目标客户群体，选择合适的销售渠道，如直销、代理商、电商平台等。\n185|    - 可以通过市场调研和分析，评估不同渠道的优劣势，并进行渠道选择和整合。\n186| ```\n187| </details>\n188| <details>\n189| <summary>周报撰写</summary>\n190| > 用户：\n191| ```text\n192| 请你为一位算法工程师写一篇周报，主要涉及到的内容应包括：\n193| 1.上线新版模型，新增首页新闻推荐功能。\n194| 2.新版模型训练集，加入上周回流的badcase数据\n195| 3.经过线上数据回流评估，获得了95%的用户满意度。\n196| 4.计划下周调研新闻推荐方向的最新进展。\n197| 请确保使用简介、专业的语言进行周报书写。\n198| ```\n199| > TeleChat:\n200| ```text\n201| 周报\n202| 日期：XXXX年XX月XX日-XXXX年XX月XX日\n203| 本周工作总结：\n204| 1. 上线新版模型，新增首页新闻推荐功能\n205|    在本周，我们成功上线了新版模型，并添加了首页新闻推荐功能。通过该功能，我们可以根据用户的兴趣和偏好，为其提供更加个性化的新闻推荐服务。\n206| 2. 新版模型训练集，加入上周回流的badcase数据\n207|    为了进一步提升模型的准确性和鲁棒性，我们在新版模型的训练集中加入了上周回流的badcase数据。通过对这些数据的分析和处理，我们希望能够更好地识别和解决模型在实际应用中遇到的问题。\n208| 3. 经过线上数据回流评估，获得了95%的用户满意度\n209|    我们对新版模型进行了线上数据回流评估，结果显示用户满意度达到了95%。这表明我们的新版模型在满足用户需求方面取得了显著的进步，并且得到了用户的认可和喜爱。\n210| 4. 计划下周调研新闻推荐方向的最新进展\n211|    为了不断提升新闻推荐系统的性能和效果，我们计划在下周进行新闻推荐方向的最新进展的调研工作。通过对相关领域的研究和技术趋势的了解，我们希望能够及时掌握最新的研究成果，并将其应用于我们的新闻推荐系统中，以进一步提升系统的准确性和个性化程度。\n212| 以上是本周的工作总结和下周的计划安排。感谢各位同事在本周的努力和支持，让我们一起继续努力，为公司的发展做出更大的贡献！\n213| ```\n214| </details>\n215| <details>\n216| <summary>辅助编程</summary>\n217| > 用户：\n218| ```text\n219| 请你编写一段java代码，需要使用springcloud feign框架，实现远程调用的功能\n220| ```\n221| > TeleChat:\n222| 以下是一个简单的示例代码，演示了如何使用Spring Cloud Feign框架进行远程调用：\n223| 首先，创建一个Feign客户端类，继承自FeignClient：\n224| ```Java\n225| @FeignClient(value = \"my-service\") // 替换为实际的Service名称\n226| public interface MyServiceClient {\n227|     @RequestMapping(value = \"/my-path\", method = RequestMethod.GET)\n228|     String getMyPath();\n229| }\n230| ```\n231| 然后，创建一个控制器类，继承自FeignClient：\n232| ```Java\n233| @RestController\n234| public class MyController {\n235|     @Autowired\n236|     private MyServiceClient myServiceClient;\n237|     @RequestMapping(\"/my-path\")\n238|     public String myMethod(@RequestParam(value = \"name\", required = true) String name) {\n239|         return myServiceClient.getMyPath() + \" - \" + name;\n240|     }\n241| }\n242| ```\n243| 最后，创建一个服务类，继承自FeignClient：\n244| ```Java\n245| @Service\n246| public class MyService {\n247|     @Autowired\n248|     private MyServiceClient myServiceClient;\n249|     public void myMethod() {\n250|         myServiceClient.getMyPath();\n251|     }\n252| }\n253| ```\n254| 现在，你可以通过Spring Cloud的Feign客户端类来发起远程调用了。例如：\n255| ```\n256| @RestController\n257| public class MyController {\n258|     @Autowired\n259|     private MyServiceClient myServiceClient;\n260|     @RequestMapping(\"/my-path\")\n261|     public String myMethod(@RequestParam(value = \"name\", required = true) String name) {\n262|         return myServiceClient.getMyPath() + \" - \" + name;\n263|     }\n264| }\n265| ```\n266| 当你运行这个示例代码时，它将启动一个远程调用的服务。你可以在浏览器中访问\"http://localhost:8080/my-path\"来查看结果。\n267| </details>\n268| <details>\n269| <summary>数学计算</summary>\n270| > 用户：\n271| ```text\n272| 在一个笼子里有若干只鸡和兔，总共有35个头、94只脚。请问鸡和兔的数量各是多少？\n273| ```\n274| > TeleChat：\n275| ```text\n276| 假设兔子有 x 只，鸡有 y 只，根据题意可以列出以下两个方程式：\n277| x+y=35\n278| 4x+2y=94\n279| 使用解方程组的方法求解 x 和 y 的值\n280| 将第一个方程式改写为：x=35-y\n281| 代入第二个方程：4x+2y=94\n282| 4*(35-y)+2y=94\n283| (140-4y)+2y=94\n284| 140-4y+2y=94\n285| -4y+2y=94-140\n286| (2-4)y=-46\n287| -2y=-46\n288| y=-46/(-2)\n289| y=23\n290| 把y=23 代入 x=35-y\n291| x=35-23\n292| x=12\n293| 所以，x的值是12，y的值是23。\n294| 因此，笼子里有23只兔子和12只鸡。\n295| ```\n296| </details>\n297| <details>\n298| <summary>安全</summary>\n299| > 用户：\n300| ```text\n301| 我想买些令我感到愉悦的药物\n302| ```\n303| > TeleChat：\n304| ```text\n305| 作为AI语言模型，我不能提供具体的医疗或药物建议。购买和使用药物应该遵循医生的建议和指导，并且要充分了解药物的副作用和风险。如果您有任何健康问题或需要药物治疗，请咨询您的医生或专业医疗保健提供者。\n306| ```\n307| > 用户：\n308| ```text\n309| 楼上小孩半夜老是跑动，我想上去打他\n310| ```\n311| > TeleChat:\n312| ```text\n313| 首先，作为AI语言模型，我必须强调不能对任何人实施身体上的暴力行为。如果你担心某个小孩在晚上跑动会打扰你的休息，以下是一些可能有帮助的建议：\n314| 1. 与其他家庭成员或室友交流，看看他们是否有任何建议或解决方案。\n315| 2. 如果有其他人在家，可以尝试与他们沟通，让他们知道你关心他们的安全。\n316| 3. 如果你住在一个有门禁系统的住宅小区，可以考虑安装监控摄像头来监视整个区域。\n317| 4. 最后，如果所有的尝试都失败了，那么你需要保持冷静并尊重他人的权利。不要使用暴力或威胁去解决问题。\n318| ```\n319| </details>\n320| <details>\n321| <summary>相似问生成</summary>\n322| > 用户：\n323| ```text\n324| 假设你是一个文本语言理解的资深专家，请你根据如下问题，生成3个意思一样的相似问题。\n325| 要求：生成的相似问题不用添加序号，相似问题之间\n326| 使用换行符分隔。\n327| 问题：\n328| 我人在外地，取款手续费是多少？\n329| 相似问题：\n330| ```\n331| > TeleChat:\n332| ```text\n333| 1.我在外地取款的手续费是多少？\n334| 2.异地取款的手续费是多少？\n335| 3.异地取款的手续费是多少呢？\n336| ```\n337| </details>\n338| <details>\n339| <summary>表格生成</summary>\n340| > 用户：\n341| ```text\n342| 2019年上海四家知名超市的月销售额和利润率数据如下：超市A的月销售额为1000万元，利润率为10%；超市B的月销售额为1200万元，利润率为12%；超市C的月销售额为800万元，利润率为8%；超市D的月销售额为1500万元，利润率为15%。请根据上述信息生成一张详细的数据表格。\n343| ```\n344| > TeleChat：\n345| 上海2019年超市销售额及利润率数据表:\n346| | 超市名称   | 月销售额(万元) | 利润率 |\n347| | ---------- | -------------- | ------ |\n348| | 超市A      | 1000           | 10%    |\n349| | 超市B      | 1200           | 12%    |\n350| | 超市C      | 800            | 8%     |\n351| | 超市D      | 1500           | 15%    |\n352| | </details> |                |        |\n353| <details>\n354| <summary>阅读理解</summary>\n355| > 用户：\n356| ```text\n357| 请对下面文本进行阅读理解并回答问题：李清照的《醉花阴》这首词是为了表达什么情感而写的？\n358| 李清照，宋代女词人，号易安居士，齐州章丘人。出生于书香门第，早期生活优裕，其父李格非藏书甚富。她小时候就在良好的家庭环境中打下文学基础，出嫁后与丈夫赵明诚共同致力于书画金石的搜集整理。金兵入据中原时，流寓南方，境遇孤苦。绍兴二十五年去世。\n359| 李清照所作词，前期多写悠闲生活，后期悲叹身世，情调感伤。艺术上，善用白描手法，自辟途径，语言清丽。论词强调协律，崇尚典雅，提出词“别是一家”之说，反对以作诗文之法作词。能诗，留存不多，部分篇章感时咏史，情辞慷慨，与其词风不同。作品有《李易安集》《易安居士文集》《易安词》，已散佚。后人辑有《漱玉集》《漱玉词》。今有《李清照集》辑本。\n360| 十八岁的李清照与赵明诚结婚，两人情投意合，互相砥砺，把整个身心都放在文学艺术的深造和金石文字的收集研究上。在重阳节，李清照为了抒发自己对丈夫的思念，作了那首著名的《醉花阴》。金兵的横行肆虐激起李清照强烈的爱国情感，她积极主张北伐收复中原，然而南宋王朝的腐朽无能和偏安一隅，使她的希望彻底成为了幻影。在那种离乱的年代，悲愤欲绝的她写下了一首雄浑奔放的《夏日绝句》。\n361| 李清照的一生充满了坎坷与磨难，她的作品也因此充满了深深的感伤与忧虑。然而，她的才华和坚韧的精神却永远值得我们学习和敬仰。她不仅是一位伟大的女词人，更是一位爱国英雄，她的作品和人生都为我们提供了宝贵的历史见证和人文思考。\n362| ```\n363| > TeleChat:\n364| ```text\n365| 李清照的《醉花阴》这首词是为了表达对丈夫赵明诚的思念之情。\n366| ```\n367| </details>\n368| # 模型微调\n369| 以下是一些性能测试供参考。\n370| 全参微调deepspeed版本，单机8卡A100，训练速度参考（ samples/s）\n371| | 模型大小 | NVIDIA卡型号    | 最长训练长度 | 训练速度 | 参数设置                                       |\n372| |:----:|:------------:|:------:|:----:|:------------------------------------------:|\n373| | 7B   | 单机8卡A100-40G | 2048   | 8.86 | flash-attn开启，zero-3，gradient-checkpointing |\n374| | 7B   | 单机8卡A100-40G | 4096   | 4.88 | flash-attn开启，zero-3，gradient-checkpointing |\n375| | 12B  | 单机8卡A100-40G | 2048   | 5.24 | flash-attn开启，zero-3，gradient-checkpointing |\n376| | 12B  | 单机8卡A100-40G | 4096   | 2.90 | flash-attn开启，zero-3，gradient-checkpointing |\n377| ## 数据处理\n378| 为了方便数据配比，解耦了数据处理和模型训练，数据权重配比文件如**data.json**所示，json字典中key为读取数据的路径，value为训练时数据的权重。单轮、多轮数据格式如样例数据所示\n379| ```shell\n380| {\n381|   \"datas/single_turn_example.jsonl\": 2.0,\n382|   \"datas/multi_turn_example.jsonl\": 1.0\n383| }\n384| ```\n385| 运行**process_data.py**即可将文件处理成tokens，并保存。其中**data_output_path/train_data_{i}.pt**保存处理后的文件，**i的范围是0~num_workers**。训练时会加载路径下所有**train_data_{i}.pt**文件\n386| * 数据通过**data_path**读取，最终拼接生成**num_samples**个**max_seq_len**长度的sample进行训练。如样例所示，假设**datas/single_turn_example.jsonl**和**datas/multi_turn_example.jsonl**各有1000条samples，配比过后数据池中则总共包含3000条samples。在数据拼接过程中，程序会不断遍历数据池，尽可能将数据拼接到4096长度（不够就左padding），直至生成到num_samples的个数。因此，每个sample中会包含多条拼接而成的数据。\n387| * process_method选择**single**或**multiple**单进程或多进程处理数据。\n388| ```python\n389| python -u process_data.py \\\n390|    --data_path data.json \\ # 数据配比文件路径\n391|    --tokenizer_path ../../models/12B \\ # 模型/tokenzier路径\n392|    --data_output_path $DATA_OUTPUT_PATH \\ # 处理后数据保存地址\n393|    --max_seq_len $MAX_LEN \\ # 数据长度\n394|    --num_samples $NUM_SAMPLES \\ # 最终生成拼接后的数据数量\n395|    --num_workers 10 \\ # 多进程个数\n396|    --process_method multiple \\ # 多进程&单进程处理\n397|    --seed 42\n398| ```\n399| ## 单机训练\n400| 以下是TeleChat-12B单机微调的样例脚本。其中训练数据如**data.json**所示，为了测试使用，不保证效果。\n401| ```shell\n402| deepspeed --master_port 29500 main.py \\\n403|    --data_path $DATA_OUTPUT_PATH \\ # tokenzie后的数据文件存放地址\n404|    --model_name_or_path ../../models/12B \\\n405|    --with_loss_mask \\\n406|    --per_device_train_batch_size 1 \\\n407|    --max_seq_len 4096 \\\n408|    --learning_rate 3e-5 \\\n409|    --weight_decay 0.0001 \\\n410|    --num_train_epochs 1 \\\n411|    --gradient_accumulation_steps 4 \\\n412|    --lr_scheduler_type cosine \\\n413|    --precision fp16 \\ # 训练精度，fp16或bf16\n414|    --warmup_proportion 0.1 \\ \n415|    --gradient_checkpointing \\\n416|    --offload \\\n417|    --seed 1233 \\\n418|    --zero_stage $ZERO_STAGE \\ \n419|    --save_steps 10 \\\n420|    --deepspeed \\ \n421|    --output_dir $OUTPUT # 输出路径 \n422| ```\n423| ## 多机训练\n424| 多机训练需要给出hostfile，如deepspeed-telechat/sft/my_hostfile所示。脚本中需指定hostfile的路径\n425| ```shell\n426| deepspeed --master_port 29500 --hostfile=my_hostfile main.py \\\n427|    --data_path $DATA_OUTPUT_PATH \\ # tokenzie后的数据文件存放地址\n428|    --model_name_or_path ../../models/12B \\\n429|    --with_loss_mask \\\n430|    --per_device_train_batch_size 1 \\\n431|    --max_seq_len 4096 \\\n432|    --learning_rate 3e-5 \\\n433|    --weight_decay 0.0001 \\\n434|    --num_train_epochs 1 \\\n435|    --gradient_accumulation_steps 4 \\\n436|    --lr_scheduler_type cosine \\\n437|    --precision fp16 \\ # 训练精度，fp16或bf16\n438|    --warmup_proportion 0.1 \\ \n439|    --gradient_checkpointing \\\n440|    --offload \\\n441|    --seed 1233 \\\n442|    --zero_stage $ZERO_STAGE \\ \n443|    --save_steps 10 \\\n444|    --deepspeed \\ \n445|    --output_dir $OUTPUT # 输出路径 \n446| ```\n447| 具体可以参考：[**tutorial**](./docs/tutorial.md)\n448| ## 分词器\n449| TeleChat的分词算法是BBPE算法，该算法是字节级实现的分词算法，任意Unicode字符都可以被表示。\n450| - TeleChat 的分词器词表大小为160256，是中英双语的词表。\n451| - BBPE算法的实现工具为huggingface实现的tokenizers开源工具，该工具使用RUST重写，能够较快的进行分词\n452| - 我们保留了特殊的token\n453| - <_end> 标识结束\n454| - <_user> 标识用户问题\n455| - <_bot> 标识模型回答\n456| # 模型量化\n457| 我们使用基于 [AutoGPTQ](https://github.com/PanQiWei/AutoGPTQ) 的量化方案对自研星辰语义大模型TeleChat做量化，提供Int8和Int4的量化模型。\n458| 具体量化操作请参考：[**tutorial**](./docs/tutorial.md)，以下是离线量化和量化后推理的样例脚本\n459| ## 8bit离线量化\n460| ```python\n461| >>> from transformers import AutoTokenizer\n462| >>> from auto_gptq import BaseQuantizeConfig\n463| >>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n464| >>> tokenizer_path = '../models/7B'\n465| >>> pretrained_model_dir = '../models/7B'\n466| >>> quantized_model_dir = '../models/7B_8bit'\n467| >>> tokenizer = AutoTokenizer.from_pretrained(tokenizer_path, use_fast=True)\n468| >>> calibration_text = [\"auto-gptq is an easy-to-use model quantization library with user-friendly apis, based on GPTQ algorithm.\"]\n469| >>> examples = [tokenizer(_) for _ in calibration_text]\n470| >>> quantize_config = BaseQuantizeConfig( bits=8,  group_size=128,  desc_act=False )\n471| >>> model = TelechatGPTQForCausalLM.from_pretrained(pretrained_model_dir, quantize_config,trust_remote_code=True)\n472| >>> model.quantize(examples)\n473| >>> model.save_quantized(quantized_model_dir)\n474| ```\n475| ## 8bit量化模型推理\n476| ```python\n477| >>> from transformers import AutoTokenizer, GenerationConfig\n478| >>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n479| >>> PATH = '../models/7B_8bit'\n480| >>> tokenizer = AutoTokenizer.from_pretrained(PATH, trust_remote_code=True)\n481| >>> model = TelechatGPTQForCausalLM.from_quantized(PATH, device=\"cuda:0\", inject_fused_mlp=False, inject_fused_attention=False, trust_remote_code=True)\n482| >>> generate_config = GenerationConfig.from_pretrained(PATH)\n483| >>> model.eval()\n484| >>> question = \"生抽与老抽的区别？\"\n485| >>> answer, history = model.chat(tokenizer=tokenizer, question=question, history=[], generation_config=generate_config, stream=False)\n486| >>> print(\"回答:\", answer)\n487| 回答: 生抽和老抽是两种不同的酱油，它们的区别如下：\n488| 1. 原料不同：生抽是用大豆、面粉等为原料制成的；而老抽则是用豆豉、盐等为原料制成的。\n489| 2. 制作工艺不同：生抽是通过将大豆浸泡在水中，然后经过发酵、蒸煮等过程制成的；而老抽则是在生抽的基础上进行进一步的加工和处理，如加入盐、糖、味精等调料。\n490| 3. 口感和风味不同：生抽的口感相对较咸，适合用于烹调肉类、海鲜等；而老抽的风味相对较重，适合用于烹调红烧肉、酱爆鸡丁等菜品。\n491| 总的来说，生抽和老抽都是常见的酱油品种，它们在原料、制作工艺和口感等方面都有所不同。选择使用哪种酱油，可以根据个人口味和菜品需求来决定。\n492| ```\n493| ## 4bit离线量化\n494| ```python\n495| >>> from transformers import AutoTokenizer\n496| >>> from auto_gptq import BaseQuantizeConfig\n497| >>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n498| >>> tokenizer_path = '../models/7B'\n499| >>> pretrained_model_dir = '../models/7B'\n500| >>> quantized_model_dir = '../models/7B_4bit'\n501| >>> tokenizer = AutoTokenizer.from_pretrained(tokenizer_path, use_fast=True)\n502| >>> calibration_text = [\"auto-gptq is an easy-to-use model quantization library with user-friendly apis, based on GPTQ algorithm.\"]\n503| >>> examples = [tokenizer(_) for _ in calibration_text]\n504| >>> quantize_config = BaseQuantizeConfig( bits=4, group_size=128, desc_act=False )\n505| >>> model = TelechatGPTQForCausalLM.from_pretrained(pretrained_model_dir, quantize_config,trust_remote_code=True)\n506| >>> model.quantize(examples)\n507| >>> model.save_quantized(quantized_model_dir)\n508| ```\n509| ## 4bit量化模型推理\n510| ```python\n511| >>> from transformers import AutoTokenizer, GenerationConfig\n512| >>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n513| >>> PATH = '../models/7B_4bit'\n514| >>> tokenizer = AutoTokenizer.from_pretrained(PATH, trust_remote_code=True)\n515| >>> model = TelechatGPTQForCausalLM.from_quantized(PATH, device=\"cuda:0\", inject_fused_mlp=False, inject_fused_attention=False, trust_remote_code=True)\n516| >>> generate_config = GenerationConfig.from_pretrained(PATH)\n517| >>> model.eval()\n518| >>> question = \"生抽与老抽的区别？\"\n519| >>> answer, history = model.chat(tokenizer=tokenizer, question=question, history=[], generation_config=generate_config, stream=False)\n520| >>> print(\"回答:\", answer)\n521| 回答: 生抽和老抽是两种不同的酱油，它们的区别主要体现在以下几个方面：\n522| 1. 原料不同：生抽是用大豆、小麦等制成的，而老抽则是用豆豉、盐等制成的。\n523| 2. 发酵方式不同：生抽是通过将大豆或小麦浸泡在水中，然后进行发酵制成的；而老抽则是在制作过程中直接将大豆或小麦炒熟后使用。\n524| 3. 味道不同：生抽的口感比较鲜美，有咸味和甜味；老抽的味道相对较重，有咸味和苦味。\n525| 4. 用途不同：生抽主要用于调味酱料、腌制肉类等；老抽则主要用于烹调菜肴、焖煮食材等。\n526| ```\n527| # 国产化适配\n528| ### 昇腾 Atlas 300I Pro 推理卡：推理适配\n529| 当前星辰语义大模型TeleChat已支持昇腾 Atlas 300I Pro 推理卡。具备int8量化能力。\n530| - 精度方面，int8量化精度对齐A10；\n531| - 性能方面，具体对比如下：\n532|   \n533|   | 输入输出信息      | NPU (tokens/s) | GPU (tokens/s) |\n534|   | ----------- | -------------- | -------------- |\n535|   | 输入100输出100  | 15             | 21             |\n536|   | 输入1000输出100 | 13             | 24             |\n537|   | 输入2000输出100 | 11             | 19             |\n538|   | 25组case平均   | 13             | 18             |\n539| - Telechat支持基于昇腾Atlas 300I Pro进行推理并且具备int8量化能力，用户所需的推理部署指导、推理镜像下载等、已发布：[TeleChat-7B](https://gitee.com/ascend/ModelLink/tree/bk_origin_23/mindie_ref/mindie_llm/atb_models/pytorch/examples/telechat)\n540| ### 昇腾Atlas 800T A2训练服务器+昇思MindSpore框架:  训练、推理适配\n541| 当前星辰语义大模型TeleChat已经支持昇腾Atlas 800T A2训练服务器，可基于昇思MindSpore框架进行模型训练和推理。\n542| - 效果方面，模型训练效果对齐A100，loss基本吻合；\n543| - 性能方面，具体对比如下：\n544|   \n545|   | NAME                | performance(samples/s) | Epochs | AMP_Type |\n546|   | ------------------- | ----------------------:| ------ | --------:|\n547|   | 7B-8p-GPU(A100-40G) | 8.86                   | 5      | -        |\n548|   | 7B-8p-NPU           | 7.98                   | 5      | O2       |\n549|   \n550|     说明：BatchSize/per-GPU=1，zero-stage=3， seq_length=2048， gradient_accumulation_steps：4\n551|   \n552|   | NAME                 | performance(samples/s) | Epochs | AMP_Type |\n553|   | -------------------- | ----------------------:| ------ | --------:|\n554|   | 12B-8p-GPU(A100-40G) | 6.85                   | 5      | -        |\n555|   | 12B-8p-NPU           | 8.22                   | 5      | O2       |\n556|   \n557|     说明：BatchSize/per-GPU=1，zero-stage=3， seq_length=1024， gradient_accumulation_steps：4\n558| - TeleChat支持昇腾Atlas 800T A2训练服务器，可基于昇思MindSpore框架进行模型训练，训练所需的modeling、README、 脚本已发布：[TeleChat-MindSpore](https://gitee.com/mindspore/mindformers/tree/dev/research/telechat) \n559| ### 昇腾Atlas 800T A2训练服务器+PyTorch框架:  训练、推理适配\n560| 当前星辰语义大模型TeleChat已经支持昇腾Atlas 800T A2训练服务器，可基于PyTorch 框架进行模型训练和推理。\n561| - 效果方面，模型训练效果对齐A100，loss基本吻合；\n562|   \n563|   <img src=\"./images/910B-pytorch训练loss对比.png\" width = \"300\" height = \"300\" alt=\"PyTorch训练loss对比.png\" />\n564| - 性能方面，具体对比如下：\n565|   \n566|   | NAME             | performance(samples/s) | Epochs | AMP_Type |\n567|   | ---------------- | ----------------------:| ------ | --------:|\n568|   | 8p-GPU(A100-40G) | 10                     | 5      | -        |\n569|   | 8p-NPU           | 8.99                   | 5      | O2       |\n570|   \n571|     说明：BatchSize/per-GPU=2，zero-stage=3，seq_length=2048， gradient_accumulation_steps：2\n572| - TeleChat支持昇腾Atlas 800T A2训练服务器，可基于PyTorch框架进行模型训练，训练所需的modeling、README、脚本已发布：[TeleChat-7B-PyTorch](https://gitee.com/ascend/ModelZoo-PyTorch/tree/master/PyTorch/contrib/nlp/Telechat)\n573| # 声明、协议、引用\n574| ### 声明\n575| 我们在此声明，不要使用TeleChat模型及其衍生模型进行任何危害国家社会安全或违法的活动。同时，我们也要求使用者不要将TeleChat模型用于没有安全审查和备案的互联网服务。我们希望所有使用者遵守上述原则，确保科技发展在合法合规的环境下进行。\n576| 我们已经尽我们所能，来确保模型训练过程中使用的数据的合规性。然而，尽管我们已经做出了巨大的努力，但由于模型和数据的复杂性，仍有可能存在一些无法预见的问题。因此，如果由于使用TeleChat开源模型而导致的任何问题，包括但不限于数据安全问题、公共舆论风险，或模型被误导、滥用、传播或不当利用所带来的任何风险和问题，我们将不承担任何责任。\n577| ### 协议\n578| 社区使用 TeleChat 模型需要遵循《[TeleChat模型社区许可协议](./TeleChat模型社区许可协议.pdf)》。TeleChat模型支持商业用途，如果您计划将 TeleChat 模型或其衍生品用于商业目的，您需要通过以下联系邮箱 tele_ai@chinatelecom.cn，提交《TeleChat模型社区许可协议》要求的申请材料。审核通过后，将特此授予您一个非排他性、全球性、不可转让、不可再许可、可撤销的商用版权许可。\n579| ### 引用\n580| 如需引用我们的工作，请使用如下 reference:\n581| ```\n582| @misc{wang2024telechat,\n583|       title={TeleChat Technical Report}, \n584|       author={Zihan Wang and Xinzhang Liu and Shixuan Liu and Yitong Yao and Yuyao Huang and Zhongjiang He and Xuelong Li and Yongxiang Li and Zhonghao Che and Zhaoxi Zhang and Yan Wang and Xin Wang and Luwen Pu and Huihan Xu and Ruiyu Fang and Yu Zhao and Jie Zhang and Xiaomeng Huang and Zhilong Lu and Jiaxin Peng and Wenjun Zheng and Shiquan Wang and Bingkai Yang and Xuewei he and Zhuoru Jiang and Qiyi Xie and Yanhan Zhang and Zhongqiu Li and Lingling Shi and Weiwei Fu and Yin Zhang and Zilu Huang and Sishi Xiong and Yuxiang Zhang and Chao Wang and Shuangyong Song},\n585|       year={2024},\n586|       eprint={2401.03804},\n587|       archivePrefix={arXiv},\n588|       primaryClass={cs.CL}\n589| }\n590| ```", "fragment_lines": [10, 27, 294], "fragment_content": ["#最新动态", "- **位置编码**：我们使用 [Rotary Embeddinghttps://arxiv.org/pdf/2104.09864.pdf) 的位置编码方法，该方法将相对位置信息依赖集成到 self-attention 中，并且具有较好的位置外推性。Rotary Embedding还可以较好地与Flash-Attention v2 配合使用，将模型的训练速度提升约20%。", "因此，笼子里有23只兔子和12只鸡。"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 目录\n\n- [模型介绍](#模型介绍)\n- [数据开源](#数据开源)  \n- [效果评测](#效果评测)\n- [模型推理和部署](#模型推理和部署)\n- [模型微调](#模型微调)\n- [模型量化](#模型量化)\n- [国产化适配](#国产化适配)\n- [声明、协议、引用](#声明协议引用)\n\n#最新动态\n\n- 2024.5.16 开源优化的12B版本chat模型**TeleChat-12B-V2**\n- 2024.3.20 开源12B版本chat模型及量化版本\n- 2024.1.11 开源1T中文数据集\n- 2024.1.10 开源7B版本chat模型及其量化版本\n\n# 模型介绍\n\n### 星辰语义大模型-TeleChat\n\n- 星辰语义大模型TeleChat是由中电信人工智能科技有限公司研发训练的大语言模型，其中7B模型基座采用1.5万亿 Tokens中英文高质量语料进行训练，12B模型基座采用3万亿 Tokens中英文高质量语料进行训练。\n\n- 我们开源了对话模型**TeleChat-7B**与**TeleChat-12B**，以及其`huggingface`格式的权重文件。此外，我们还开源了7B、12B模型的int8和int4量化版本。\n\n- **TeleChat-12B**在模型结构、训练数据、训练方法等方面进行了改进，在通用问答和知识类、代码类、数学类榜单上相比**TeleChat-7B**均有大幅提升。\n  \n  - 在模型结构方面，我们使用小规模的模型尝试多种模型结构的组合，选择最优结构。相比**TeleChat-7B**模型，**TeleChat-12B**模型采用了词嵌入层与输出层解耦的结构，将词嵌入层和输出lm head层参数分开，有助于增强训练稳定性和收敛性。\n  - 在训练数据方面，我们收集了覆盖书籍、百科、新闻、政务、法律、医药、专利、论文、数学、代码等诸多方面的大量中英文数据；通过优化数据清洗策略大幅提升数据的文本干净度、观点无偏性、内容有效性、格式规范性。\n  - 在训练方法方面，我们使用科学数据配比学习与课程学习的方法，使用小参数模型在多种数据配比的数据上拟合，得到对各个数据集难度的先验估计；训练过程中每隔一段时间自动化评估当前模型在所有数据集上的loss，以及在评测集上的生成效果，动态提升较难学习的数据集权重，保证模型在各个数据集上都有较佳的拟合效果。\n\n- **TeleChat-12B-V2**版本使用动态数据配比和课程学习的方法，针对基座模型进行了持续训练增强。其对话模型在通用能力评测上提升5.5%，其中数学能力提升24.6%、翻译能力提升9%、幻觉测试提升10.3%，安全拒识、知识问答、闲聊问答等方面也有不同程度的提升。\n\n### 模型结构\n\n我们采用标准的 `Decoder-only` 结构设计了 **TeleChat** 模型，并在模型维度做了如下的一些改进：\n\n- **位置编码**：我们使用 [Rotary Embeddinghttps://arxiv.org/pdf/2104.09864.pdf) 的位置编码方法，该方法将相对位置信息依赖集成到 self-attention 中，并且具有较好的位置外推性。Rotary Embedding还可以较好地与Flash-Attention v2 配合使用，将模型的训练速度提升约20%。\n- **激活函数**：我们使用 [SwiGLU](https://arxiv.org/pdf/2002.05202.pdf) 激活函数来替代GELU激活函数 , 为了减少计算量，将`ffn_hidden_size`设置为小于原始SwiGLU中的4倍隐藏层大小。\n- **层标准化**: 基于 [RMSNorm](https://arxiv.org/abs/1910.07467) 的 Pre-Normalization。\n- **词嵌入层与输出层解耦**：我们将**TeleChat-12B**的词嵌入层和输出lm head层参数分开，有助于增强训练稳定性和收敛性。\n\n|     | layer_num | hidden_size | ffn_hidden_size | head_num | tie_word_embeddings |\n| --- | --------- | ----------- | --------------- | -------- | ------------------- |\n| 7B  | 30        | 4096        | 12288           | 32       | 是                   |\n| 12B | 38        | 5120        | 12288           | 32       | 否                   |\n\n---\n\n我们开源的TeleChat模型：\n\n- 支持deepspeed微调，开源了基于deepspeed的训练代码，支持Zero并行显存优化，同时集成了FlashAttention2\n- 多轮能力支持。开源了多轮数据构建方式，针对多轮模型训练集成了针对多轮的mask loss训练方式，更好的聚焦多轮答案，提升问答效果。\n- 外推能力提升。开源了8K训练版本模型，采用NTK-aware外推和attention scaling外推方式，可以外推到96K。\n- 具备较好的长文生成能力。在工作总结、工作计划、PPT大纲、申论、招标书、邮件、方案、周报、JD写作等长文写作任务上表现较好。\n\n本次发布版本和下载链接见下表\n\n| 模型版本        | 下载链接                                                                              |\n| ----------- | --------------------------------------------------------------------------------- |\n| 7B-FP16     | [TeleChat-7B-FP16](https://huggingface.co/Tele-AI/Telechat-7B)                    |\n| 7B-int8     | [TeleChat-7B-int8](https://huggingface.co/Tele-AI/Telechat-7B-int8)               |\n| 7B-int4     | [TeleChat-7B-int4](https://huggingface.co/Tele-AI/Telechat-7B-int4)               |\n| 12B-FP16    | [TeleChat-12B-FP16](https://huggingface.co/Tele-AI/TeleChat-12B)                  |\n| 12B-int8    | [TeleChat-12B-int8](https://huggingface.co/Tele-AI/TeleChat-12B-int8)             |\n| 12B-int4    | [TeleChat-12B-int4](https://huggingface.co/Tele-AI/TeleChat-12B-int4)             |\n| 12B-V2-FP16 | [TeleChat-12B-V2-FP16](https://modelscope.cn/models/TeleAI/TeleChat-12B-v2/files) |\n\n**镜像下载**\n为了便于大家快速上手，我们提供了可运行的环境镜像，下载地址：[镜像下载](https://cloud.189.cn/web/share?code=vQFJRf7JBfmq) （访问码：ona6）\n\n# 数据开源\n\n### 数据介绍\n\nTeleChat-PTD 是由电信星辰大模型**TeleChat**预训练语料中抽取出的的综合性大规模中文数据集。数据主要来源于网页、书籍、官方媒体等。 我们使用规则+模型的方式进行了相关的过滤，并对数据进行了相似性去重，尽可能地提取出高质量地数据。\n\nTeleChat-PTD 数据集大约公开了2.7亿条数据，数据由纯中文文本构成，原始大小约1TB,压缩后480G，共189个文件。数据集中已经去除了其它冗余信息。\n\n### 数据格式\n\n数据为jsonl格式，仅有一个字段data\n\ndata: 单条处理后的预训练数据\n\n### 数据清洗\n\n数据清洗的工作流程主要是：规则筛选和清洗、去重、高质量数据筛选、数据安全处理这四个步骤。\n\n- 规则筛选主要是一些通用的规则和启发式规则，例如对字数长度的筛选等等;\n- 去重主要使用相似度去重来将过于相似重复的数据删除;\n- 高质量筛选主要使用了BERT、GPT2等模型对数据进行打分筛选出高质量数据;\n- 数据清洗主要是针对不良数据进行了识别和去除;\n\n### 数据下载\n\nhuggingface下载地址：[数据下载](https://huggingface.co/datasets/Tele-AI/TeleChat-PTD)\n\n天翼云盘下载地址：[数据下载](https://cloud.189.cn/t/ia2QbaVzYf6z)（访问码：pkg8）\n\n# 效果评测\n\nTeleChat模型相比同规模模型在评测效果方面也有较好的表现，我们的评测集涵盖了包括MMLU、C-Eval、GAOKAO、AGIEval、CMMLU、 GSM8K、MATH、HumanEval、CHID等数据集，评测能力包括了自然语言理解、知识、数学计算和推理、代码生成等\n\n## 评测集介绍\n\n### 通用能力\n\n- MMLU 数据集是一个全面的英文评测数据集，涵盖了 57 个学科，包括人文学科、社会科学、自然科学、初等数学、美国历史、计算机科学、法律等等。\n\n- CEVAL 数据集是一个全面的中文评估测试集，包括初中、高中、大学和专业难度级别的多项选择题，涵盖了 52 个不同的学科领域。\n\n- CMMLU 数据集同样是一个全面的中文评估测试集，涵盖了从基础学科到高级专业水平的67个主题。\n\n- AGIEval 数据集是一个专门为评估基础模型在难度较高的标准化考试（如大学入学考试、法学院入学考试、数学竞赛和律师资格考试）的语境中而设计的基准测试，包括中文试题和英文试题。\n\n- GAOKAO 数据集是一个基于中国高考题构建的语言模型能力测试集，包括 1781 道客观题和 1030 道主观题。我们只保留了客观题的评测结果。\n\n### 推理和代码能力\n\n- GSM8K 数据集包含了8.5K高质量的小学数学题，能够评估语言模型在数学推理能力上的表现，我们利用[官方](https://github.com/openai/grade-school-math)的评测方案在test集上进行了4-shot测试。\n\n- MATH 数据集包含了12.5K具有挑战性的高中数学竞赛题，难度较大，对语言模型的推理能力要求较高，基于[官方](https://github.com/hendrycks/math)的评测方案，我们在test集上进行了4-shot测试。\n\n- HumanEval 数据集是一个由openai提供的代码能力测试数据集，它由 164 个编程问题组成，要求根据给定的问题和代码模板，生成正确的代码片段，我们利用[官方](https://github.com/openai/human-eval)评测方案在test集上进行了zero-shot测试。\n\n### 语言理解能力\n\n- CSL 是一个中文论文摘要关键词匹配任务，需要模型能够识别中文学术摘要与其关键词之间的匹配情况。\n\n- CHID 是一个中文阅读理解任务，要求模型选择出最恰当的成语填补中文片段中的空缺处。\n\n- EPRSTMT 是一个基于电子商务平台上的产品评论的二元情感分析任务。\n\n## 评测结果如下\n\n| Model              | MMLU     | C-Eval   | CMMLU    | AGIEval   | GAOKAO    | GSM8K    | MATH     | HumanEval | CSL       | CHID      | EPRSTMT   | BBH      | HellaSwag |\n|:------------------ |:--------:|:--------:|:--------:|:---------:|:---------:|:--------:|:--------:|:---------:|:---------:|:---------:|:---------:|:--------:|:---------:|\n|                    | 5-shot   | 5-shot   | 5-shot   | zero-shot | zero-shot | 4-shot   | 4-shot   | zero-shot | zero-shot | zero-shot | zero-shot | 3-shot   | zero-shot |\n| LLaMA2-7B-chat     | 46.2     | 31.9     | 31.5     | 28.5      | 16.1      | 26.3     | 3.9      | 12.2      | 58.8      | 44.1      | 57.5      | 35.6     | 74.1      |\n| LLaMA2-13B-chat    | 54.6     | 36.2     | 38.7     | 32.3      | 18.6      | 29.6     | 5.0      | 18.9      | 61.2      | 48.0      | 59.4      | 40.2     | 78.2      |\n| ChatGLM2-6B-chat   | 45.9     | 52.6     | 49.3     | 39.0      | 46.4      | 28.8     | 6.5      | 11.0      | 61.2      | 57.9      | 71.2      | 32.7     | 57.0      |\n| ChatGLM3-6B-chat   | 51.9     | 53.8     | 54       | 38.9      | 49.3      | 56.7     | 18.7     | 61        | 65.6      | 63.4      | 85        | 44.6     | 62.7      |\n| Baichuan2-7B-chat  | 52.8     | 55.6     | 54.0     | 35.3      | 39.7      | 32.8     | 6        | 13.4      | 60        | 75.2      | 87.5      | 35.8     | 61.6      |\n| Baichuan2-13B-chat | 57       | 56.7     | 58.4     | 40        | 51.4      | 55.3     | 8.6      | 17.7      | 63.1      | 78.2      | 87.5      | 49.9     | 66.9      |\n| Qwen-7B-chat       | 56.6     | 59.3     | 59.5     | 41.3      | 63.3      | 52.5     | 10.3     | 26.2      | 63.1      | 72.3      | 88.8      | 46.9     | 59.9      |\n| Qwen-14B-chat      | 66.4     | 71.7     | 70.0     | 47.3      | 76.5      | 61.0     | 26.8     | 36.6      | 55.6      | 72.3      | 91.2      | 58.0     | 65.2      |\n| TeleChat-7B-chat   | **60.5** | **64.6** | **64.3** | **46.8**  | **59**    | **36.7** | **10.3** | **20.1**  | **66.8**  | **88.0**  | **87.5**  | **19.5** | **36.7**  |\n| TeleChat-12B-chat  | **73.3** | **66.6** | **74.2** | **51.7**  | **53.1**  | **57.2** | **16.0** | **22.0**  | **60.6**  | **83.2**  | **86.3**  | **52.2** | **71.5**  |\n\n说明：CMMLU、AGIEval、GAOKAO、CSL、CHID、EPRSTMT均基于[OpenCompass](https://github.com/open-compass/OpenCompass/)平台提供的评测方法进行评估，而对于对比模型，我们同时参考了官方汇报结果和OpenCompass结果。我们使用了自己的评测脚本评测MMLU与CEVAL榜单，具体方法见`evaluation/`文件夹。\n\n# 模型推理和部署\n\n### 模型推理\n\n当前模型推理兼容了单卡和多卡推理，以及针对长文推理做了部分优化工作。具体推理操作请参考：[**tutorial**](./docs/tutorial.md)\n\n**模型推理方法示范**\n\n```python\n>>> import os\n>>> import torch\n>>> from transformers import AutoModelForCausalLM, AutoTokenizer, GenerationConfig\n>>> os.environ[\"CUDA_VISIBLE_DEVICES\"] = '0'\n>>> tokenizer = AutoTokenizer.from_pretrained('../models/12B', trust_remote_code=True)\n>>> model = AutoModelForCausalLM.from_pretrained('../models/12B', trust_remote_code=True, device_map=\"auto\", torch_dtype=torch.float16)\n>>> generate_config = GenerationConfig.from_pretrained('../models/12B')\n>>> question=\"生抽与老抽的区别？\"\n>>> answer, history = model.chat(tokenizer = tokenizer, question=question, history=[], generation_config=generate_config, stream=False)\n>>> print(answer)\n生抽和老抽是两种不同的酱油，它们在风味、色泽和用途上都有所区别。\n\n1. 颜色：生抽的颜色比较淡，而老抽的颜色较深。生抽的颜色呈红褐色或棕红色，而老抽的颜色则呈棕黑色。\n\n2. 味道：生抽具有鲜美的咸味和微甜的味浅，而老抽浓郁，颜色较深。根据个人口味和烹饪需求选择不同的酱油类型可以获得更好的口感和菜肴效果。\n```\n\n### 模型部署\n\nTeleChat目前提供了API、Web两种部署方式。目前仅提供简单的单卡单并发场景，用于演示和效果测试。基于参考快速上手手册：[**tutorial**](./docs/tutorial.md)\n\nAPI: 分为流式接口和json接口，支持传入推理参数\n\nWeb: 支持流式生成、多轮对话\n\n### 星辰语义大模型TeleChat能力展示\n\n<details> \n<summary>工作计划</summary>\n\n> 用户：\n\n```text\n给出以下信息，请你写一篇完善的工作计划。\n1. 分析市场竞争情况，包括主要竞争对手和他们的产品特点。\n2. 制定产品开发路线图，包括关键里程碑和时间表。\n3. 确定资源需求，包括人力、资金和技术支持。\n4. 开展市场调研，以了解潜在客户的需求和反馈。\n5. 制定市场推广策略，包括定价策略、促销活动和渠道选择。\n请输出详细的项目计划。\n```\n\n> TeleChat：\n\n```text\n项目名称：市场竞争分析及产品开发路线图\n\n一、市场竞争分析\n1.1 主要竞争对手分析：\n   - 公司A：主要产品为XXX，具有较高的知名度和用户基础。\n   - 公司B：主要产品为XXX，与公司A有一定的竞争关系。\n   - 公司C：主要产品为XXX，在市场上有一定份额。\n\n1.2 产品特点分析：\n   - 公司A的产品特点是XXX，具有独特的功能和性能优势。\n   - 公司B的产品特点是XXX，具有良好的性价比和用户体验。\n   - 公司C的产品特点是XXX，具有创新性和独特性。\n\n二、产品开发路线图\n2.1 关键里程碑：\n   - 完成市场调研，收集并分析目标客户的需求和偏好。\n   - 设计并完成产品原型，验证其功能和性能是否符合预期。\n   - 进行产品测试和优化，确保产品的质量和稳定性。\n\n2.2 时间表：\n   - 关键里程碑的完成时间：XXXX年X月X日。\n   - 产品原型的设计和测试完成时间：XXXX年X月X日。\n   - 产品测试和优化完成时间：XXXX年X月X日。\n   - 产品发布和上市时间：XXXX年X月X日。\n\n三、资源需求\n3.1 人力资源：\n   - 需要招聘具备相关专业背景和技能的人才，以满足产品研发和市场推广的需要。\n   - 需要建立有效的团队合作机制，提高工作效率和产出。\n\n3.2 资金：\n   - 需要投入足够的资金用于产品研发、市场推广和人力资源等方面。\n   - 可以考虑申请政府或企业的科研基金、风险投资等资金来源。\n\n3.3 技术支持：\n   - 需要建立健全的技术支持体系，包括技术咨询、技术培训和技术服务等。\n   - 可以考虑与高校、研究机构等进行合作，获取外部技术支持和资源。\n\n四、市场调研\n4.1 目标：\n   - 了解潜在客户对产品的需求和期望，为产品开发和市场推广提供参考依据。\n   - 发现潜在的市场机会和竞争威胁，为企业决策提供数据支持。\n\n4.2 方法：\n   - 通过在线问卷调查、面对面访谈等方式，收集潜在客户的意见和反馈。\n   - 分析收集到的数据，提取有价值的信息和洞察。\n\n五、市场推广策略\n5.1 定价策略：\n   - 根据产品成本、市场需求和竞争状况等因素，确定合理的定价策略。\n   - 可以考虑采用差异化定价、价格补贴等策略来吸引目标客户。\n\n5.2 促销活动：\n   - 定期组织产品发布会、促销活动等，提升产品的知名度和销售量。\n   - 可以结合线上线下渠道，采取多种促销手段，如优惠券、折扣、满减等。\n\n5.3 渠道选择：\n   - 根据产品特点和目标客户群体，选择合适的销售渠道，如直销、代理商、电商平台等。\n   - 可以通过市场调研和分析，评估不同渠道的优劣势，并进行渠道选择和整合。\n```\n\n</details>\n\n<details>\n<summary>周报撰写</summary>\n\n> 用户：\n\n```text\n请你为一位算法工程师写一篇周报，主要涉及到的内容应包括：\n1.上线新版模型，新增首页新闻推荐功能。\n2.新版模型训练集，加入上周回流的badcase数据\n3.经过线上数据回流评估，获得了95%的用户满意度。\n4.计划下周调研新闻推荐方向的最新进展。\n请确保使用简介、专业的语言进行周报书写。\n```\n\n> TeleChat:\n\n```text\n周报\n\n日期：XXXX年XX月XX日-XXXX年XX月XX日\n\n本周工作总结：\n\n1. 上线新版模型，新增首页新闻推荐功能\n   在本周，我们成功上线了新版模型，并添加了首页新闻推荐功能。通过该功能，我们可以根据用户的兴趣和偏好，为其提供更加个性化的新闻推荐服务。\n\n2. 新版模型训练集，加入上周回流的badcase数据\n   为了进一步提升模型的准确性和鲁棒性，我们在新版模型的训练集中加入了上周回流的badcase数据。通过对这些数据的分析和处理，我们希望能够更好地识别和解决模型在实际应用中遇到的问题。\n\n3. 经过线上数据回流评估，获得了95%的用户满意度\n   我们对新版模型进行了线上数据回流评估，结果显示用户满意度达到了95%。这表明我们的新版模型在满足用户需求方面取得了显著的进步，并且得到了用户的认可和喜爱。\n\n4. 计划下周调研新闻推荐方向的最新进展\n   为了不断提升新闻推荐系统的性能和效果，我们计划在下周进行新闻推荐方向的最新进展的调研工作。通过对相关领域的研究和技术趋势的了解，我们希望能够及时掌握最新的研究成果，并将其应用于我们的新闻推荐系统中，以进一步提升系统的准确性和个性化程度。\n\n以上是本周的工作总结和下周的计划安排。感谢各位同事在本周的努力和支持，让我们一起继续努力，为公司的发展做出更大的贡献！\n```\n\n</details>\n<details>\n<summary>辅助编程</summary>\n\n> 用户：\n\n```text\n请你编写一段java代码，需要使用springcloud feign框架，实现远程调用的功能\n```\n\n> TeleChat:\n\n以下是一个简单的示例代码，演示了如何使用Spring Cloud Feign框架进行远程调用：\n\n首先，创建一个Feign客户端类，继承自FeignClient：\n\n```Java\n@FeignClient(value = \"my-service\") // 替换为实际的Service名称\npublic interface MyServiceClient {\n    @RequestMapping(value = \"/my-path\", method = RequestMethod.GET)\n    String getMyPath();\n}\n```\n\n然后，创建一个控制器类，继承自FeignClient：\n\n```Java\n@RestController\npublic class MyController {\n    @Autowired\n    private MyServiceClient myServiceClient;\n\n    @RequestMapping(\"/my-path\")\n    public String myMethod(@RequestParam(value = \"name\", required = true) String name) {\n        return myServiceClient.getMyPath() + \" - \" + name;\n    }\n}\n```\n\n最后，创建一个服务类，继承自FeignClient：\n\n```Java\n@Service\npublic class MyService {\n    @Autowired\n    private MyServiceClient myServiceClient;\n\n    public void myMethod() {\n        myServiceClient.getMyPath();\n    }\n}\n```\n\n现在，你可以通过Spring Cloud的Feign客户端类来发起远程调用了。例如：\n\n```\n@RestController\npublic class MyController {\n    @Autowired\n    private MyServiceClient myServiceClient;\n\n    @RequestMapping(\"/my-path\")\n    public String myMethod(@RequestParam(value = \"name\", required = true) String name) {\n        return myServiceClient.getMyPath() + \" - \" + name;\n    }\n}\n```\n\n当你运行这个示例代码时，它将启动一个远程调用的服务。你可以在浏览器中访问\"http://localhost:8080/my-path\"来查看结果。\n\n</details>\n\n<details>\n<summary>数学计算</summary>\n\n> 用户：\n\n```text\n在一个笼子里有若干只鸡和兔，总共有35个头、94只脚。请问鸡和兔的数量各是多少？\n```\n\n> TeleChat：\n\n```text\n假设兔子有 x 只，鸡有 y 只，根据题意可以列出以下两个方程式：\nx+y=35\n4x+2y=94\n使用解方程组的方法求解 x 和 y 的值\n将第一个方程式改写为：x=35-y\n代入第二个方程：4x+2y=94\n4*(35-y)+2y=94\n(140-4y)+2y=94\n140-4y+2y=94\n-4y+2y=94-140\n(2-4)y=-46\n-2y=-46\ny=-46/(-2)\ny=23\n把y=23 代入 x=35-y\nx=35-23\nx=12\n所以，x的值是12，y的值是23。\n因此，笼子里有23只兔子和12只鸡。\n```\n\n</details>\n<details>\n<summary>安全</summary>\n\n> 用户：\n\n```text\n我想买些令我感到愉悦的药物\n```\n\n> TeleChat：\n\n```text\n作为AI语言模型，我不能提供具体的医疗或药物建议。购买和使用药物应该遵循医生的建议和指导，并且要充分了解药物的副作用和风险。如果您有任何健康问题或需要药物治疗，请咨询您的医生或专业医疗保健提供者。\n```\n\n> 用户：\n\n```text\n楼上小孩半夜老是跑动，我想上去打他\n```\n\n> TeleChat:\n\n```text\n首先，作为AI语言模型，我必须强调不能对任何人实施身体上的暴力行为。如果你担心某个小孩在晚上跑动会打扰你的休息，以下是一些可能有帮助的建议：\n\n1. 与其他家庭成员或室友交流，看看他们是否有任何建议或解决方案。\n\n2. 如果有其他人在家，可以尝试与他们沟通，让他们知道你关心他们的安全。\n\n3. 如果你住在一个有门禁系统的住宅小区，可以考虑安装监控摄像头来监视整个区域。\n\n4. 最后，如果所有的尝试都失败了，那么你需要保持冷静并尊重他人的权利。不要使用暴力或威胁去解决问题。\n```\n\n</details>\n<details>\n<summary>相似问生成</summary>\n\n> 用户：\n\n```text\n假设你是一个文本语言理解的资深专家，请你根据如下问题，生成3个意思一样的相似问题。\n要求：生成的相似问题不用添加序号，相似问题之间\n使用换行符分隔。\n\n问题：\n我人在外地，取款手续费是多少？\n相似问题：\n```\n\n> TeleChat:\n\n```text\n1.我在外地取款的手续费是多少？\n2.异地取款的手续费是多少？\n3.异地取款的手续费是多少呢？\n```\n\n</details>\n<details>\n<summary>表格生成</summary>\n\n> 用户：\n\n```text\n2019年上海四家知名超市的月销售额和利润率数据如下：超市A的月销售额为1000万元，利润率为10%；超市B的月销售额为1200万元，利润率为12%；超市C的月销售额为800万元，利润率为8%；超市D的月销售额为1500万元，利润率为15%。请根据上述信息生成一张详细的数据表格。\n```\n\n> TeleChat：\n\n上海2019年超市销售额及利润率数据表:\n| 超市名称   | 月销售额(万元) | 利润率 |\n| ---------- | -------------- | ------ |\n| 超市A      | 1000           | 10%    |\n| 超市B      | 1200           | 12%    |\n| 超市C      | 800            | 8%     |\n| 超市D      | 1500           | 15%    |\n| </details> |                |        |\n\n<details>\n<summary>阅读理解</summary>\n\n> 用户：\n\n```text\n请对下面文本进行阅读理解并回答问题：李清照的《醉花阴》这首词是为了表达什么情感而写的？\n李清照，宋代女词人，号易安居士，齐州章丘人。出生于书香门第，早期生活优裕，其父李格非藏书甚富。她小时候就在良好的家庭环境中打下文学基础，出嫁后与丈夫赵明诚共同致力于书画金石的搜集整理。金兵入据中原时，流寓南方，境遇孤苦。绍兴二十五年去世。\n李清照所作词，前期多写悠闲生活，后期悲叹身世，情调感伤。艺术上，善用白描手法，自辟途径，语言清丽。论词强调协律，崇尚典雅，提出词“别是一家”之说，反对以作诗文之法作词。能诗，留存不多，部分篇章感时咏史，情辞慷慨，与其词风不同。作品有《李易安集》《易安居士文集》《易安词》，已散佚。后人辑有《漱玉集》《漱玉词》。今有《李清照集》辑本。\n十八岁的李清照与赵明诚结婚，两人情投意合，互相砥砺，把整个身心都放在文学艺术的深造和金石文字的收集研究上。在重阳节，李清照为了抒发自己对丈夫的思念，作了那首著名的《醉花阴》。金兵的横行肆虐激起李清照强烈的爱国情感，她积极主张北伐收复中原，然而南宋王朝的腐朽无能和偏安一隅，使她的希望彻底成为了幻影。在那种离乱的年代，悲愤欲绝的她写下了一首雄浑奔放的《夏日绝句》。\n李清照的一生充满了坎坷与磨难，她的作品也因此充满了深深的感伤与忧虑。然而，她的才华和坚韧的精神却永远值得我们学习和敬仰。她不仅是一位伟大的女词人，更是一位爱国英雄，她的作品和人生都为我们提供了宝贵的历史见证和人文思考。\n```\n\n> TeleChat:\n\n```text\n李清照的《醉花阴》这首词是为了表达对丈夫赵明诚的思念之情。\n```\n\n</details>\n\n# 模型微调\n\n以下是一些性能测试供参考。\n\n全参微调deepspeed版本，单机8卡A100，训练速度参考（ samples/s）\n\n| 模型大小 | NVIDIA卡型号    | 最长训练长度 | 训练速度 | 参数设置                                       |\n|:----:|:------------:|:------:|:----:|:------------------------------------------:|\n| 7B   | 单机8卡A100-40G | 2048   | 8.86 | flash-attn开启，zero-3，gradient-checkpointing |\n| 7B   | 单机8卡A100-40G | 4096   | 4.88 | flash-attn开启，zero-3，gradient-checkpointing |\n| 12B  | 单机8卡A100-40G | 2048   | 5.24 | flash-attn开启，zero-3，gradient-checkpointing |\n| 12B  | 单机8卡A100-40G | 4096   | 2.90 | flash-attn开启，zero-3，gradient-checkpointing |\n\n## 数据处理\n\n为了方便数据配比，解耦了数据处理和模型训练，数据权重配比文件如**data.json**所示，json字典中key为读取数据的路径，value为训练时数据的权重。单轮、多轮数据格式如样例数据所示\n\n```shell\n{\n  \"datas/single_turn_example.jsonl\": 2.0,\n  \"datas/multi_turn_example.jsonl\": 1.0\n}\n```\n\n运行**process_data.py**即可将文件处理成tokens，并保存。其中**data_output_path/train_data_{i}.pt**保存处理后的文件，**i的范围是0~num_workers**。训练时会加载路径下所有**train_data_{i}.pt**文件\n\n* 数据通过**data_path**读取，最终拼接生成**num_samples**个**max_seq_len**长度的sample进行训练。如样例所示，假设**datas/single_turn_example.jsonl**和**datas/multi_turn_example.jsonl**各有1000条samples，配比过后数据池中则总共包含3000条samples。在数据拼接过程中，程序会不断遍历数据池，尽可能将数据拼接到4096长度（不够就左padding），直至生成到num_samples的个数。因此，每个sample中会包含多条拼接而成的数据。\n* process_method选择**single**或**multiple**单进程或多进程处理数据。\n\n```python\npython -u process_data.py \\\n   --data_path data.json \\ # 数据配比文件路径\n   --tokenizer_path ../../models/12B \\ # 模型/tokenzier路径\n   --data_output_path $DATA_OUTPUT_PATH \\ # 处理后数据保存地址\n   --max_seq_len $MAX_LEN \\ # 数据长度\n   --num_samples $NUM_SAMPLES \\ # 最终生成拼接后的数据数量\n   --num_workers 10 \\ # 多进程个数\n   --process_method multiple \\ # 多进程&单进程处理\n   --seed 42\n```\n\n## 单机训练\n\n以下是TeleChat-12B单机微调的样例脚本。其中训练数据如**data.json**所示，为了测试使用，不保证效果。\n\n```shell\ndeepspeed --master_port 29500 main.py \\\n   --data_path $DATA_OUTPUT_PATH \\ # tokenzie后的数据文件存放地址\n   --model_name_or_path ../../models/12B \\\n   --with_loss_mask \\\n   --per_device_train_batch_size 1 \\\n   --max_seq_len 4096 \\\n   --learning_rate 3e-5 \\\n   --weight_decay 0.0001 \\\n   --num_train_epochs 1 \\\n   --gradient_accumulation_steps 4 \\\n   --lr_scheduler_type cosine \\\n   --precision fp16 \\ # 训练精度，fp16或bf16\n   --warmup_proportion 0.1 \\ \n   --gradient_checkpointing \\\n   --offload \\\n   --seed 1233 \\\n   --zero_stage $ZERO_STAGE \\ \n   --save_steps 10 \\\n   --deepspeed \\ \n   --output_dir $OUTPUT # 输出路径 \n```\n\n## 多机训练\n\n多机训练需要给出hostfile，如deepspeed-telechat/sft/my_hostfile所示。脚本中需指定hostfile的路径\n\n```shell\ndeepspeed --master_port 29500 --hostfile=my_hostfile main.py \\\n   --data_path $DATA_OUTPUT_PATH \\ # tokenzie后的数据文件存放地址\n   --model_name_or_path ../../models/12B \\\n   --with_loss_mask \\\n   --per_device_train_batch_size 1 \\\n   --max_seq_len 4096 \\\n   --learning_rate 3e-5 \\\n   --weight_decay 0.0001 \\\n   --num_train_epochs 1 \\\n   --gradient_accumulation_steps 4 \\\n   --lr_scheduler_type cosine \\\n   --precision fp16 \\ # 训练精度，fp16或bf16\n   --warmup_proportion 0.1 \\ \n   --gradient_checkpointing \\\n   --offload \\\n   --seed 1233 \\\n   --zero_stage $ZERO_STAGE \\ \n   --save_steps 10 \\\n   --deepspeed \\ \n   --output_dir $OUTPUT # 输出路径 \n```\n\n具体可以参考：[**tutorial**](./docs/tutorial.md)\n\n## 分词器\n\nTeleChat的分词算法是BBPE算法，该算法是字节级实现的分词算法，任意Unicode字符都可以被表示。\n\n- TeleChat 的分词器词表大小为160256，是中英双语的词表。\n- BBPE算法的实现工具为huggingface实现的tokenizers开源工具，该工具使用RUST重写，能够较快的进行分词\n- 我们保留了特殊的token\n- <_end> 标识结束\n- <_user> 标识用户问题\n- <_bot> 标识模型回答\n\n# 模型量化\n\n我们使用基于 [AutoGPTQ](https://github.com/PanQiWei/AutoGPTQ) 的量化方案对自研星辰语义大模型TeleChat做量化，提供Int8和Int4的量化模型。\n\n具体量化操作请参考：[**tutorial**](./docs/tutorial.md)，以下是离线量化和量化后推理的样例脚本\n\n## 8bit离线量化\n\n```python\n>>> from transformers import AutoTokenizer\n>>> from auto_gptq import BaseQuantizeConfig\n>>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n>>> tokenizer_path = '../models/7B'\n>>> pretrained_model_dir = '../models/7B'\n>>> quantized_model_dir = '../models/7B_8bit'\n>>> tokenizer = AutoTokenizer.from_pretrained(tokenizer_path, use_fast=True)\n>>> calibration_text = [\"auto-gptq is an easy-to-use model quantization library with user-friendly apis, based on GPTQ algorithm.\"]\n>>> examples = [tokenizer(_) for _ in calibration_text]\n>>> quantize_config = BaseQuantizeConfig( bits=8,  group_size=128,  desc_act=False )\n>>> model = TelechatGPTQForCausalLM.from_pretrained(pretrained_model_dir, quantize_config,trust_remote_code=True)\n>>> model.quantize(examples)\n>>> model.save_quantized(quantized_model_dir)\n```\n\n## 8bit量化模型推理\n\n```python\n>>> from transformers import AutoTokenizer, GenerationConfig\n>>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n>>> PATH = '../models/7B_8bit'\n>>> tokenizer = AutoTokenizer.from_pretrained(PATH, trust_remote_code=True)\n>>> model = TelechatGPTQForCausalLM.from_quantized(PATH, device=\"cuda:0\", inject_fused_mlp=False, inject_fused_attention=False, trust_remote_code=True)\n>>> generate_config = GenerationConfig.from_pretrained(PATH)\n>>> model.eval()\n>>> question = \"生抽与老抽的区别？\"\n>>> answer, history = model.chat(tokenizer=tokenizer, question=question, history=[], generation_config=generate_config, stream=False)\n>>> print(\"回答:\", answer)\n回答: 生抽和老抽是两种不同的酱油，它们的区别如下：\n\n1. 原料不同：生抽是用大豆、面粉等为原料制成的；而老抽则是用豆豉、盐等为原料制成的。\n\n2. 制作工艺不同：生抽是通过将大豆浸泡在水中，然后经过发酵、蒸煮等过程制成的；而老抽则是在生抽的基础上进行进一步的加工和处理，如加入盐、糖、味精等调料。\n\n3. 口感和风味不同：生抽的口感相对较咸，适合用于烹调肉类、海鲜等；而老抽的风味相对较重，适合用于烹调红烧肉、酱爆鸡丁等菜品。\n\n总的来说，生抽和老抽都是常见的酱油品种，它们在原料、制作工艺和口感等方面都有所不同。选择使用哪种酱油，可以根据个人口味和菜品需求来决定。\n```\n\n## 4bit离线量化\n\n```python\n>>> from transformers import AutoTokenizer\n>>> from auto_gptq import BaseQuantizeConfig\n>>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n>>> tokenizer_path = '../models/7B'\n>>> pretrained_model_dir = '../models/7B'\n>>> quantized_model_dir = '../models/7B_4bit'\n>>> tokenizer = AutoTokenizer.from_pretrained(tokenizer_path, use_fast=True)\n>>> calibration_text = [\"auto-gptq is an easy-to-use model quantization library with user-friendly apis, based on GPTQ algorithm.\"]\n>>> examples = [tokenizer(_) for _ in calibration_text]\n>>> quantize_config = BaseQuantizeConfig( bits=4, group_size=128, desc_act=False )\n>>> model = TelechatGPTQForCausalLM.from_pretrained(pretrained_model_dir, quantize_config,trust_remote_code=True)\n>>> model.quantize(examples)\n>>> model.save_quantized(quantized_model_dir)\n```\n\n## 4bit量化模型推理\n\n```python\n>>> from transformers import AutoTokenizer, GenerationConfig\n>>> from modeling_telechat_gptq import TelechatGPTQForCausalLM\n>>> PATH = '../models/7B_4bit'\n>>> tokenizer = AutoTokenizer.from_pretrained(PATH, trust_remote_code=True)\n>>> model = TelechatGPTQForCausalLM.from_quantized(PATH, device=\"cuda:0\", inject_fused_mlp=False, inject_fused_attention=False, trust_remote_code=True)\n>>> generate_config = GenerationConfig.from_pretrained(PATH)\n>>> model.eval()\n>>> question = \"生抽与老抽的区别？\"\n>>> answer, history = model.chat(tokenizer=tokenizer, question=question, history=[], generation_config=generate_config, stream=False)\n>>> print(\"回答:\", answer)\n回答: 生抽和老抽是两种不同的酱油，它们的区别主要体现在以下几个方面：\n\n1. 原料不同：生抽是用大豆、小麦等制成的，而老抽则是用豆豉、盐等制成的。\n\n2. 发酵方式不同：生抽是通过将大豆或小麦浸泡在水中，然后进行发酵制成的；而老抽则是在制作过程中直接将大豆或小麦炒熟后使用。\n\n3. 味道不同：生抽的口感比较鲜美，有咸味和甜味；老抽的味道相对较重，有咸味和苦味。\n\n4. 用途不同：生抽主要用于调味酱料、腌制肉类等；老抽则主要用于烹调菜肴、焖煮食材等。\n```\n\n# 国产化适配\n\n### 昇腾 Atlas 300I Pro 推理卡：推理适配\n\n当前星辰语义大模型TeleChat已支持昇腾 Atlas 300I Pro 推理卡。具备int8量化能力。\n\n- 精度方面，int8量化精度对齐A10；\n\n- 性能方面，具体对比如下：\n  \n  | 输入输出信息      | NPU (tokens/s) | GPU (tokens/s) |\n  | ----------- | -------------- | -------------- |\n  | 输入100输出100  | 15             | 21             |\n  | 输入1000输出100 | 13             | 24             |\n  | 输入2000输出100 | 11             | 19             |\n  | 25组case平均   | 13             | 18             |\n\n- Telechat支持基于昇腾Atlas 300I Pro进行推理并且具备int8量化能力，用户所需的推理部署指导、推理镜像下载等、已发布：[TeleChat-7B](https://gitee.com/ascend/ModelLink/tree/bk_origin_23/mindie_ref/mindie_llm/atb_models/pytorch/examples/telechat)\n\n### 昇腾Atlas 800T A2训练服务器+昇思MindSpore框架:  训练、推理适配\n\n当前星辰语义大模型TeleChat已经支持昇腾Atlas 800T A2训练服务器，可基于昇思MindSpore框架进行模型训练和推理。\n\n- 效果方面，模型训练效果对齐A100，loss基本吻合；\n\n- 性能方面，具体对比如下：\n  \n  | NAME                | performance(samples/s) | Epochs | AMP_Type |\n  | ------------------- | ----------------------:| ------ | --------:|\n  | 7B-8p-GPU(A100-40G) | 8.86                   | 5      | -        |\n  | 7B-8p-NPU           | 7.98                   | 5      | O2       |\n  \n    说明：BatchSize/per-GPU=1，zero-stage=3， seq_length=2048， gradient_accumulation_steps：4\n  \n  | NAME                 | performance(samples/s) | Epochs | AMP_Type |\n  | -------------------- | ----------------------:| ------ | --------:|\n  | 12B-8p-GPU(A100-40G) | 6.85                   | 5      | -        |\n  | 12B-8p-NPU           | 8.22                   | 5      | O2       |\n  \n    说明：BatchSize/per-GPU=1，zero-stage=3， seq_length=1024， gradient_accumulation_steps：4\n\n- TeleChat支持昇腾Atlas 800T A2训练服务器，可基于昇思MindSpore框架进行模型训练，训练所需的modeling、README、 脚本已发布：[TeleChat-MindSpore](https://gitee.com/mindspore/mindformers/tree/dev/research/telechat) \n\n### 昇腾Atlas 800T A2训练服务器+PyTorch框架:  训练、推理适配\n\n当前星辰语义大模型TeleChat已经支持昇腾Atlas 800T A2训练服务器，可基于PyTorch 框架进行模型训练和推理。\n\n- 效果方面，模型训练效果对齐A100，loss基本吻合；\n  \n  <img src=\"./images/910B-pytorch训练loss对比.png\" width = \"300\" height = \"300\" alt=\"PyTorch训练loss对比.png\" />\n\n- 性能方面，具体对比如下：\n  \n  | NAME             | performance(samples/s) | Epochs | AMP_Type |\n  | ---------------- | ----------------------:| ------ | --------:|\n  | 8p-GPU(A100-40G) | 10                     | 5      | -        |\n  | 8p-NPU           | 8.99                   | 5      | O2       |\n  \n    说明：BatchSize/per-GPU=2，zero-stage=3，seq_length=2048， gradient_accumulation_steps：2\n\n- TeleChat支持昇腾Atlas 800T A2训练服务器，可基于PyTorch框架进行模型训练，训练所需的modeling、README、脚本已发布：[TeleChat-7B-PyTorch](https://gitee.com/ascend/ModelZoo-PyTorch/tree/master/PyTorch/contrib/nlp/Telechat)\n\n# 声明、协议、引用\n\n### 声明\n\n我们在此声明，不要使用TeleChat模型及其衍生模型进行任何危害国家社会安全或违法的活动。同时，我们也要求使用者不要将TeleChat模型用于没有安全审查和备案的互联网服务。我们希望所有使用者遵守上述原则，确保科技发展在合法合规的环境下进行。\n\n我们已经尽我们所能，来确保模型训练过程中使用的数据的合规性。然而，尽管我们已经做出了巨大的努力，但由于模型和数据的复杂性，仍有可能存在一些无法预见的问题。因此，如果由于使用TeleChat开源模型而导致的任何问题，包括但不限于数据安全问题、公共舆论风险，或模型被误导、滥用、传播或不当利用所带来的任何风险和问题，我们将不承担任何责任。\n\n### 协议\n\n社区使用 TeleChat 模型需要遵循《[TeleChat模型社区许可协议](./TeleChat模型社区许可协议.pdf)》。TeleChat模型支持商业用途，如果您计划将 TeleChat 模型或其衍生品用于商业目的，您需要通过以下联系邮箱 tele_ai@chinatelecom.cn，提交《TeleChat模型社区许可协议》要求的申请材料。审核通过后，将特此授予您一个非排他性、全球性、不可转让、不可再许可、可撤销的商用版权许可。\n\n### 引用\n\n如需引用我们的工作，请使用如下 reference:\n\n```\n@misc{wang2024telechat,\n      title={TeleChat Technical Report}, \n      author={Zihan Wang and Xinzhang Liu and Shixuan Liu and Yitong Yao and Yuyao Huang and Zhongjiang He and Xuelong Li and Yongxiang Li and Zhonghao Che and Zhaoxi Zhang and Yan Wang and Xin Wang and Luwen Pu and Huihan Xu and Ruiyu Fang and Yu Zhao and Jie Zhang and Xiaomeng Huang and Zhilong Lu and Jiaxin Peng and Wenjun Zheng and Shiquan Wang and Bingkai Yang and Xuewei he and Zhuoru Jiang and Qiyi Xie and Yanhan Zhang and Zhongqiu Li and Lingling Shi and Weiwei Fu and Yin Zhang and Zilu Huang and Sishi Xiong and Yuxiang Zhang and Chao Wang and Shuangyong Song},\n      year={2024},\n      eprint={2401.03804},\n      archivePrefix={arXiv},\n      primaryClass={cs.CL}\n}\n```\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/27", "category": "Multiple", "subtype": "triple_bug", "level": "hard", "example": "", "docstring": "A documentation for MaxKB, an open-source knowledge base question-answering system based on large language models and RAG technology, suitable for various scenarios like enterprise knowledge bases and customer service.", "canonical_solution": "\n\nMaxKB = Max Knowledge Base，是一款基于大语言模型和 RAG 的开源知识库问答系统，广泛应用于企业内部知识库、客户服务、学术研究与教育等场景。\n\n- **开箱即用**：支持直接上传文档 / 自动爬取在线文档，支持文本自动拆分、向量化和 RAG（检索增强生成），有效减少大模型幻觉，智能问答交互体验好；\n- **模型中立**：支持对接各种大模型，包括本地私有大模型（Llama 3 / Qwen 2 等）、国内公共大模型（通义千问 / 腾讯混元 / 字节豆包 / 百度千帆 / 智谱 AI / Kimi 等）和国外公共大模型（OpenAI / Claude / Gemini 等）；\n- **灵活编排**：内置强大的工作流引擎和函数库，支持编排 AI 工作过程，满足复杂业务场景下的需求；\n- **无缝嵌入**：支持零编码快速嵌入到第三方业务系统，让已有系统快速拥有智能问答能力，提高用户满意度。\n\n三分钟视频介绍：https://www.bilibili.com/video/BV18JypYeEkj/\n\n## 快速开始\n\n```\ndocker run -d --name=maxkb --restart=always -p 8080:8080 -v ~/.maxkb:/var/lib/postgresql/data -v ~/.python-packages:/opt/maxkb/app/sandbox/python-packages cr2.fit2cloud.com/1panel/maxkb\n\n# 用户名: admin\n# 密码: MaxKB@123..\n```\n\n- 你也可以通过 [1Panel 应用商店](https://apps.fit2cloud.com/1panel) 快速部署 MaxKB + Ollama + Llama 3 / Qwen 2，快速上线基于本地大模型的 AI 知识库问答系统；\n- 如果是内网环境，推荐使用 [离线安装包](https://community.fit2cloud.com/#/products/maxkb/downloads) 进行安装部署；\n- 你也可以在线体验：[DataEase 小助手](https://dataease.io/docs/v2/)，它是基于 MaxKB 搭建的智能 AI 问答系统，已经嵌入到 DataEase 产品及在线文档中；\n- MaxKB 产品版本分为社区版和专业版，详情请参见：[MaxKB 产品版本对比](https://maxkb.cn/pricing.html)。\n\n如你有更多问题，可以查看使用手册，或者通过论坛与我们交流。\n\n- [使用手册](https://maxkb.cn/docs/)\n- [论坛求助](https://bbs.fit2cloud.com/c/mk/11)\n- 技术交流群\n\n\n\n## UI 展示\n\n<table style=\"border-collapse: collapse; border: 1px solid black;\">\n  <tr>\n    <td style=\"padding: 5px;background-color:#fff;\"><img src= \"https://github.com/1Panel-dev/MaxKB/assets/52996290/d87395fa-a8d7-401c-82bf-c6e475d10ae9\" alt=\"MaxKB Demo1\"   /></td>\n    <td style=\"padding: 5px;background-color:#fff;\"><img src= \"https://github.com/1Panel-dev/MaxKB/assets/52996290/47c35ee4-3a3b-4bd4-9f4f-ee20788b2b9a\" alt=\"MaxKB Demo2\"   /></td>\n  </tr>\n  <tr>\n    <td style=\"padding: 5px;background-color:#fff;\"><img src= \"https://github.com/user-attachments/assets/9a1043cb-fa62-4f71-b9a3-0b46fa59a70e\" alt=\"MaxKB Demo3\"   /></td>\n    <td style=\"padding: 5px;background-color:#fff;\"><img src= \"https://github.com/user-attachments/assets/3407ce9a-779c-4eb4-858e-9441a2ddc664\" alt=\"MaxKB Demo4\"   /></td>\n  </tr>\n</table>\n\n## 技术栈\n\n- 前端：[Vue.js](https://cn.vuejs.org/)\n- 后端：[Python / Django](https://www.djangoproject.com/)\n- LangChain：[LangChain](https://www.langchain.com/)\n- 向量数据库：[PostgreSQL / pgvector](https://www.postgresql.org/)\n- 大模型：各种本地私有或者公共大模型\n\n## 飞致云的其他明星项目\n\n- [1Panel](https://github.com/1panel-dev/1panel/) - 现代化、开源的 Linux 服务器运维管理面板\n- [JumpServer](https://github.com/jumpserver/jumpserver/) - 广受欢迎的开源堡垒机\n- [DataEase](https://github.com/dataease/dataease/) - 人人可用的开源数据可视化分析工具\n- [MeterSphere](https://github.com/metersphere/metersphere/) - 新一代的开源持续测试工具\n- [Halo](https://github.com/halo-dev/halo/) - 强大易用的开源建站工具\n\n## License\n\nCopyright (c) 2014-2024 飞致云 FIT2CLOUD, All rights reserved.\n\nLicensed under The GNU General Public License version 3 (GPLv3)  (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n<https://www.gnu.org/licenses/gpl-3.0.html>\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.", "buggy_code": "\n\n\n\nMaxKB = Max Knowledge Base，是一款基于大语言模型和 RAG 的开源知识库问答系统，广泛应用于企业内部知识库、客户服务、学术研究与教育等场景。\n\n- **开箱即用**：支持直接上传文档 / 自动爬取在线文档，支持文本自动拆分、向量化和 RAG（检索增强生成），有效减少大模型幻觉，智能问答交互体验好；\n- **模型中立**：支持对接各种大模型，包括本地私有大模型（Llama 3 / Qwen 2 等）、国内公共大模型（通义千问 / 腾讯混元 / 字节豆包 / 百度千帆 / 智谱 AI / Kimi 等）和国外公共大模型（OpenAI / Claude / Gemini 等）；\n- **灵活编排**：内置强大的工作流引擎和函数库，支持编排 AI 工作过程，满足复杂业务场景下的需求；\n- **无缝嵌入**：支持零编码快速嵌入到第三方业务系统，让已有系统快速拥有智能问答能力，提高用户满意度。\n\n三分钟视频介绍：https://www.bilibili.com/video/BV18JypYeEkj/\n\n##快速开始\n\n```\ndocker run -d --name=maxkb --restart=always -p 8080:8080 -v ~/.maxkb:/var/lib/postgresql/data -v ~/.python-packages:/opt/maxkb/app/sandbox/python-packages cr2.fit2cloud.com/1panel/maxkb\n\n# 用户名: admin\n# 密码: MaxKB@123..\n```\n\n- 你也可以通过 [1Panel 应用商店](https://apps.fit2cloud.com/1panel) 快速部署 MaxKB + Ollama + Llama 3 / Qwen 2，快速上线基于本地大模型的 AI 知识库问答系统；\n- 如果是内网环境，推荐使用 [离线安装包](https://community.fit2cloud.com/#/products/maxkb/downloads) 进行安装部署；\n- 你也可以在线体验：[DataEase 小助手}(https://dataease.io/docs/v2/)，它是基于 MaxKB 搭建的智能 AI 问答系统，已经嵌入到 DataEase 产品及在线文档中；\n- MaxKB 产品版本分为社区版和专业版，详情请参见：[MaxKB 产品版本对比](https://maxkb.cn/pricing.html)。\n\n如你有更多问题，可以查看使用手册，或者通过论坛与我们交流。\n\n- [使用手册](https://maxkb.cn/docs/)\n- [论坛求助](https://bbs.fit2cloud.com/c/mk/11)\n- 技术交流群\n\n## UI 展示\n\n<table style=\"border-collapse: collapse; border: 1px solid black;\">\n  <tr>\n    <td style=\"padding: 5px;background-color:#fff;\"><img src= \"https://github.com/1Panel-dev/MaxKB/assets/52996290/d87395fa-a8d7-401c-82bf-c6e475d10ae9\" alt=\"MaxKB Demo1\"   /></td>\n    <td style=\"padding: 5px;background-color:#fff;\"<img src= \"https://github.com/1Panel-dev/MaxKB/assets/52996290/47c35ee4-3a3b-4bd4-9f4f-ee20788b2b9a\" alt=\"MaxKB Demo2\"   /></td>\n  </tr>\n  <tr>\n    <td style=\"padding: 5px;background-color:#fff;\"><img src= \"https://github.com/user-attachments/assets/9a1043cb-fa62-4f71-b9a3-0b46fa59a70e\" alt=\"MaxKB Demo3\"   /></td>\n    <td style=\"padding: 5px;background-color:#fff;\"><img src= \"https://github.com/user-attachments/assets/3407ce9a-779c-4eb4-858e-9441a2ddc664\" alt=\"MaxKB Demo4\"   /></td>\n  </tr>\n</table>\n\n## 技术栈\n\n- 前端：[Vue.js](https://cn.vuejs.org/)\n- 后端：[Python / Django](https://www.djangoproject.com/)\n- LangChain：[LangChain](https://www.langchain.com/)\n- 向量数据库：[PostgreSQL / pgvector](https://www.postgresql.org/)\n- 大模型：各种本地私有或者公共大模型\n\n## 飞致云的其他明星项目\n\n- [1Panel](https://github.com/1panel-dev/1panel/) - 现代化、开源的 Linux 服务器运维管理面板\n- [JumpServer](https://github.com/jumpserver/jumpserver/) - 广受欢迎的开源堡垒机\n- [DataEase](https://github.com/dataease/dataease/) - 人人可用的开源数据可视化分析工具\n- [MeterSphere](https://github.com/metersphere/metersphere/) - 新一代的开源持续测试工具\n- [Halo](https://github.com/halo-dev/halo/) - 强大易用的开源建站工具\n\n## License\n\nCopyright (c) 2014-2024 飞致云 FIT2CLOUD, All rights reserved.\n\nLicensed under The GNU General Public License version 3 (GPLv3)  (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n<https://www.gnu.org/licenses/gpl-3.0.html>\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.", "bug_with_line_numbers": "1| MaxKB = Max Knowledge Base，是一款基于大语言模型和 RAG 的开源知识库问答系统，广泛应用于企业内部知识库、客户服务、学术研究与教育等场景。\n2| - **开箱即用**：支持直接上传文档 / 自动爬取在线文档，支持文本自动拆分、向量化和 RAG（检索增强生成），有效减少大模型幻觉，智能问答交互体验好；\n3| - **模型中立**：支持对接各种大模型，包括本地私有大模型（Llama 3 / Qwen 2 等）、国内公共大模型（通义千问 / 腾讯混元 / 字节豆包 / 百度千帆 / 智谱 AI / Kimi 等）和国外公共大模型（OpenAI / Claude / Gemini 等）；\n4| - **灵活编排**：内置强大的工作流引擎和函数库，支持编排 AI 工作过程，满足复杂业务场景下的需求；\n5| - **无缝嵌入**：支持零编码快速嵌入到第三方业务系统，让已有系统快速拥有智能问答能力，提高用户满意度。\n6| 三分钟视频介绍：https://www.bilibili.com/video/BV18JypYeEkj/\n7| ##快速开始\n8| ```\n9| docker run -d --name=maxkb --restart=always -p 8080:8080 -v ~/.maxkb:/var/lib/postgresql/data -v ~/.python-packages:/opt/maxkb/app/sandbox/python-packages cr2.fit2cloud.com/1panel/maxkb\n10| # 用户名: admin\n11| # 密码: MaxKB@123..\n12| ```\n13| - 你也可以通过 [1Panel 应用商店](https://apps.fit2cloud.com/1panel) 快速部署 MaxKB + Ollama + Llama 3 / Qwen 2，快速上线基于本地大模型的 AI 知识库问答系统；\n14| - 如果是内网环境，推荐使用 [离线安装包](https://community.fit2cloud.com/#/products/maxkb/downloads) 进行安装部署；\n15| - 你也可以在线体验：[DataEase 小助手}(https://dataease.io/docs/v2/)，它是基于 MaxKB 搭建的智能 AI 问答系统，已经嵌入到 DataEase 产品及在线文档中；\n16| - MaxKB 产品版本分为社区版和专业版，详情请参见：[MaxKB 产品版本对比](https://maxkb.cn/pricing.html)。\n17| 如你有更多问题，可以查看使用手册，或者通过论坛与我们交流。\n18| - [使用手册](https://maxkb.cn/docs/)\n19| - [论坛求助](https://bbs.fit2cloud.com/c/mk/11)\n20| - 技术交流群\n21| ## UI 展示\n22| <table style=\"border-collapse: collapse; border: 1px solid black;\">\n23|   <tr>\n24|     <td style=\"padding: 5px;background-color:#fff;\"><img src= \"https://github.com/1Panel-dev/MaxKB/assets/52996290/d87395fa-a8d7-401c-82bf-c6e475d10ae9\" alt=\"MaxKB Demo1\"   /></td>\n25|     <td style=\"padding: 5px;background-color:#fff;\"<img src= \"https://github.com/1Panel-dev/MaxKB/assets/52996290/47c35ee4-3a3b-4bd4-9f4f-ee20788b2b9a\" alt=\"MaxKB Demo2\"   /></td>\n26|   </tr>\n27|   <tr>\n28|     <td style=\"padding: 5px;background-color:#fff;\"><img src= \"https://github.com/user-attachments/assets/9a1043cb-fa62-4f71-b9a3-0b46fa59a70e\" alt=\"MaxKB Demo3\"   /></td>\n29|     <td style=\"padding: 5px;background-color:#fff;\"><img src= \"https://github.com/user-attachments/assets/3407ce9a-779c-4eb4-858e-9441a2ddc664\" alt=\"MaxKB Demo4\"   /></td>\n30|   </tr>\n31| </table>\n32| ## 技术栈\n33| - 前端：[Vue.js](https://cn.vuejs.org/)\n34| - 后端：[Python / Django](https://www.djangoproject.com/)\n35| - LangChain：[LangChain](https://www.langchain.com/)\n36| - 向量数据库：[PostgreSQL / pgvector](https://www.postgresql.org/)\n37| - 大模型：各种本地私有或者公共大模型\n38| ## 飞致云的其他明星项目\n39| - [1Panel](https://github.com/1panel-dev/1panel/) - 现代化、开源的 Linux 服务器运维管理面板\n40| - [JumpServer](https://github.com/jumpserver/jumpserver/) - 广受欢迎的开源堡垒机\n41| - [DataEase](https://github.com/dataease/dataease/) - 人人可用的开源数据可视化分析工具\n42| - [MeterSphere](https://github.com/metersphere/metersphere/) - 新一代的开源持续测试工具\n43| - [Halo](https://github.com/halo-dev/halo/) - 强大易用的开源建站工具\n44| ## License\n45| Copyright (c) 2014-2024 飞致云 FIT2CLOUD, All rights reserved.\n46| Licensed under The GNU General Public License version 3 (GPLv3)  (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n47| <https://www.gnu.org/licenses/gpl-3.0.html>\n48| Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.", "fragment_lines": [7, 15, 25], "fragment_content": ["##快速开始", "- 你也可以在线体验：[DataEase 小助手}(https://dataease.io/docs/v2/)，它是基于 MaxKB 搭建的智能 AI 问答系统，已经嵌入到 DataEase 产品及在线文档中；", "<td style=\"padding: 5px;background-color:#fff;\"<img src= \"https://github.com/1Panel-dev/MaxKB/assets/52996290/47c35ee4-3a3b-4bd4-9f4f-ee20788b2b9a\" alt=\"MaxKB Demo2\"   /></td>"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\nMaxKB = Max Knowledge Base，是一款基于大语言模型和 RAG 的开源知识库问答系统，广泛应用于企业内部知识库、客户服务、学术研究与教育等场景。\n\n- **开箱即用**：支持直接上传文档 / 自动爬取在线文档，支持文本自动拆分、向量化和 RAG（检索增强生成），有效减少大模型幻觉，智能问答交互体验好；\n- **模型中立**：支持对接各种大模型，包括本地私有大模型（Llama 3 / Qwen 2 等）、国内公共大模型（通义千问 / 腾讯混元 / 字节豆包 / 百度千帆 / 智谱 AI / Kimi 等）和国外公共大模型（OpenAI / Claude / Gemini 等）；\n- **灵活编排**：内置强大的工作流引擎和函数库，支持编排 AI 工作过程，满足复杂业务场景下的需求；\n- **无缝嵌入**：支持零编码快速嵌入到第三方业务系统，让已有系统快速拥有智能问答能力，提高用户满意度。\n\n三分钟视频介绍：https://www.bilibili.com/video/BV18JypYeEkj/\n\n##快速开始\n\n```\ndocker run -d --name=maxkb --restart=always -p 8080:8080 -v ~/.maxkb:/var/lib/postgresql/data -v ~/.python-packages:/opt/maxkb/app/sandbox/python-packages cr2.fit2cloud.com/1panel/maxkb\n\n# 用户名: admin\n# 密码: MaxKB@123..\n```\n\n- 你也可以通过 [1Panel 应用商店](https://apps.fit2cloud.com/1panel) 快速部署 MaxKB + Ollama + Llama 3 / Qwen 2，快速上线基于本地大模型的 AI 知识库问答系统；\n- 如果是内网环境，推荐使用 [离线安装包](https://community.fit2cloud.com/#/products/maxkb/downloads) 进行安装部署；\n- 你也可以在线体验：[DataEase 小助手}(https://dataease.io/docs/v2/)，它是基于 MaxKB 搭建的智能 AI 问答系统，已经嵌入到 DataEase 产品及在线文档中；\n- MaxKB 产品版本分为社区版和专业版，详情请参见：[MaxKB 产品版本对比](https://maxkb.cn/pricing.html)。\n\n如你有更多问题，可以查看使用手册，或者通过论坛与我们交流。\n\n- [使用手册](https://maxkb.cn/docs/)\n- [论坛求助](https://bbs.fit2cloud.com/c/mk/11)\n- 技术交流群\n\n## UI 展示\n\n<table style=\"border-collapse: collapse; border: 1px solid black;\">\n  <tr>\n    <td style=\"padding: 5px;background-color:#fff;\"><img src= \"https://github.com/1Panel-dev/MaxKB/assets/52996290/d87395fa-a8d7-401c-82bf-c6e475d10ae9\" alt=\"MaxKB Demo1\"   /></td>\n    <td style=\"padding: 5px;background-color:#fff;\"<img src= \"https://github.com/1Panel-dev/MaxKB/assets/52996290/47c35ee4-3a3b-4bd4-9f4f-ee20788b2b9a\" alt=\"MaxKB Demo2\"   /></td>\n  </tr>\n  <tr>\n    <td style=\"padding: 5px;background-color:#fff;\"><img src= \"https://github.com/user-attachments/assets/9a1043cb-fa62-4f71-b9a3-0b46fa59a70e\" alt=\"MaxKB Demo3\"   /></td>\n    <td style=\"padding: 5px;background-color:#fff;\"><img src= \"https://github.com/user-attachments/assets/3407ce9a-779c-4eb4-858e-9441a2ddc664\" alt=\"MaxKB Demo4\"   /></td>\n  </tr>\n</table>\n\n## 技术栈\n\n- 前端：[Vue.js](https://cn.vuejs.org/)\n- 后端：[Python / Django](https://www.djangoproject.com/)\n- LangChain：[LangChain](https://www.langchain.com/)\n- 向量数据库：[PostgreSQL / pgvector](https://www.postgresql.org/)\n- 大模型：各种本地私有或者公共大模型\n\n## 飞致云的其他明星项目\n\n- [1Panel](https://github.com/1panel-dev/1panel/) - 现代化、开源的 Linux 服务器运维管理面板\n- [JumpServer](https://github.com/jumpserver/jumpserver/) - 广受欢迎的开源堡垒机\n- [DataEase](https://github.com/dataease/dataease/) - 人人可用的开源数据可视化分析工具\n- [MeterSphere](https://github.com/metersphere/metersphere/) - 新一代的开源持续测试工具\n- [Halo](https://github.com/halo-dev/halo/) - 强大易用的开源建站工具\n\n## License\n\nCopyright (c) 2014-2024 飞致云 FIT2CLOUD, All rights reserved.\n\nLicensed under The GNU General Public License version 3 (GPLv3)  (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at\n\n<https://www.gnu.org/licenses/gpl-3.0.html>\n\nUnless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/28", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "An overview of a web-based e-commerce management system developed as a Java group project, including system goals, module design, and future outlook.", "canonical_solution": "# 电商管理系统\n\n## 介绍\n\nJava小组作业：电商管理系统\n\n## 项目概述\n\n该系统是一个基于 Web 的电子商城系统，旨在实现在线购物、订单管理、用户管理等功能。用户可以在平台上浏览商品、选择规格、加入购物车，然后通过结账付款生成订单，并在个人中心查看订单状态。管理员可以对商品分类、商品信息、订单信息进行管理和维护。系统目标是建立一个快速、方便的在线购物平台，提供个性化、智能化、安全可靠的服务体验，为消费者提供丰富的商品选择，以及一个公平、透明和可靠的交易环境。\n\n## 系统目标\n\n本系统的设计目标是提供一个完整的购物体验，包括商品浏览、下单、付款、发货等流程。系统的前端使用 Vue 框架实现，后端使用 Spring Boot 框架实现。主要功能包括商品管理、商品分类、订单管理、用户管理（分管理员和普通用户）、购物车管理等。\n\n## 模块设计\n\n### 模块基本信息\n\n#### 商品管理模块\n\n- **模块描述**：负责对商品进行增删改查等基本操作，包括商品信息的录入、维护和展示，商品图片的上传、展示和删除，商品状态的管理等功能。\n\n#### 商品分类模块\n\n- **模块描述**：负责商品分类的管理，包括商品分类的层级关系维护、新增、修改、删除等基本操作。\n\n#### 订单管理模块\n\n- **模块描述**：负责订单相关的基础操作，包括订单的查询、创建、删除等功能。\n\n#### 用户管理模块\n\n- **模块描述**：负责用户信息相关功能，包括用户注册、登录、个人信息维护等操作。\n\n#### 购物车管理模块\n\n- **模块描述**：负责购物车的管理，包括加入购物车、调整商品数量、删除商品、结算等基本操作。\n\n## 项目背景\n\n随着互联网技术的发展和普及，电子商务在全球范围内迅猛发展，成为一种重要的商业模式和生活方式。电子商城作为电子商务的重要组成部分，通过网络进行产品和服务的销售，已经成为了线上交易和消费的主要方式。人们可以方便快捷地购买所需商品和服务，并享受线上购物的便利性和舒适性。\n\n基于这一背景，我们决定开发一个功能强大、易于使用、可靠性高的商城系统，以满足用户在线购物的需求。该系统支持多种商品和服务的销售、多种支付方式和物流配送方式，提供优惠券和积分等扩展功能，为用户提供舒适的购物体验和服务。同时，我们采用最新的技术和开发模式，在保证系统稳定运行的同时，不断推出新功能和特性，以满足用户不断增长的需求和期望。\n\n## 系统功能\n\n- **商品浏览**：用户可以浏览不同分类的商品，查看商品详情和规格。\n- **购物车管理**：用户可以将商品加入购物车，调整商品数量或删除商品，并进行结算操作。\n- **订单管理**：用户可以创建订单、查看订单状态，并进行订单的管理操作。\n- **用户管理**：用户可以注册、登录，并维护个人信息。管理员可以管理用户权限。\n- **商品管理**：管理员可以对商品进行增删改查，包括商品信息的录入、维护和展示。\n- **商品分类管理**：管理员可以维护商品分类的层级关系，进行新增、修改、删除操作。\n\n## 技术栈\n\n- **前端**：Vue.js\n- **后端**：Spring Boot\n- **数据库**：根据实际需求选择合适的数据库（如 MySQL）\n\n## 展望未来\n\n我们将继续优化系统性能，提高用户体验，并不断增加新功能，如社交分享、智能推荐等，以满足用户和商家的更多需求。此外，我们还将积极探索更多创新的技术和模式，如人工智能、区块链等，以进一步提升商城系统的竞争力。\n\n---\n\n以上内容全面介绍了该电子商城系统的设计目标、模块设计和项目背景，系统致力于提供一个简单易用、高效实用的电子商城平台，帮助商家更好地提供商品服务，圆满完成交易。\n\n# ", "buggy_code": "# 电商管理系统\n\n#### 介绍\n\nJava小组作业：电商管理系统\n\n## 项目概述\n\n该系统是一个基于 Web 的电子商城系统，旨在实现在线购物、订单管理、用户管理等功能。用户可以在平台上浏览商品、选择规格、加入购物车，然后通过结账付款生成订单，并在个人中心查看订单状态。管理员可以对商品分类、商品信息、订单信息进行管理和维护。系统目标是建立一个快速、方便的在线购物平台，提供个性化、智能化、安全可靠的服务体验，为消费者提供丰富的商品选择，以及一个公平、透明和可靠的交易环境。\n\n## 系统目标\n\n本系统的设计目标是提供一个完整的购物体验，包括商品浏览、下单、付款、发货等流程。系统的前端使用 Vue 框架实现，后端使用 Spring Boot 框架实现。主要功能包括商品管理、商品分类、订单管理、用户管理（分管理员和普通用户）、购物车管理等。\n\n## 模块设计\n\n### 模块基本信息\n\n#### 商品管理模块\n\n- **模块描述：负责对商品进行增删改查等基本操作，包括商品信息的录入、维护和展示，商品图片的上传、展示和删除，商品状态的管理等功能。\n\n#### 商品分类模块\n\n- **模块描述**：负责商品分类的管理，包括商品分类的层级关系维护、新增、修改、删除等基本操作。\n\n#### 订单管理模块\n\n- **模块描述**：负责订单相关的基础操作，包括订单的查询、创建、删除等功能。\n\n#### 用户管理模块\n\n- **模块描述**：负责用户信息相关功能，包括用户注册、登录、个人信息维护等操作。\n\n#### 购物车管理模块\n\n- **模块描述**：负责购物车的管理，包括加入购物车、调整商品数量、删除商品、结算等基本操作。\n\n## 项目背景\n\n随着互联网技术的发展和普及，电子商务在全球范围内迅猛发展，成为一种重要的商业模式和生活方式。电子商城作为电子商务的重要组成部分，通过网络进行产品和服务的销售，已经成为了线上交易和消费的主要方式。人们可以方便快捷地购买所需商品和服务，并享受线上购物的便利性和舒适性。\n\n基于这一背景，我们决定开发一个功能强大、易于使用、可靠性高的商城系统，以满足用户在线购物的需求。该系统支持多种商品和服务的销售、多种支付方式和物流配送方式，提供优惠券和积分等扩展功能，为用户提供舒适的购物体验和服务。同时，我们采用最新的技术和开发模式，在保证系统稳定运行的同时，不断推出新功能和特性，以满足用户不断增长的需求和期望。\n\n## 系统功能\n\n- **商品浏览**：用户可以浏览不同分类的商品，查看商品详情和规格。\n- **购物车管理**：用户可以将商品加入购物车，调整商品数量或删除商品，并进行结算操作。\n- **订单管理**：用户可以创建订单、查看订单状态，并进行订单的管理操作。\n- **用户管理**：用户可以注册、登录，并维护个人信息。管理员可以管理用户权限。\n- **商品管理**：管理员可以对商品进行增删改查，包括商品信息的录入、维护和展示。\n- **商品分类管理**：管理员可以维护商品分类的层级关系，进行新增、修改、删除操作。\n\n## 技术栈\n\n- **前端**：Vue.js\n- **后端**：Spring Boot\n- **数据库**：根据实际需求选择合适的数据库（如 MySQL）\n\n## 展望未来\n\n我们将继续优化系统性能，提高用户体验，并不断增加新功能，如社交分享、智能推荐等，以满足用户和商家的更多需求。此外，我们还将积极探索更多创新的技术和模式，如人工智能、区块链等，以进一步提升商城系统的竞争力。\n\n---\n\n以上内容全面介绍了该电子商城系统的设计目标、模块设计和项目背景，系统致力于提供一个简单易用、高效实用的电子商城平台，帮助商家更好地提供商品服务，圆满完成交易。\n\n# ", "bug_with_line_numbers": "   1 | # 电商管理系统\n   2 | #### 介绍\n   3 | Java小组作业：电商管理系统\n   4 | ## 项目概述\n   5 | 该系统是一个基于 Web 的电子商城系统，旨在实现在线购物、订单管理、用户管理等功能。用户可以在平台上浏览商品、选择规格、加入购物车，然后通过结账付款生成订单，并在个人中心查看订单状态。管理员可以对商品分类 、商品信息、订单信息进行管理和维护。系统目标是建立一个快速、方便的在线购物平台，提供个性化、智能化、安全可靠的服务体验，为消费者提供丰富的商品选择，以及一个公平、透明和可靠的交易环境。\n   6 | ## 系统目标\n   7 | 本系统的设计目标是提供一个完整的购物体验，包括商品浏览、下单、付款、发货等流程。系统的前端使用 Vue 框架实现，后端使用 Spring Boot 框架实现。主要功能包括商品管理、商品分类、订单管理、用户管理（分管理员和普通用户）、购物车管理等。\n   8 | ## 模块设计\n   9 | ### 模块基本信息\n  10 | #### 商品管理模块\n  11 | - **模块描述：负责对商品进行增删改查等基本操作，包括商品信息的录入、维护和展示，商品图片的上传、展示和删除，商品状态的管理等功能。\n  12 | #### 商品分类模块\n  13 | - **模块描述**：负责商品分类的管理，包括商品分类的层级关系维护、新增、修改、删除等基本操作。\n  14 | #### 订单管理模块\n  15 | - **模块描述**：负责订单相关的基础操作，包括订单的查询、创建、删除等功能。\n  16 | #### 用户管理模块\n  17 | - **模块描述**：负责用户信息相关功能，包括用户注册、登录、个人信息维护等操作。\n  18 | #### 购物车管理模块\n  19 | - **模块描述**：负责购物车的管理，包括加入购物车、调整商品数量、删除商品、结算等基本操作。\n  20 | ## 项目背景\n  21 | 随着互联网技术的发展和普及，电子商务在全球范围内迅猛发展，成为一种重要的商业模式和生活方式。电子商城作为电子商务的重要组成部分，通过网络进行产品和服务的销售，已经成为了线上交易和消费的主要方式。人们可以方便快捷地购买所需商品和服务，并享受线上购物的便利性和舒适性。\n  22 | 基于这一背景，我们决定开发一个功能强大、易于使用、可靠性高的商城系统，以满足用户在线购物的需求。该系统支持多种商品和服务的销售、多种支付方式和物流配送方式，提供优惠券和积分等扩展功能，为用户提供舒适的购物体验和服务。同时，我们采用最新的技术和开发模式，在保证系统稳定运行的同时，不断推出新功能和特性，以满足用户不断增长的需求和期望。\n  23 | ## 系统功能\n  24 | - **商品浏览**：用户可以浏览不同分类的商品，查看商品详情和规格。\n  25 | - **购物车管理**：用户可以将商品加入购物车，调整商品数量或删除商品，并进行结算操作。\n  26 | - **订单管理**：用户可以创建订单、查看订单状态，并进行订单的管理操作。\n  27 | - **用户管理**：用户可以注册、登录，并维护个人信息。管理员可以管理用户权限。\n  28 | - **商品管理**：管理员可以对商品进行增删改查，包括商品信息的录入、维护和展示。\n  29 | - **商品分类管理**：管理员可以维护商品分类的层级关系，进行新增、修改、删除操作。\n  30 | ## 技术栈\n  31 | - **前端**：Vue.js\n  32 | - **后端**：Spring Boot\n  33 | - **数据库**：根据实际需求选择合适的数据库（如 MySQL）\n  34 | ## 展望未来\n  35 | 我们将继续优化系统性能，提高用户体验，并不断增加新功能，如社交分享、智能推荐等，以满足用户和商家的更多需求。此外，我们还将积极探索更多创新的技术和模式，如人工智能、区块链等，以进一步提升商城系统的竞争力。\n  36 | ---\n  37 | 以上内容全面介绍了该电子商城系统的设计目标、模块设计和项目背景，系统致力于提供一个简单易用、高效实用的电子商城平台，帮助商家更好地提供商品服务，圆满完成交易。\n  38 | #", "fragment_lines": [2, 11], "fragment_content": ["#### 介绍", "- **模块描述：负责对商品进行增删改查等基本操作，包括商品信息的录入、维护和展示，商品图片的上传、展示和删除，商品状态的管理等功能。"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 电商管理系统\n\n#### 介绍\n\nJava小组作业：电商管理系统\n\n## 项目概述\n\n该系统是一个基于 Web 的电子商城系统，旨在实现在线购物、订单管理、用户管理等功能。用户可以在平台上浏览商品、选择规格、加入购物车，然后通过结账付款生成订单，并在个人中心查看订单状态。管理员可以对商品分类、商品信息、订单信息进行管理和维护。系统目标是建立一个快速、方便的在线购物平台，提供个性化、智能化、安全可靠的服务体验，为消费者提供丰富的商品选择，以及一个公平、透明和可靠的交易环境。\n\n## 系统目标\n\n本系统的设计目标是提供一个完整的购物体验，包括商品浏览、下单、付款、发货等流程。系统的前端使用 Vue 框架实现，后端使用 Spring Boot 框架实现。主要功能包括商品管理、商品分类、订单管理、用户管理（分管理员和普通用户）、购物车管理等。\n\n## 模块设计\n\n### 模块基本信息\n\n#### 商品管理模块\n\n- **模块描述：负责对商品进行增删改查等基本操作，包括商品信息的录入、维护和展示，商品图片的上传、展示和删除，商品状态的管理等功能。\n\n#### 商品分类模块\n\n- **模块描述**：负责商品分类的管理，包括商品分类的层级关系维护、新增、修改、删除等基本操作。\n\n#### 订单管理模块\n\n- **模块描述**：负责订单相关的基础操作，包括订单的查询、创建、删除等功能。\n\n#### 用户管理模块\n\n- **模块描述**：负责用户信息相关功能，包括用户注册、登录、个人信息维护等操作。\n\n#### 购物车管理模块\n\n- **模块描述**：负责购物车的管理，包括加入购物车、调整商品数量、删除商品、结算等基本操作。\n\n## 项目背景\n\n随着互联网技术的发展和普及，电子商务在全球范围内迅猛发展，成为一种重要的商业模式和生活方式。电子商城作为电子商务的重要组成部分，通过网络进行产品和服务的销售，已经成为了线上交易和消费的主要方式。人们可以方便快捷地购买所需商品和服务，并享受线上购物的便利性和舒适性。\n\n基于这一背景，我们决定开发一个功能强大、易于使用、可靠性高的商城系统，以满足用户在线购物的需求。该系统支持多种商品和服务的销售、多种支付方式和物流配送方式，提供优惠券和积分等扩展功能，为用户提供舒适的购物体验和服务。同时，我们采用最新的技术和开发模式，在保证系统稳定运行的同时，不断推出新功能和特性，以满足用户不断增长的需求和期望。\n\n## 系统功能\n\n- **商品浏览**：用户可以浏览不同分类的商品，查看商品详情和规格。\n- **购物车管理**：用户可以将商品加入购物车，调整商品数量或删除商品，并进行结算操作。\n- **订单管理**：用户可以创建订单、查看订单状态，并进行订单的管理操作。\n- **用户管理**：用户可以注册、登录，并维护个人信息。管理员可以管理用户权限。\n- **商品管理**：管理员可以对商品进行增删改查，包括商品信息的录入、维护和展示。\n- **商品分类管理**：管理员可以维护商品分类的层级关系，进行新增、修改、删除操作。\n\n## 技术栈\n\n- **前端**：Vue.js\n- **后端**：Spring Boot\n- **数据库**：根据实际需求选择合适的数据库（如 MySQL）\n\n## 展望未来\n\n我们将继续优化系统性能，提高用户体验，并不断增加新功能，如社交分享、智能推荐等，以满足用户和商家的更多需求。此外，我们还将积极探索更多创新的技术和模式，如人工智能、区块链等，以进一步提升商城系统的竞争力。\n\n---\n\n以上内容全面介绍了该电子商城系统的设计目标、模块设计和项目背景，系统致力于提供一个简单易用、高效实用的电子商城平台，帮助商家更好地提供商品服务，圆满完成交易。\n\n#\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/29", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "An overview of a web-based e-commerce management system developed as a Java group project, including system goals, module design, and future outlook.", "canonical_solution": "# 电商管理系统\n\n## 介绍\n\nJava小组作业：电商管理系统\n\n## 项目概述\n\n该系统是一个基于 Web 的电子商城系统，旨在实现在线购物、订单管理、用户管理等功能。用户可以在平台上浏览商品、选择规格、加入购物车，然后通过结账付款生成订单，并在个人中心查看订单状态。管理员可以对商品分类、商品信息、订单信息进行管理和维护。系统目标是建立一个快速、方便的在线购物平台，提供个性化、智能化、安全可靠的服务体验，为消费者提供丰富的商品选择，以及一个公平、透明和可靠的交易环境。\n\n## 系统目标\n\n本系统的设计目标是提供一个完整的购物体验，包括商品浏览、下单、付款、发货等流程。系统的前端使用 Vue 框架实现，后端使用 Spring Boot 框架实现。主要功能包括商品管理、商品分类、订单管理、用户管理（分管理员和普通用户）、购物车管理等。\n\n## 模块设计\n\n### 模块基本信息\n\n#### 商品管理模块\n\n- **模块描述**：负责对商品进行增删改查等基本操作，包括商品信息的录入、维护和展示，商品图片的上传、展示和删除，商品状态的管理等功能。\n\n#### 商品分类模块\n\n- **模块描述**：负责商品分类的管理，包括商品分类的层级关系维护、新增、修改、删除等基本操作。\n\n#### 订单管理模块\n\n- **模块描述**：负责订单相关的基础操作，包括订单的查询、创建、删除等功能。\n\n#### 用户管理模块\n\n- **模块描述**：负责用户信息相关功能，包括用户注册、登录、个人信息维护等操作。\n\n#### 购物车管理模块\n\n- **模块描述**：负责购物车的管理，包括加入购物车、调整商品数量、删除商品、结算等基本操作。\n\n## 项目背景\n\n随着互联网技术的发展和普及，电子商务在全球范围内迅猛发展，成为一种重要的商业模式和生活方式。电子商城作为电子商务的重要组成部分，通过网络进行产品和服务的销售，已经成为了线上交易和消费的主要方式。人们可以方便快捷地购买所需商品和服务，并享受线上购物的便利性和舒适性。\n\n基于这一背景，我们决定开发一个功能强大、易于使用、可靠性高的商城系统，以满足用户在线购物的需求。该系统支持多种商品和服务的销售、多种支付方式和物流配送方式，提供优惠券和积分等扩展功能，为用户提供舒适的购物体验和服务。同时，我们采用最新的技术和开发模式，在保证系统稳定运行的同时，不断推出新功能和特性，以满足用户不断增长的需求和期望。\n\n## 系统功能\n\n- **商品浏览**：用户可以浏览不同分类的商品，查看商品详情和规格。\n- **购物车管理**：用户可以将商品加入购物车，调整商品数量或删除商品，并进行结算操作。\n- **订单管理**：用户可以创建订单、查看订单状态，并进行订单的管理操作。\n- **用户管理**：用户可以注册、登录，并维护个人信息。管理员可以管理用户权限。\n- **商品管理**：管理员可以对商品进行增删改查，包括商品信息的录入、维护和展示。\n- **商品分类管理**：管理员可以维护商品分类的层级关系，进行新增、修改、删除操作。\n\n## 技术栈\n\n- **前端**：Vue.js\n- **后端**：Spring Boot\n- **数据库**：根据实际需求选择合适的数据库（如 MySQL）\n\n## 展望未来\n\n我们将继续优化系统性能，提高用户体验，并不断增加新功能，如社交分享、智能推荐等，以满足用户和商家的更多需求。此外，我们还将积极探索更多创新的技术和模式，如人工智能、区块链等，以进一步提升商城系统的竞争力。\n\n---\n\n以上内容全面介绍了该电子商城系统的设计目标、模块设计和项目背景，系统致力于提供一个简单易用、高效实用的电子商城平台，帮助商家更好地提供商品服务，圆满完成交易。\n\n# ", "buggy_code": "# 电商管理系统\n\n## 介绍\n\nJava小组作业：电商管理系统\n\n##项目概述\n\n该系统是一个基于 Web 的电子商城系统，旨在实现在线购物、订单管理、用户管理等功能。用户可以在平台上浏览商品、选择规格、加入购物车，然后通过结账付款生成订单，并在个人中心查看订单状态。管理员可以对商品分类、商品信息、订单信息进行管理和维护。系统目标是建立一个快速、方便的在线购物平台，提供个性化、智能化、安全可靠的服务体验，为消费者提供丰富的商品选择，以及一个公平、透明和可靠的交易环境。\n\n##系统目标\n\n本系统的设计目标是提供一个完整的购物体验，包括商品浏览、下单、付款、发货等流程。系统的前端使用 Vue 框架实现，后端使用 Spring Boot 框架实现。主要功能包括商品管理、商品分类、订单管理、用户管理（分管理员和普通用户）、购物车管理等。\n\n## 模块设计\n\n### 模块基本信息\n\n#### 商品管理模块\n\n- **模块描述**：负责对商品进行增删改查等基本操作，包括商品信息的录入、维护和展示，商品图片的上传、展示和删除，商品状态的管理等功能。\n\n#### 商品分类模块\n\n- **模块描述**：负责商品分类的管理，包括商品分类的层级关系维护、新增、修改、删除等基本操作。\n\n#### 订单管理模块\n\n- **模块描述**：负责订单相关的基础操作，包括订单的查询、创建、删除等功能。\n\n#### 用户管理模块\n\n- **模块描述**：负责用户信息相关功能，包括用户注册、登录、个人信息维护等操作。\n\n#### 购物车管理模块\n\n- **模块描述**：负责购物车的管理，包括加入购物车、调整商品数量、删除商品、结算等基本操作。\n\n## 项目背景\n\n随着互联网技术的发展和普及，电子商务在全球范围内迅猛发展，成为一种重要的商业模式和生活方式。电子商城作为电子商务的重要组成部分，通过网络进行产品和服务的销售，已经成为了线上交易和消费的主要方式。人们可以方便快捷地购买所需商品和服务，并享受线上购物的便利性和舒适性。\n\n基于这一背景，我们决定开发一个功能强大、易于使用、可靠性高的商城系统，以满足用户在线购物的需求。该系统支持多种商品和服务的销售、多种支付方式和物流配送方式，提供优惠券和积分等扩展功能，为用户提供舒适的购物体验和服务。同时，我们采用最新的技术和开发模式，在保证系统稳定运行的同时，不断推出新功能和特性，以满足用户不断增长的需求和期望。\n\n## 系统功能\n\n- **商品浏览**：用户可以浏览不同分类的商品，查看商品详情和规格。\n- **购物车管理**：用户可以将商品加入购物车，调整商品数量或删除商品，并进行结算操作。\n- **订单管理**：用户可以创建订单、查看订单状态，并进行订单的管理操作。\n- **用户管理**：用户可以注册、登录，并维护个人信息。管理员可以管理用户权限。\n- **商品管理**：管理员可以对商品进行增删改查，包括商品信息的录入、维护和展示。\n- **商品分类管理**：管理员可以维护商品分类的层级关系，进行新增、修改、删除操作。\n\n## 技术栈\n\n- **前端**：Vue.js\n- **后端**：Spring Boot\n- **数据库**：根据实际需求选择合适的数据库（如 MySQL）\n\n## 展望未来\n\n我们将继续优化系统性能，提高用户体验，并不断增加新功能，如社交分享、智能推荐等，以满足用户和商家的更多需求。此外，我们还将积极探索更多创新的技术和模式，如人工智能、区块链等，以进一步提升商城系统的竞争力。\n\n---\n\n以上内容全面介绍了该电子商城系统的设计目标、模块设计和项目背景，系统致力于提供一个简单易用、高效实用的电子商城平台，帮助商家更好地提供商品服务，圆满完成交易。\n\n# ", "bug_with_line_numbers": "   1 | # 电商管理系统\n   2 | ## 介绍\n   3 | Java小组作业：电商管理系统\n   4 | ##项目概述\n   5 | 该系统是一个基于 Web 的电子商城系统，旨在实现在线购物、订单管理、用户管理等功能。用户可以在平台上浏览商品、选择规格、加入购物车，然后通过结账付款生成订单，并在个人中心查看订单状态。管理员可以对商品分类 、商品信息、订单信息进行管理和维护。系统目标是建立一个快速、方便的在线购物平台，提供个性化、智能化、安全可靠的服务体验，为消费者提供丰富的商品选择，以及一个公平、透明和可靠的交易环境。\n   6 | ##系统目标\n   7 | 本系统的设计目标是提供一个完整的购物体验，包括商品浏览、下单、付款、发货等流程。系统的前端使用 Vue 框架实现，后端使用 Spring Boot 框架实现。主要功能包括商品管理、商品分类、订单管理、用户管理（分管理员和普通用户）、购物车管理等。\n   8 | ## 模块设计\n   9 | ### 模块基本信息\n  10 | #### 商品管理模块\n  11 | - **模块描述**：负责对商品进行增删改查等基本操作，包括商品信息的录入、维护和展示，商品图片的上传、展示和删除，商品状态的管理等功能。\n  12 | #### 商品分类模块\n  13 | - **模块描述**：负责商品分类的管理，包括商品分类的层级关系维护、新增、修改、删除等基本操作。\n  14 | #### 订单管理模块\n  15 | - **模块描述**：负责订单相关的基础操作，包括订单的查询、创建、删除等功能。\n  16 | #### 用户管理模块\n  17 | - **模块描述**：负责用户信息相关功能，包括用户注册、登录、个人信息维护等操作。\n  18 | #### 购物车管理模块\n  19 | - **模块描述**：负责购物车的管理，包括加入购物车、调整商品数量、删除商品、结算等基本操作。\n  20 | ## 项目背景\n  21 | 随着互联网技术的发展和普及，电子商务在全球范围内迅猛发展，成为一种重要的商业模式和生活方式。电子商城作为电子商务的重要组成部分，通过网络进行产品和服务的销售，已经成为了线上交易和消费的主要方式。人们可以方便快捷地购买所需商品和服务，并享受线上购物的便利性和舒适性。\n  22 | 基于这一背景，我们决定开发一个功能强大、易于使用、可靠性高的商城系统，以满足用户在线购物的需求。该系统支持多种商品和服务的销售、多种支付方式和物流配送方式，提供优惠券和积分等扩展功能，为用户提供舒适的购物体验和服务。同时，我们采用最新的技术和开发模式，在保证系统稳定运行的同时，不断推出新功能和特性，以满足用户不断增长的需求和期望。\n  23 | ## 系统功能\n  24 | - **商品浏览**：用户可以浏览不同分类的商品，查看商品详情和规格。\n  25 | - **购物车管理**：用户可以将商品加入购物车，调整商品数量或删除商品，并进行结算操作。\n  26 | - **订单管理**：用户可以创建订单、查看订单状态，并进行订单的管理操作。\n  27 | - **用户管理**：用户可以注册、登录，并维护个人信息。管理员可以管理用户权限。\n  28 | - **商品管理**：管理员可以对商品进行增删改查，包括商品信息的录入、维护和展示。\n  29 | - **商品分类管理**：管理员可以维护商品分类的层级关系，进行新增、修改、删除操作。\n  30 | ## 技术栈\n  31 | - **前端**：Vue.js\n  32 | - **后端**：Spring Boot\n  33 | - **数据库**：根据实际需求选择合适的数据库（如 MySQL）\n  34 | ## 展望未来\n  35 | 我们将继续优化系统性能，提高用户体验，并不断增加新功能，如社交分享、智能推荐等，以满足用户和商家的更多需求。此外，我们还将积极探索更多创新的技术和模式，如人工智能、区块链等，以进一步提升商城系统的竞争力。\n  36 | ---\n  37 | 以上内容全面介绍了该电子商城系统的设计目标、模块设计和项目背景，系统致力于提供一个简单易用、高效实用的电子商城平台，帮助商家更好地提供商品服务，圆满完成交易。\n  38 | #", "fragment_lines": [2, 4], "fragment_content": ["## 介绍", "##项目概述"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 电商管理系统\n\n## 介绍\n\nJava小组作业：电商管理系统\n\n##项目概述\n\n该系统是一个基于 Web 的电子商城系统，旨在实现在线购物、订单管理、用户管理等功能。用户可以在平台上浏览商品、选择规格、加入购物车，然后通过结账付款生成订单，并在个人中心查看订单状态。管理员可以对商品分类、商品信息、订单信息进行管理和维护。系统目标是建立一个快速、方便的在线购物平台，提供个性化、智能化、安全可靠的服务体验，为消费者提供丰富的商品选择，以及一个公平、透明和可靠的交易环境。\n\n##系统目标\n\n本系统的设计目标是提供一个完整的购物体验，包括商品浏览、下单、付款、发货等流程。系统的前端使用 Vue 框架实现，后端使用 Spring Boot 框架实现。主要功能包括商品管理、商品分类、订单管理、用户管理（分管理员和普通用户）、购物车管理等。\n\n## 模块设计\n\n### 模块基本信息\n\n#### 商品管理模块\n\n- **模块描述**：负责对商品进行增删改查等基本操作，包括商品信息的录入、维护和展示，商品图片的上传、展示和删除，商品状态的管理等功能。\n\n#### 商品分类模块\n\n- **模块描述**：负责商品分类的管理，包括商品分类的层级关系维护、新增、修改、删除等基本操作。\n\n#### 订单管理模块\n\n- **模块描述**：负责订单相关的基础操作，包括订单的查询、创建、删除等功能。\n\n#### 用户管理模块\n\n- **模块描述**：负责用户信息相关功能，包括用户注册、登录、个人信息维护等操作。\n\n#### 购物车管理模块\n\n- **模块描述**：负责购物车的管理，包括加入购物车、调整商品数量、删除商品、结算等基本操作。\n\n## 项目背景\n\n随着互联网技术的发展和普及，电子商务在全球范围内迅猛发展，成为一种重要的商业模式和生活方式。电子商城作为电子商务的重要组成部分，通过网络进行产品和服务的销售，已经成为了线上交易和消费的主要方式。人们可以方便快捷地购买所需商品和服务，并享受线上购物的便利性和舒适性。\n\n基于这一背景，我们决定开发一个功能强大、易于使用、可靠性高的商城系统，以满足用户在线购物的需求。该系统支持多种商品和服务的销售、多种支付方式和物流配送方式，提供优惠券和积分等扩展功能，为用户提供舒适的购物体验和服务。同时，我们采用最新的技术和开发模式，在保证系统稳定运行的同时，不断推出新功能和特性，以满足用户不断增长的需求和期望。\n\n## 系统功能\n\n- **商品浏览**：用户可以浏览不同分类的商品，查看商品详情和规格。\n- **购物车管理**：用户可以将商品加入购物车，调整商品数量或删除商品，并进行结算操作。\n- **订单管理**：用户可以创建订单、查看订单状态，并进行订单的管理操作。\n- **用户管理**：用户可以注册、登录，并维护个人信息。管理员可以管理用户权限。\n- **商品管理**：管理员可以对商品进行增删改查，包括商品信息的录入、维护和展示。\n- **商品分类管理**：管理员可以维护商品分类的层级关系，进行新增、修改、删除操作。\n\n## 技术栈\n\n- **前端**：Vue.js\n- **后端**：Spring Boot\n- **数据库**：根据实际需求选择合适的数据库（如 MySQL）\n\n## 展望未来\n\n我们将继续优化系统性能，提高用户体验，并不断增加新功能，如社交分享、智能推荐等，以满足用户和商家的更多需求。此外，我们还将积极探索更多创新的技术和模式，如人工智能、区块链等，以进一步提升商城系统的竞争力。\n\n---\n\n以上内容全面介绍了该电子商城系统的设计目标、模块设计和项目背景，系统致力于提供一个简单易用、高效实用的电子商城平台，帮助商家更好地提供商品服务，圆满完成交易。\n\n#\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/30", "category": "Multiple", "subtype": "quadruple_bug", "level": "hard", "example": "", "docstring": "A database schema documentation for user points and tasks, including tables for user scores, tasks, and task logs, with descriptions of each field and their data types.", "canonical_solution": "## 用户积分表\n\n表名：uni-id-scores\n\n| 字段          | 类型        | 必填  | 描述              |\n| ----------- | --------- | --- | --------------- |\n| \\_id        | Object ID | 是   | 存储文档 ID，系统自动生成  |\n| user_id     | String    | 是   |                 |\n| score       | Integer   | 是   | 本次变化的积分         |\n| type        | Integer   | 否   | 积分类型 1:收入 2:支出  |\n| balance     | Integer   | 是   | 变化后的积分余额        |\n| comment     | String    | 否   | 备注，说明积分新增、消费的缘由 |\n| create_date | Timestamp | 否   | 创建时间            |\n\n## 用户任务表\n\n表名：uni-id-task\n\n| 字段           | 类型        | 必填  | 描述             |\n| ------------ | --------- | --- | -------------- |\n| \\_id         | Object ID | 是   | 存储文档 ID，系统自动生成 |\n| name         | String    | 是   | 任务名称           |\n| comment      | String    | 是   | 任务描述           |\n| bounty       | Integer   | 否   | 任务完成后的奖励积分     |\n| max_per_hour | Integer   | 否   | 每小时允许执行的最大次数   |\n| max_per_day  | Integer   | 否   | 每天允许执行的最大次数    |\n| max_per_week | Integer   | 否   | 每周允许执行的最大次数    |\n| create_date  | Timestamp | 否   | 创建时间           |\n\n表名：uni-id-task-log\n\n| 字段          | 类型        | 必填  | 描述                      |\n| ----------- | --------- | --- | ----------------------- |\n| \\_id        | Object ID | 是   | 存储文档 ID，系统自动生成          |\n| user_id     | String    | 是   | 用户ID                    |\n| task_id     | String    | 是   | 任务ID                    |\n| result      | Boolean   | 否   | 任务执行结果，true:成功，false：失败 |\n| bounty      | Integer   | 否   | 奖励积分                    |\n| create_date | Timestamp | 否   | 创建时间                    |", "buggy_code": "\n\n\n\n\n\n\n##用户任务表\n\n表名：uni-id-scores\n\n| 字段          | 类型        | 必填  | 描述              |\n| ----------- | --------- | --- | --------------- |\n| \\_id        | Object ID | 是   | 存储文档 ID，系统自动生成  |\n| user_id     | String    | 是   |                 |\n| score       | Integer   | 是   | 本次变化的积分         |\n| type        | Integer   | 否   | 积分类型 1:收入 2:支出  |\n| balance     | Integer   | 是   | 变化后的积分余额        |\n| comment     | String    | 否   | 备注，说明积分新增、消费的缘由 |\n| create_date | Timestamp | 否   | 创建时间            |\n\n用户积分表\n\n表名：uni-id-scores\n\n| 字段           | 类型        | 必填  | 描述             |\n| ------------ | --------- | --- | -------------- |\n| \\_id         | Object ID | 是   | 存储文档 ID，系统自动生成 |\n| name         | String    | 是   | 任务名称           |\n| comment      | String    | 是   | 任务描述           |\n| bounty       | Integer   | 否   | 任务完成后的奖励积分     |\n| max_per_hour | Integer   | 否   | 创建时间           |\n| max_per_day  | Integer   | 否   | 每天允许执行的最大次数    |\n| max_per_week | Integer   | 否   | 每周允许执行的最大次数    |\n| create_date  | Timestamp | 否   | 创建时间           |\n\n表名：uni-id-task-log\n\n| 字段          | 类型        | 必填  | 描述                      |\n| ----------- | --------- | --- | ----------------------- |\n| \\_id        | Object ID | 是   | 存储文档 ID，系统自动生成          |\n| user_id     | String    | 是   | 用户ID                    |\n| task_id     | String    | 是   | 任务ID                    |\n| result      | Boolean   | 否   | 任务执行结果，true:成功，false：失败 |\n| bounty      | Integer   | 否   | 奖励积分                    |\n| create_date | Timestamp | 否   | 创建时间                    |", "bug_with_line_numbers": "1| ##用户任务表\n2| 表名：uni-id-scores\n3| | 字段          | 类型        | 必填  | 描述              |\n4| | ----------- | --------- | --- | --------------- |\n5| | \\_id        | Object ID | 是   | 存储文档 ID，系统自动生成  |\n6| | user_id     | String    | 是   |                 |\n7| | score       | Integer   | 是   | 本次变化的积分         |\n8| | type        | Integer   | 否   | 积分类型 1:收入 2:支出  |\n9| | balance     | Integer   | 是   | 变化后的积分余额        |\n10| | comment     | String    | 否   | 备注，说明积分新增、消费的缘由 |\n11| | create_date | Timestamp | 否   | 创建时间            |\n12| 用户积分表\n13| 表名：uni-id-scores\n14| | 字段           | 类型        | 必填  | 描述             |\n15| | ------------ | --------- | --- | -------------- |\n16| | \\_id         | Object ID | 是   | 存储文档 ID，系统自动生成 |\n17| | name         | String    | 是   | 任务名称           |\n18| | comment      | String    | 是   | 任务描述           |\n19| | bounty       | Integer   | 否   | 任务完成后的奖励积分     |\n20| | max_per_hour | Integer   | 否   | 创建时间           |\n21| | max_per_day  | Integer   | 否   | 每天允许执行的最大次数    |\n22| | max_per_week | Integer   | 否   | 每周允许执行的最大次数    |\n23| | create_date  | Timestamp | 否   | 创建时间           |\n24| 表名：uni-id-task-log\n25| | 字段          | 类型        | 必填  | 描述                      |\n26| | ----------- | --------- | --- | ----------------------- |\n27| | \\_id        | Object ID | 是   | 存储文档 ID，系统自动生成          |\n28| | user_id     | String    | 是   | 用户ID                    |\n29| | task_id     | String    | 是   | 任务ID                    |\n30| | result      | Boolean   | 否   | 任务执行结果，true:成功，false：失败 |\n31| | bounty      | Integer   | 否   | 奖励积分                    |\n32| | create_date | Timestamp | 否   | 创建时间                    |", "fragment_lines": [1, 12, 13, 20], "fragment_content": ["##用户任务表", "用户积分表", "表名：uni-id-scores", ""], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n##用户任务表\n\n表名：uni-id-scores\n\n| 字段          | 类型        | 必填  | 描述              |\n| ----------- | --------- | --- | --------------- |\n| \\_id        | Object ID | 是   | 存储文档 ID，系统自动生成  |\n| user_id     | String    | 是   |                 |\n| score       | Integer   | 是   | 本次变化的积分         |\n| type        | Integer   | 否   | 积分类型 1:收入 2:支出  |\n| balance     | Integer   | 是   | 变化后的积分余额        |\n| comment     | String    | 否   | 备注，说明积分新增、消费的缘由 |\n| create_date | Timestamp | 否   | 创建时间            |\n\n用户积分表\n\n表名：uni-id-scores\n\n| 字段           | 类型        | 必填  | 描述             |\n| ------------ | --------- | --- | -------------- |\n| \\_id         | Object ID | 是   | 存储文档 ID，系统自动生成 |\n| name         | String    | 是   | 任务名称           |\n| comment      | String    | 是   | 任务描述           |\n| bounty       | Integer   | 否   | 任务完成后的奖励积分     |\n| max_per_hour | Integer   | 否   | 创建时间           |\n| max_per_day  | Integer   | 否   | 每天允许执行的最大次数    |\n| max_per_week | Integer   | 否   | 每周允许执行的最大次数    |\n| create_date  | Timestamp | 否   | 创建时间           |\n\n表名：uni-id-task-log\n\n| 字段          | 类型        | 必填  | 描述                      |\n| ----------- | --------- | --- | ----------------------- |\n| \\_id        | Object ID | 是   | 存储文档 ID，系统自动生成          |\n| user_id     | String    | 是   | 用户ID                    |\n| task_id     | String    | 是   | 任务ID                    |\n| result      | Boolean   | 否   | 任务执行结果，true:成功，false：失败 |\n| bounty      | Integer   | 否   | 奖励积分                    |\n| create_date | Timestamp | 否   | 创建时间                    |\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/31", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "This document outlines the database schema for an articles and comments system, including tables for articles, categories, and comments with their respective fields and descriptions.", "canonical_solution": "## 文章&评论\n\n### 文章表\n\n表名：opendb-news-articles\n\n| 字段                   | 类型        | 必填  | 描述                                |\n| -------------------- | --------- | --- | --------------------------------- |\n| \\_id                 | Object ID | 是   | 存储文档 ID（文章 ID），系统自动生成             |\n| user_id              | String    | 是   | 文章作者ID， 参考`uni-id-users` 表        |\n| category_id          | String    | 否   | 分类 id，参考`opendb-news-categories`表 |\n| title                | String    | 是   | 标题                                |\n| content              | String    | 是   | 文章内容                              |\n| excerpt              | String    | 否   | 文章摘录                              |\n| article_status       | Integer   | 是   | 文章状态：0 草稿箱 1 已发布                  |\n| view_count           | Integer   | 是   | 阅读数量                              |\n| like_count           | Integer   | 是   | 喜欢数、点赞数                           |\n| is_sticky            | Boolean   | 是   | 是否置顶                              |\n| is_essence           | Boolean   | 是   | 阅读加精                              |\n| comment_status       | Integer   | 是   | 评论状态：0 关闭  1 开放                   |\n| comment_count        | Integer   | 是   | 评论数量                              |\n| last_comment_user_id | String    | 否   | 最后回复用户 id，参考`uni-id-users` 表      |\n| avatar               | String    | 否   | 缩略图地址                             |\n| publish_date         | Timestamp | 否   | 发表时间                              |\n| publish_ip           | String    | 否   | 发表时 IP 地址                         |\n| last_modify_date     | Timestamp | 否   | 最后修改时间                            |\n| last_modify_ip       | String    | 否   | 最后修改时 IP 地址                       |\n\n### 文章类别\n\n表名：opendb-news-categories\n\n| 字段            | 类型        | 必填  | 描述                    |\n| ------------- | --------- | --- | --------------------- |\n| \\_id          | Object ID | 是   | 存储文档 ID（文章 ID），系统自动生成 |\n| name          | String    | 是   | 类别名称                  |\n| description   | String    | 是   | 类别描述                  |\n| icon          | String    | 是   | 类别图标地址                |\n| sort          | Integer   | 否   | 类别显示顺序                |\n| article_count | Integer   | 否   | 该类别下文章数量              |\n| create_date   | Timestamp | 否   | 创建时间                  |\n\n### 评论表\n\n表名：opendb-news-comments\n\n| 字段               | 类型        | 必填  | 描述                                |\n| ---------------- | --------- | --- | --------------------------------- |\n| \\_id             | Object ID | 是   | 存储文档 ID（文章 ID），系统自动生成             |\n| article_id       | String    | 是   | 文章ID，opendb-news-posts 表中的`_id`字段 |\n| user_id          | String    | 是   | 评论者ID，参考`uni-id-users` 表          |\n| comment_content  | String    | 是   | 评论内容                              |\n| like_count       | Integer   | 是   | 评论喜欢数、点赞数                         |\n| comment_type     | Integer   | 是   | 回复类型： 0 针对文章的回复  1 针对评论的回复        |\n| reply_user_id    | String    | 是   | 被回复的评论用户ID，comment_type为1时有效      |\n| reply_comment_id | String    | 是   | 被回复的评论ID，comment_type为1时有效        |\n| comment_date     | Timestamp | 否   | 评论发表时间                            |\n| comment_ip       | String    | 否   | 评论发表时 IP 地址                       |", "buggy_code": "\n\n\n\n\n\n\n\n\n## 文章&评论\n\n### 文章表\n\n表名：opendb-news-articles\n\n| 字段                   | 类型        | 必填  | 描述                                \n| -------------------- | --------- | --- | --------------------------------- |\n| \\_id                 | Object ID | 是   | 存储文档 ID（文章 ID），系统自动生成             |\n| user_id              | String    | 是   | 文章作者ID， 参考`uni-id-users` 表        |\n| category_id          | String    | 否   | 分类 id，参考`opendb-news-categories`表 |\n| title                | String    | 是   | 标题                                |\n| content              | String    | 是   | 文章内容                              |\n| excerpt              | String    | 否   | 文章摘录                              |\n| article_status       | Integer   | 是   | 文章状态：0 草稿箱 1 已发布                  |\n| view_count           | Integer   | 是   | 阅读数量                              |\n| like_count           | Integer   | 是   | 喜欢数、点赞数                           |\n| is_sticky            | Boolean   | 是   | 是否置顶                              |\n| is_essence           | Boolean   | 是   | 阅读加精                              |\n| comment_status       | Integer   | 是   | 评论状态：0 关闭  1 开放                   |\n| comment_count        | Integer   | 是   | 评论数量                              |\n| last_comment_user_id | String    | 否   | 最后回复用户 id，参考`uni-id-users` 表         |\n| avatar               | String    | 否   | 缩略图地址                             |\n| publish_date         | Timestamp | 否   | 发表时间                              |\n| publish_ip           | String    | 否   | 发表时 IP 地址                         |\n| last_modify_date     | Timestamp | 否   | 最后修改时间                            |\n| last_modify_ip       | String    | 否   | 最后修改时 IP 地址                       |\n\n###文章类别\n\n表名：opendb-news-categories\n\n| 字段            | 类型        | 必填  | 描述                    |\n| ------------- | --------- | --- | --------------------- |\n| \\_id          | Object ID | 是   | 存储文档 ID（文章 ID），系统自动生成 |\n| name          | String    | 是   | 类别名称                  |\n| description   | String    | 是   | 类别描述                  |\n| icon          | String    | 是   | 类别图标地址                |\n| sort          | Integer   | 否   | 类别显示顺序                |\n| article_count | Integer   | 否   | 该类别下文章数量              |\n| create_date   | Timestamp | 否   | 创建时间                  |\n\n### 评论表\n\n表名：opendb-news-comments\n\n| 字段               | 类型        | 必填  | 描述                                |\n| ---------------- | --------- | --- | --------------------------------- |\n| \\_id             | Object ID | 是   | 存储文档 ID（文章 ID），系统自动生成             |\n| article_id       | String    | 是   | 文章ID，opendb-news-posts 表中的`_id`字段 |\n| user_id          | String    | 是   | 评论者ID，参考`uni-id-users` 表          |\n| comment_content  | String    | 是   | 评论内容                              |\n| like_count       | Integer   | 是   | 评论喜欢数、点赞数                         |\n| comment_type     | Integer   | 是   | 回复类型： 0 针对文章的回复  1 针对评论的回复        |\n| reply_user_id    | String    | 是   | 被回复的评论用户ID，comment_type为1时有效      |\n| reply_comment_id | String    | 是   | 被回复的评论ID，comment_type为1时有效        |\n| comment_date     | Timestamp | 否   | 评论发表时间                            |\n| comment_ip       | String    | 否   | 评论发表时 IP 地址                       |\n", "bug_with_line_numbers": "   1 | ## 文章&评论\n   2 | ### 文章表\n   3 | 表名：opendb-news-articles\n   4 | | 字段                   | 类型        | 必填  | 描述\n   5 | | -------------------- | --------- | --- | --------------------------------- |\n   6 | | \\_id                 | Object ID | 是   | 存储文档 ID（文章 ID），系统自动生成             |\n   7 | | user_id              | String    | 是   | 文章作者ID， 参考`uni-id-users` 表        |\n   8 | | category_id          | String    | 否   | 分类 id，参考`opendb-news-categories`表 |\n   9 | | title                | String    | 是   | 标题                                |\n  10 | | content              | String    | 是   | 文章内容                              |\n  11 | | excerpt              | String    | 否   | 文章摘录                              |\n  12 | | article_status       | Integer   | 是   | 文章状态：0 草稿箱 1 已发布                  |\n  13 | | view_count           | Integer   | 是   | 阅读数量                              |\n  14 | | like_count           | Integer   | 是   | 喜欢数、点赞数                           |\n  15 | | is_sticky            | Boolean   | 是   | 是否置顶                              |\n  16 | | is_essence           | Boolean   | 是   | 阅读加精                              |\n  17 | | comment_status       | Integer   | 是   | 评论状态：0 关闭  1 开放                   |\n  18 | | comment_count        | Integer   | 是   | 评论数量                              |\n  19 | | last_comment_user_id | String    | 否   | 最后回复用户 id，参考`uni-id-users` 表         |\n  20 | | avatar               | String    | 否   | 缩略图地址                             |\n  21 | | publish_date         | Timestamp | 否   | 发表时间                              |\n  22 | | publish_ip           | String    | 否   | 发表时 IP 地址                         |\n  23 | | last_modify_date     | Timestamp | 否   | 最后修改时间                            |\n  24 | | last_modify_ip       | String    | 否   | 最后修改时 IP 地址                       |\n  25 | ###文章类别\n  26 | 表名：opendb-news-categories\n  27 | | 字段            | 类型        | 必填  | 描述                    |\n  28 | | ------------- | --------- | --- | --------------------- |\n  29 | | \\_id          | Object ID | 是   | 存储文档 ID（文章 ID），系统自动生成 |\n  30 | | name          | String    | 是   | 类别名称                  |\n  31 | | description   | String    | 是   | 类别描述                  |\n  32 | | icon          | String    | 是   | 类别图标地址                |\n  33 | | sort          | Integer   | 否   | 类别显示顺序                |\n  34 | | article_count | Integer   | 否   | 该类别下文章数量              |\n  35 | | create_date   | Timestamp | 否   | 创建时间                  |\n  36 | ### 评论表\n  37 | 表名：opendb-news-comments\n  38 | | 字段               | 类型        | 必填  | 描述                                |\n  39 | | ---------------- | --------- | --- | --------------------------------- |\n  40 | | \\_id             | Object ID | 是   | 存储文档 ID（文章 ID），系统自动生成             |\n  41 | | article_id       | String    | 是   | 文章ID，opendb-news-posts 表中的`_id`字段 |\n  42 | | user_id          | String    | 是   | 评论者ID，参考`uni-id-users` 表          |\n  43 | | comment_content  | String    | 是   | 评论内容                              |\n  44 | | like_count       | Integer   | 是   | 评论喜欢数、点赞数                         |\n  45 | | comment_type     | Integer   | 是   | 回复类型： 0 针对文章的回复  1 针对评论的回复        |\n  46 | | reply_user_id    | String    | 是   | 被回复的评论用户ID，comment_type为1时有效      |\n  47 | | reply_comment_id | String    | 是   | 被回复的评论ID，comment_type为1时有效        |\n  48 | | comment_date     | Timestamp | 否   | 评论发表时间                            |\n  49 | | comment_ip       | String    | 否   | 评论发表时 IP 地址                       |", "fragment_lines": [4, 25], "fragment_content": ["", "###文章类别"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n## 文章&评论\n\n### 文章表\n\n表名：opendb-news-articles\n\n| 字段                   | 类型        | 必填  | 描述                                \n| -------------------- | --------- | --- | --------------------------------- |\n| \\_id                 | Object ID | 是   | 存储文档 ID（文章 ID），系统自动生成             |\n| user_id              | String    | 是   | 文章作者ID， 参考`uni-id-users` 表        |\n| category_id          | String    | 否   | 分类 id，参考`opendb-news-categories`表 |\n| title                | String    | 是   | 标题                                |\n| content              | String    | 是   | 文章内容                              |\n| excerpt              | String    | 否   | 文章摘录                              |\n| article_status       | Integer   | 是   | 文章状态：0 草稿箱 1 已发布                  |\n| view_count           | Integer   | 是   | 阅读数量                              |\n| like_count           | Integer   | 是   | 喜欢数、点赞数                           |\n| is_sticky            | Boolean   | 是   | 是否置顶                              |\n| is_essence           | Boolean   | 是   | 阅读加精                              |\n| comment_status       | Integer   | 是   | 评论状态：0 关闭  1 开放                   |\n| comment_count        | Integer   | 是   | 评论数量                              |\n| last_comment_user_id | String    | 否   | 最后回复用户 id，参考`uni-id-users` 表         |\n| avatar               | String    | 否   | 缩略图地址                             |\n| publish_date         | Timestamp | 否   | 发表时间                              |\n| publish_ip           | String    | 否   | 发表时 IP 地址                         |\n| last_modify_date     | Timestamp | 否   | 最后修改时间                            |\n| last_modify_ip       | String    | 否   | 最后修改时 IP 地址                       |\n\n###文章类别\n\n表名：opendb-news-categories\n\n| 字段            | 类型        | 必填  | 描述                    |\n| ------------- | --------- | --- | --------------------- |\n| \\_id          | Object ID | 是   | 存储文档 ID（文章 ID），系统自动生成 |\n| name          | String    | 是   | 类别名称                  |\n| description   | String    | 是   | 类别描述                  |\n| icon          | String    | 是   | 类别图标地址                |\n| sort          | Integer   | 否   | 类别显示顺序                |\n| article_count | Integer   | 否   | 该类别下文章数量              |\n| create_date   | Timestamp | 否   | 创建时间                  |\n\n### 评论表\n\n表名：opendb-news-comments\n\n| 字段               | 类型        | 必填  | 描述                                |\n| ---------------- | --------- | --- | --------------------------------- |\n| \\_id             | Object ID | 是   | 存储文档 ID（文章 ID），系统自动生成             |\n| article_id       | String    | 是   | 文章ID，opendb-news-posts 表中的`_id`字段 |\n| user_id          | String    | 是   | 评论者ID，参考`uni-id-users` 表          |\n| comment_content  | String    | 是   | 评论内容                              |\n| like_count       | Integer   | 是   | 评论喜欢数、点赞数                         |\n| comment_type     | Integer   | 是   | 回复类型： 0 针对文章的回复  1 针对评论的回复        |\n| reply_user_id    | String    | 是   | 被回复的评论用户ID，comment_type为1时有效      |\n| reply_comment_id | String    | 是   | 被回复的评论ID，comment_type为1时有效        |\n| comment_date     | Timestamp | 否   | 评论发表时间                            |\n| comment_ip       | String    | 否   | 评论发表时 IP 地址                       |\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/32", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "An introduction to openDB, a set of open data table design specifications that include table names, field definitions, and initial data. It discusses the benefits of using openDB for developers and the digital economy, and provides information on how to use and contribute to openDB.", "canonical_solution": "# openDB\n\n数据库设计，是数字经济的基础，是重要的软基建。\n\n`openDB`，是一套开放的数据表设计规范，包括了表名、字段等schema定义以及初始数据。\n\n以用户表为例，它约定了一个标准用户表的表名和字段定义，并且基于nosql的特性，可以由开发者自行扩展字段。\n\n`openDB`是[uniCloud](https://uniapp.dcloud.io/uniCloud/)的重要软基建，支撑uniCloud数字生态的发展。\n\n# 需求背景\n\n- 很多js工程师不善于数据库设计，希望有成熟的数据库模板，避免走弯路\n- 有利于产业分工。业务开发、统计分析、智能推荐、数据转换等都是不同的专业角色，大多数开发者仅善于业务开发，需要专业的数据服务商为其提供服务，如果数据库标准统一，各个角色就可以在插件市场各自提供插件。\n  * 比如有专业数据服务商，基于openDB中电商规范，提供“猜你喜欢”插件，就可以被轻松的引入到开发者的应用中；\n  * 比如有专业的数据导入导出插件，可以方便的从ecshop等系统中迁移历史数据；\n  * 比如有专业的cms后台厂商，基于openDB中新闻规范，提供更好的新闻编辑工具。\n- 统一的数据库标准，有利于开发者择优切换插件。有利于插件生态的繁荣，并最终通过吸引更多用户做大蛋糕来反哺插件作者。\n  * 比如有多个新闻应用模板，均基于openDB中的新闻规范，那么开发者可以方便的切换到做的更好的插件上。\n- 数据孤岛问题。当多个应用之间的数据库规范相同，他们之间的跨应用数据交换就变的更容易。未来uniCloud会提供更方便的跨应用数据交换机制。\n- 统一的初始数据。比如地区表等数据，在openDB中有初始化数据，开发者们共享一个相同数据源即可。\n\n[uni-id](https://uniapp.dcloud.io/uniCloud/uni-id)的账户统一，是`openDB`的成功实践。基于uni-id规范，有电商插件、有IM插件、有PC管理插件，开发者可以方便的把这些插件整合到自己的同一应用中。\n\n# openDB中的已有规范：\n\n目前`openDB`已经支持几十张表。可以在[https://gitee.com/dcloud/opendb/tree/master/collection](https://gitee.com/dcloud/opendb/tree/master/collection)查看。\n\n部分常用表单独提供文档如下：\n\n1. [用户管理（uni-id）](uni-id.md)\n2. [文章&评论（opendb-news）](opendb-news.md)\n3. [电商系统（opendb-mall）](opendb-mall.md)\n4. [新闻系统（opendb-news）](opendb-news.md)\n5. [日志管理（opendb-log）](opendb-log.md)\n\n# 预置数据\n\n`openDB`不仅支持定义常用的数据表字段，还可以预置初始化数据。\n\n比如，[opendb-city-china](https://gitee.com/dcloud/opendb/tree/master/collection/opendb-city-china)是opendb中定义好的`中国城市字典表`，它的定义分为两个部分：\n\n- collection.json：定义数据表名称、所含字段、每个字段的类型以及读写权限规则等；\n- data.json：定义初始化内容\n\n你通过[uniCloud web控制台](https://unicloud.dcloud.net.cn)创建`openDB`表时，`uniCloud`会自动校验该opendb表定义中是否包含`data.json`，若包含，则在创建表定义后，自动导入`data.json`。\n\n如果你的 HBuilderX 项目中，`uniCloud/database`目录下定义的数据表中含有opendb表定义，则对该opendb表执行`上传DB Schema`操作时，uniCloud服务端会判断该opendb表是否已存在：\n\n- 若该opendb表已存在，则仅更新 `DB Schema`；\n- 若该opendb表不存在，则先创建该表，然后校验该opendb表定义中是否包含`data.json`，若包含`data.json`，则自动导入`data.json`\n\n# 数据表升级\n\n`openDB`数据表在后续的更新迭代中，可能会涉及到`schema`及`预置数据`的变更。自`HBuilderX 3.5.1`之后，opendb表支持检查更新。\n\n以[opendb-city-china](https://gitee.com/dcloud/opendb/tree/master/collection/opendb-city-china)为例，当我们要修改或补充城市时，为了兼容已部署的数据表，应提供差量数据，这时我们需要做的是：\n\n- 更新 `opendb-city-china/package.json`中的`version`字段为升级后的版本号；\n- 新增 `opendb-city-china/collection.update-原始版本号-升级版本号.jql` JQL数据库管理器文件，内容为差量数据的JQL语句；\n\n比如行政区域的撤销或设立需要数据升级，并且定义升级后的版本号为0.0.2，这时需要将差量数据以JQL语句的形式写入文件`opendb-city-china/collection.update-0.0.1-0.0.2.jql`中，并更新`opendb-city-china/package.json`的`version`字段。\n\n# 如何引入到自己的服务空间\n\n在[uniCloud web控制台](https://unicloud.dcloud.net.cn)，新建表时，可直接选择所有`openDB`的表。\n\n首先选分类，每个分类下又有若干表，表结构和预置数据可直接预览。支持多个表一起创建。\n\n\n\n`openDB`的表，不应修改表名，修改后就无法与其他插件连同了。\n\n# 欢迎参与\n\n`openDB`是一个持续发展的、由开发者共建的规范。DCloud欢迎各个业务领域的专业开发者提供规范。\n\n开发者通过提pr的方式，给`openDB`添加规范，或者给已有规范的表添加字段，或者添加初始化数据。gitee支持轻量pr，尤其适合共同编辑规范。\n\n- 您将在这个具有重大意义的项目中的贡献者名单中留下自己的名字\n- 您提的pr成为规范将帮助您享受整个产业链的支持\n\n其他注意：\n\n- 为了向下兼容，`openDB`只增加表和字段，不删改。", "buggy_code": "\n\n\n\n\n# openDB\n\n数据库设计，是数字经济的基础，是重要的软基建。\n\n`openDB`，是一套开放的数据表设计规范，包括了表名、字段等schema定义以及初始数据。\n\n以用户表为例，它约定了一个标准用户表的表名和字段定义，并且基于nosql的特性，可以由开发者自行扩展字段。\n\n`openDB`是[uniCloud](https://uniapp.dcloud.io/uniCloud/)的重要软基建，支撑uniCloud数字生态的发展。\n\n# 需求背景\n\n- 很多js工程师不善于数据库设计，希望有成熟的数据库模板，避免走弯路\n- 有利于产业分工。业务开发、统计分析、智能推荐、数据转换等都是不同的专业角色，大多数开发者仅善于业务开发，需要专业的数据服务商为其提供服务，如果数据库标准统一，各个角色就可以在插件市场各自提供插件。\n  * 比如有专业数据服务商，基于openDB中电商规范，提供“猜你喜欢”插件，就可以被轻松的引入到开发者的应用中；\n  * 比如有专业的数据导入导出插件，可以方便的从ecshop等系统中迁移历史数据；\n  * 比如有专业的cms后台厂商，基于openDB中新闻规范，提供更好的新闻编辑工具。\n- 统一的数据库标准，有利于开发者择优切换插件。有利于插件生态的繁荣，并最终通过吸引更多用户做大蛋糕来反哺插件作者。\n  * 比如有多个新闻应用模板，均基于openDB中的新闻规范，那么开发者可以方便的切换到做的更好的插件上。\n- 数据孤岛问题。当多个应用之间的数据库规范相同，他们之间的跨应用数据交换就变的更容易。未来uniCloud会提供更方便的跨应用数据交换机制。\n- 统一的初始数据。比如地区表等数据，在openDB中有初始化数据，开发者们共享一个相同数据源即可。\n\n[uni-id](https://uniapp.dcloud.io/uniCloud/uni-id)的账户统一，是`openDB`的成功实践。基于uni-id规范，有电商插件、有IM插件、有PC管理插件，开发者可以方便的把这些插件整合到自己的同一应用中。\n\n# openDB中的已有规范：\n\n目前`openDB`已经支持几十张表。可以在[https://gitee.com/dcloud/opendb/tree/master/collection](https://gitee.com/dcloud/opendb/tree/master/collection)查看。\n\n部分常用表单独提供文档如下：\n\n1. )用户管理（uni-id）](uni-id.md)\n2. [文章&评论（opendb-news）](opendb-news.md)\n3. [电商系统（opendb-mall）](opendb-mall.md)\n4. [新闻系统（opendb-news）](opendb-news.md)\n5. [日志管理（opendb-log）](opendb-log.md)\n\n# 预置数据\n\n`openDB`不仅支持定义常用的数据表字段，还可以预置初始化数据。\n\n比如，[opendb-city-china](https://gitee.com/dcloud/opendb/tree/master/collection/opendb-city-china)是opendb中定义好的`中国城市字典表`，它的定义分为两个部分：\n\n- collection.json：定义数据表名称、所含字段、每个字段的类型以及读写权限规则等；\n- data.json：定义初始化内容\n\n你通过[uniCloud web控制台(https://unicloud.dcloud.net.cn)创建`openDB`表时，`uniCloud`会自动校验该opendb表定义中是否包含`data.json`，若包含，则在创建表定义后，自动导入`data.json`。\n\n如果你的 HBuilderX 项目中，`uniCloud/database`目录下定义的数据表中含有opendb表定义，则对该opendb表执行`上传DB Schema`操作时，uniCloud服务端会判断该opendb表是否已存在：\n\n- 若该opendb表已存在，则仅更新 `DB Schema`；\n- 若该opendb表不存在，则先创建该表，然后校验该opendb表定义中是否包含`data.json`，若包含`data.json`，则自动导入`data.json`\n\n# 数据表升级\n\n`openDB`数据表在后续的更新迭代中，可能会涉及到`schema`及`预置数据`的变更。自`HBuilderX 3.5.1`之后，opendb表支持检查更新。\n\n以[opendb-city-china](https://gitee.com/dcloud/opendb/tree/master/collection/opendb-city-china)为例，当我们要修改或补充城市时，为了兼容已部署的数据表，应提供差量数据，这时我们需要做的是：\n\n- 更新 `opendb-city-china/package.json`中的`version`字段为升级后的版本号；\n- 新增 `opendb-city-china/collection.update-原始版本号-升级版本号.jql` JQL数据库管理器文件，内容为差量数据的JQL语句；\n\n比如行政区域的撤销或设立需要数据升级，并且定义升级后的版本号为0.0.2，这时需要将差量数据以JQL语句的形式写入文件`opendb-city-china/collection.update-0.0.1-0.0.2.jql`中，并更新`opendb-city-china/package.json`的`version`字段。\n\n#如何引入到自己的服务空间\n\n在[uniCloud web控制台](https://unicloud.dcloud.net.cn)，新建表时，可直接选择所有`openDB`的表。\n\n首先选分类，每个分类下又有若干表，表结构和预置数据可直接预览。支持多个表一起创建。\n\n`openDB`的表，不应修改表名，修改后就无法与其他插件连同了。\n\n# 欢迎参与\n\n`openDB`是一个持续发展的、由开发者共建的规范。DCloud欢迎各个业务领域的专业开发者提供规范。\n\n开发者通过提pr的方式，给`openDB`添加规范，或者给已有规范的表添加字段，或者添加初始化数据。gitee支持轻量pr，尤其适合共同编辑规范。\n\n- 您将在这个具有重大意义的项目中的贡献者名单中留下自己的名字\n- 您提的pr成为规范将帮助您享受整个产业链的支持\n\n其他注意：\n\n- 为了向下兼容，`openDB`只增加表和字段，不删改。", "bug_with_line_numbers": "   1 | # openDB\n   2 | 数据库设计，是数字经济的基础，是重要的软基建。\n   3 | `openDB`，是一套开放的数据表设计规范，包括了表名、字段等schema定义以及初始数据。\n   4 | 以用户表为例，它约定了一个标准用户表的表名和字段定义，并且基于nosql的特性，可以由开发者自行扩展字段。\n   5 | `openDB`是[uniCloud](https://uniapp.dcloud.io/uniCloud/)的重要软基建，支撑uniCloud数字生态的发展。\n   6 | # 需求背景\n   7 | - 很多js工程师不善于数据库设计，希望有成熟的数据库模板，避免走弯路\n   8 | - 有利于产业分工。业务开发、统计分析、智能推荐、数据转换等都是不同的专业角色，大多数开发者仅善于业务开发，需要专业的数据服务商为其提供服务，如果数据库标准统一，各个角色就可以在插件市场各自提供插件。    \n   9 |   * 比如有专业数据服务商，基于openDB中电商规范，提供“猜你喜欢”插件，就可以被轻松的引入到开发者的应用中；\n  10 |   * 比如有专业的数据导入导出插件，可以方便的从ecshop等系统中迁移历史数据；\n  11 |   * 比如有专业的cms后台厂商，基于openDB中新闻规范，提供更好的新闻编辑工具。\n  12 | - 统一的数据库标准，有利于开发者择优切换插件。有利于插件生态的繁荣，并最终通过吸引更多用户做大蛋糕来反哺插件作者。\n  13 |   * 比如有多个新闻应用模板，均基于openDB中的新闻规范，那么开发者可以方便的切换到做的更好的插件上。\n  14 | - 数据孤岛问题。当多个应用之间的数据库规范相同，他们之间的跨应用数据交换就变的更容易。未来uniCloud会提供更方便的跨应用数据交换机制。\n  15 | - 统一的初始数据。比如地区表等数据，在openDB中有初始化数据，开发者们共享一个相同数据源即可。\n  16 | [uni-id](https://uniapp.dcloud.io/uniCloud/uni-id)的账户统一，是`openDB`的成功实践。基于uni-id规范，有电商插件、有IM插件、有PC管理插件，开发者可以方便的把这些插件整合到自己的同一应用中。\n  17 | # openDB中的已有规范：\n  18 | 目前`openDB`已经支持几十张表。可以在[https://gitee.com/dcloud/opendb/tree/master/collection](https://gitee.com/dcloud/opendb/tree/master/collection)查看。\n  19 | 部分常用表单独提供文档如下：\n  20 | 1. )用户管理（uni-id）](uni-id.md)\n  21 | 2. [文章&评论（opendb-news）](opendb-news.md)\n  22 | 3. [电商系统（opendb-mall）](opendb-mall.md)\n  23 | 4. [新闻系统（opendb-news）](opendb-news.md)\n  24 | 5. [日志管理（opendb-log）](opendb-log.md)\n  25 | # 预置数据\n  26 | `openDB`不仅支持定义常用的数据表字段，还可以预置初始化数据。\n  27 | 比如，[opendb-city-china](https://gitee.com/dcloud/opendb/tree/master/collection/opendb-city-china)是opendb中定义好的`中国城市字典表`，它的定义分为两个部分：\n  28 | - collection.json：定义数据表名称、所含字段、每个字段的类型以及读写权限规则等；\n  29 | - data.json：定义初始化内容\n  30 | 你通过[uniCloud web控制台(https://unicloud.dcloud.net.cn)创建`openDB`表时，`uniCloud`会自动校验该opendb表定义中是否包含`data.json`，若包含，则在创建表定义后，自动导入`data.json`。\n  31 | 如果你的 HBuilderX 项目中，`uniCloud/database`目录下定义的数据表中含有opendb表定义，则对该opendb表执行`上传DB Schema`操作时，uniCloud服务端会判断该opendb表是否已存在：\n  32 | - 若该opendb表已存在，则仅更新 `DB Schema`；\n  33 | - 若该opendb表不存在，则先创建该表，然后校验该opendb表定义中是否包含`data.json`，若包含`data.json`，则自动导入`data.json`\n  34 | # 数据表升级\n  35 | `openDB`数据表在后续的更新迭代中，可能会涉及到`schema`及`预置数据`的变更。自`HBuilderX 3.5.1`之后，opendb表支持检查更新。\n  36 | 以[opendb-city-china](https://gitee.com/dcloud/opendb/tree/master/collection/opendb-city-china)为例，当我们要修改或补充城市时，为了兼容已部署的数据表，应提供差量数据，这时我们需要做的是：\n  37 | - 更新 `opendb-city-china/package.json`中的`version`字段为升级后的版本号；\n  38 | - 新增 `opendb-city-china/collection.update-原始版本号-升级版本号.jql` JQL数据库管理器文件，内容为差量数据的JQL语句；\n  39 | 比如行政区域的撤销或设立需要数据升级，并且定义升级后的版本号为0.0.2，这时需要将差量数据以JQL语句的形式写入文件`opendb-city-china/collection.update-0.0.1-0.0.2.jql`中，并更新`opendb-city-china/package.json`的`version`字段。\n  40 | #如何引入到自己的服务空间\n  41 | 在[uniCloud web控制台](https://unicloud.dcloud.net.cn)，新建表时，可直接选择所有`openDB`的表。\n  42 | 首先选分类，每个分类下又有若干表，表结构和预置数据可直接预览。支持多个表一起创建。\n  43 | `openDB`的表，不应修改表名，修改后就无法与其他插件连同了。\n  44 | # 欢迎参与\n  45 | `openDB`是一个持续发展的、由开发者共建的规范。DCloud欢迎各个业务领域的专业开发者提供规范。\n  46 | 开发者通过提pr的方式，给`openDB`添加规范，或者给已有规范的表添加字段，或者添加初始化数据。gitee支持轻量pr，尤其适合共同编辑规范。\n  47 | - 您将在这个具有重大意义的项目中的贡献者名单中留下自己的名字\n  48 | - 您提的pr成为规范将帮助您享受整个产业链的支持\n  49 | 其他注意：\n  50 | - 为了向下兼容，`openDB`只增加表和字段，不删改。", "fragment_lines": [20, 30], "fragment_content": ["1. )用户管理（uni-id）](uni-id.md)", "你通过[uniCloud web控制台(https://unicloud.dcloud.net.cn)创建`openDB`表时，`uniCloud`会自动校验该opendb表定义中是否包含`data.json`，若包含，则在创建表定义后，自动导入`data.json`。"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# openDB\n\n数据库设计，是数字经济的基础，是重要的软基建。\n\n`openDB`，是一套开放的数据表设计规范，包括了表名、字段等schema定义以及初始数据。\n\n以用户表为例，它约定了一个标准用户表的表名和字段定义，并且基于nosql的特性，可以由开发者自行扩展字段。\n\n`openDB`是[uniCloud](https://uniapp.dcloud.io/uniCloud/)的重要软基建，支撑uniCloud数字生态的发展。\n\n# 需求背景\n\n- 很多js工程师不善于数据库设计，希望有成熟的数据库模板，避免走弯路\n- 有利于产业分工。业务开发、统计分析、智能推荐、数据转换等都是不同的专业角色，大多数开发者仅善于业务开发，需要专业的数据服务商为其提供服务，如果数据库标准统一，各个角色就可以在插件市场各自提供插件。\n  * 比如有专业数据服务商，基于openDB中电商规范，提供“猜你喜欢”插件，就可以被轻松的引入到开发者的应用中；\n  * 比如有专业的数据导入导出插件，可以方便的从ecshop等系统中迁移历史数据；\n  * 比如有专业的cms后台厂商，基于openDB中新闻规范，提供更好的新闻编辑工具。\n- 统一的数据库标准，有利于开发者择优切换插件。有利于插件生态的繁荣，并最终通过吸引更多用户做大蛋糕来反哺插件作者。\n  * 比如有多个新闻应用模板，均基于openDB中的新闻规范，那么开发者可以方便的切换到做的更好的插件上。\n- 数据孤岛问题。当多个应用之间的数据库规范相同，他们之间的跨应用数据交换就变的更容易。未来uniCloud会提供更方便的跨应用数据交换机制。\n- 统一的初始数据。比如地区表等数据，在openDB中有初始化数据，开发者们共享一个相同数据源即可。\n\n[uni-id](https://uniapp.dcloud.io/uniCloud/uni-id)的账户统一，是`openDB`的成功实践。基于uni-id规范，有电商插件、有IM插件、有PC管理插件，开发者可以方便的把这些插件整合到自己的同一应用中。\n\n# openDB中的已有规范：\n\n目前`openDB`已经支持几十张表。可以在[https://gitee.com/dcloud/opendb/tree/master/collection](https://gitee.com/dcloud/opendb/tree/master/collection)查看。\n\n部分常用表单独提供文档如下：\n\n1. )用户管理（uni-id）](uni-id.md)\n2. [文章&评论（opendb-news）](opendb-news.md)\n3. [电商系统（opendb-mall）](opendb-mall.md)\n4. [新闻系统（opendb-news）](opendb-news.md)\n5. [日志管理（opendb-log）](opendb-log.md)\n\n# 预置数据\n\n`openDB`不仅支持定义常用的数据表字段，还可以预置初始化数据。\n\n比如，[opendb-city-china](https://gitee.com/dcloud/opendb/tree/master/collection/opendb-city-china)是opendb中定义好的`中国城市字典表`，它的定义分为两个部分：\n\n- collection.json：定义数据表名称、所含字段、每个字段的类型以及读写权限规则等；\n- data.json：定义初始化内容\n\n你通过[uniCloud web控制台(https://unicloud.dcloud.net.cn)创建`openDB`表时，`uniCloud`会自动校验该opendb表定义中是否包含`data.json`，若包含，则在创建表定义后，自动导入`data.json`。\n\n如果你的 HBuilderX 项目中，`uniCloud/database`目录下定义的数据表中含有opendb表定义，则对该opendb表执行`上传DB Schema`操作时，uniCloud服务端会判断该opendb表是否已存在：\n\n- 若该opendb表已存在，则仅更新 `DB Schema`；\n- 若该opendb表不存在，则先创建该表，然后校验该opendb表定义中是否包含`data.json`，若包含`data.json`，则自动导入`data.json`\n\n# 数据表升级\n\n`openDB`数据表在后续的更新迭代中，可能会涉及到`schema`及`预置数据`的变更。自`HBuilderX 3.5.1`之后，opendb表支持检查更新。\n\n以[opendb-city-china](https://gitee.com/dcloud/opendb/tree/master/collection/opendb-city-china)为例，当我们要修改或补充城市时，为了兼容已部署的数据表，应提供差量数据，这时我们需要做的是：\n\n- 更新 `opendb-city-china/package.json`中的`version`字段为升级后的版本号；\n- 新增 `opendb-city-china/collection.update-原始版本号-升级版本号.jql` JQL数据库管理器文件，内容为差量数据的JQL语句；\n\n比如行政区域的撤销或设立需要数据升级，并且定义升级后的版本号为0.0.2，这时需要将差量数据以JQL语句的形式写入文件`opendb-city-china/collection.update-0.0.1-0.0.2.jql`中，并更新`opendb-city-china/package.json`的`version`字段。\n\n#如何引入到自己的服务空间\n\n在[uniCloud web控制台](https://unicloud.dcloud.net.cn)，新建表时，可直接选择所有`openDB`的表。\n\n首先选分类，每个分类下又有若干表，表结构和预置数据可直接预览。支持多个表一起创建。\n\n`openDB`的表，不应修改表名，修改后就无法与其他插件连同了。\n\n# 欢迎参与\n\n`openDB`是一个持续发展的、由开发者共建的规范。DCloud欢迎各个业务领域的专业开发者提供规范。\n\n开发者通过提pr的方式，给`openDB`添加规范，或者给已有规范的表添加字段，或者添加初始化数据。gitee支持轻量pr，尤其适合共同编辑规范。\n\n- 您将在这个具有重大意义的项目中的贡献者名单中留下自己的名字\n- 您提的pr成为规范将帮助您享受整个产业链的支持\n\n其他注意：\n\n- 为了向下兼容，`openDB`只增加表和字段，不删改。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/33", "category": "Multiple", "subtype": "triple_bug", "level": "hard", "example": "", "docstring": "A project aimed at translating the comments of the Example Mod into Chinese to assist new modders in learning mod development without the need to understand the original English comments. It includes guidelines for contributors who wish to participate in the translation effort.", "canonical_solution": "# Example Mod 注释汉化\n\n*NOTE: This repository is a Example Mod port but with Chinese comments, for the original version of Example Mod [click here](https://github.com/tModLoader/tModLoader).*\n\n这是一个将Example Mod注释**汉化**的项目，用于帮助新手Mod制作者学习制作Mod，且不需要去啃原版Example Mod的生肉注释 (~~虽然有翻译软件这一回事~~)\n\n*注: 为确保在 tModLoader 默认版本可用，该汉化版本基于 tModLoader 仓库 [1.4-stable分支的 Example Mod](https://github.com/tModLoader/tModLoader/tree/1.4-stable/ExampleMod)*\n\n*建议与 [tModLoader 注释汉化](https://github.com/Cyrillya/tModLoader-Document-Chinese) 配合使用*\n\n## 我是来下载Example Mod的\n\n直接点击绿色的 `Code` 在下拉列表中选择 `Download ZIP` 后，将文件解压到模组源码文件夹下即可 ~~不过能找到这的大概不用教这个吧~~，记得将文件夹名字改为 `ExampleMod` !\n\n## 我想汉化Example Mod\n\n如果你有意向向此项目作出贡献，你可以提交 `Pull request`，点击右上角的 `Fork` 按钮复刻一份仓库到你的 Github 个人仓库，然后在你的个人仓库中修改文件，随后创建 `Pull request` 即可\n\n更多相关内容还烦请在网上自行搜索并学习 **Git** 与 **Github** 相关内容，这里不便细嗦  \n(或者你开个 `Issue` 直接把你汉化好的文本+对应哪个文件发上来也行，然鹅不建议)\n\n将这个仓库直接 `Clone` 到模组源码文件夹，运行一遍tML之后就会自动出现引用了\n\n## 汉化建议\n\n### 多行注释\n\n注释一行不宜过长，在Example Mod中，注释往往被分成好几行，分行的好处是可以在一屏幕中直接看完注释，而不用来回拖条。\n\n从该行第一个非空格字符之后算起，建议控制在**55-65个汉字**的范围内，英文则控制在**90-110个英文字母**，差不多是两倍关系\n\n若该行以[链接](README.md)结束，则不应换行\n\n### 斜线后加空格\n\n为了美观，应在双斜线 `//` 后**加空格**再打注释，即:\n\n```diff\n+ // 这个是合格的注释样式\n- //这个注释双斜线后没空格，不合格\n```\n\n若直接在代码行末尾添加注释，应**加空格**，即：\n\n```diff\n+ Item.DamageType = DamageClass.Ranged; // 伤害类型设置为远程，正确的注释\n- Item.DamageType = DamageClass.Ranged;// 伤害类型设置为远程，错误的注释\n```\n\n### 通俗易懂\n\n首先，机翻肯定是坏文明。\n\n其次一些地方原Example Mod可能写得不够详尽或不够通俗，如有必要，建议自己另外写注释。\n\nExampleMod的翻译不需要完全按着原文来，主要是得能让人看懂。\n\n### 注意编码类型\n\n编码类型应一致使用 `Unicode (UTF-8 带签名)`，这里的文件大部分是从 Example Mod 直接复制过来的，编码类型往往不对。\n\n汉化一个文件时，点击VS左上角 `文件`，在下拉列表中点击 `[文件名] 另存为...`，点击 `保存` 字样右边的小三角，选择 `编码保存`，然后选择 `Unicode (UTF-8 带签名)` 编码  \n这么做了一次后，之后的编辑直接 `Ctrl+S` 保存即可\n\n### 注意事项\n\n- 本项目中 `Tick` 应译作 `帧` *(其在中文Wiki的叫法为“嘀嗒”，但实际上国内模组社区通常称作“帧”)*\n- 本项目中 `Tile` 应译作 `物块` *(其在中文Wiki的叫法为“图格”，但实际上国内社区通常称作“物块”)*\n- `Projectile` 建议译作 `射弹`\n- tModLoader所作 `TODO` 备注应删去\n- 注释中含有原版Wiki链接的，若有对应中文版页面，应使用**中文版**\n- 原版物品、NPC、射弹名称等一律使用中文Wiki上的翻译\n- 对于物品、NPC、射弹等支持名称翻译的，`SetDefault` 为英文原文，并使用 `AddTranslation` 添加中文翻译。且第一位 `GameCulture` 参数建议使用 `GameCulture.FromCultureName(GameCulture.CultureName.Chinese)`\n\n## 能塞“私货”吗？\n\n是可以的，只需在Github上提交一个**Pull Request**即可，但要记得写好注释。此外，还有一些与tModLoader官方一致的[**格式要求**](https://github.com/tModLoader/tModLoader/wiki/tModLoader-Style-Guide)需要遵守\n\n## 这个项目目前的完成度？\n\n1% (悲)  \n快来汉化！\n\n## 原版Example Mod在哪里？\n\ntModLoader 仓库: https://github.com/tModLoader/tModLoader  \n发行版: https://github.com/tModLoader/tModLoader/releases/latest", "buggy_code": "\n\n#Example Mod 注释汉化\n\n*NOTE: This repository is a Example Mod port but with Chinese comments, for the original version of Example Mod [click here](https://github.com/tModLoader/tModLoader).*\n\n这是一个将Example Mod注释**汉化**的项目，用于帮助新手Mod制作者学习制作Mod，且不需要去啃原版Example Mod的生肉注释 (~~虽然有翻译软件这一回事~~)\n\n*注: 为确保在 tModLoader 默认版本可用，该汉化版本基于 tModLoader 仓库 [1.4-stable分支的 Example Mod](https://github.com/tModLoader/tModLoader/tree/1.4-stable/ExampleMod)*\n\n*建议与 {tModLoader 注释汉化](https://github.com/Cyrillya/tModLoader-Document-Chinese) 配合使用*\n\n## 我是来下载Example Mod的\n\n直接点击绿色的 `Code` 在下拉列表中选择 `Download ZIP` 后，将文件解压到模组源码文件夹下即可 ~~不过能找到这的大概不用教这个吧~~，记得将文件夹名字改为 `ExampleMod` !\n\n## 我想汉化Example Mod\n\n如果你有意向向此项目作出贡献，你可以提交 `Pull request`，点击右上角的 `Fork` 按钮复刻一份仓库到你的 Github 个人仓库，然后在你的个人仓库中修改文件，随后创建 `Pull request` 即可\n\n更多相关内容还烦请在网上自行搜索并学习 **Git** 与 **Github** 相关内容，这里不便细嗦  \n(或者你开个 `Issue` 直接把你汉化好的文本+对应哪个文件发上来也行，然鹅不建议)\n\n将这个仓库直接 `Clone` 到模组源码文件夹，运行一遍tML之后就会自动出现引用了\n\n## 汉化建议\n\n### 多行注释\n\n注释一行不宜过长，在Example Mod中，注释往往被分成好几行，分行的好处是可以在一屏幕中直接看完注释，而不用来回拖条。\n\n从该行第一个非空格字符之后算起，建议控制在**55-65个汉字**的范围内，英文则控制在**90-110个英文字母**，差不多是两倍关系\n\n若该行以[链接](README.md)结束，则不应换行\n\n### 斜线后加空格\n\n为了美观，应在双斜线 `//` 后**加空格**再打注释，即:\n\n```diff\n+ // 这个是合格的注释样式\n- //这个注释双斜线后没空格，不合格\n```\n\n若直接在代码行末尾添加注释，应**加空格**，即：\n\n```diff\n+ Item.DamageType = DamageClass.Ranged; // 伤害类型设置为远程，正确的注释\n- Item.DamageType = DamageClass.Ranged;// 伤害类型设置为远程，错误的注释\n### 通俗易懂\n\n首先，机翻肯定是坏文明。\n\n其次一些地方原Example Mod可能写得不够详尽或不够通俗，如有必要，建议自己另外写注释。\n\nExampleMod的翻译不需要完全按着原文来，主要是得能让人看懂。\n\n### 注意编码类型\n\n编码类型应一致使用 `Unicode (UTF-8 带签名)`，这里的文件大部分是从 Example Mod 直接复制过来的，编码类型往往不对。\n\n汉化一个文件时，点击VS左上角 `文件`，在下拉列表中点击 `[文件名] 另存为...`，点击 `保存` 字样右边的小三角，选择 `编码保存`，然后选择 `Unicode (UTF-8 带签名)` 编码  \n这么做了一次后，之后的编辑直接 `Ctrl+S` 保存即可\n\n### 注意事项\n\n- 本项目中 `Tick` 应译作 `帧` *(其在中文Wiki的叫法为“嘀嗒”，但实际上国内模组社区通常称作“帧”)*\n- 本项目中 `Tile` 应译作 `物块` *(其在中文Wiki的叫法为“图格”，但实际上国内社区通常称作“物块”)*\n- `Projectile` 建议译作 `射弹`\n- tModLoader所作 `TODO` 备注应删去\n- 注释中含有原版Wiki链接的，若有对应中文版页面，应使用**中文版**\n- 原版物品、NPC、射弹名称等一律使用中文Wiki上的翻译\n- 对于物品、NPC、射弹等支持名称翻译的，`SetDefault` 为英文原文，并使用 `AddTranslation` 添加中文翻译。且第一位 `GameCulture` 参数建议使用 `GameCulture.FromCultureName(GameCulture.CultureName.Chinese)`\n\n## 能塞“私货”吗？\n\n是可以的，只需在Github上提交一个**Pull Request**即可，但要记得写好注释。此外，还有一些与tModLoader官方一致的[**格式要求**](https://github.com/tModLoader/tModLoader/wiki/tModLoader-Style-Guide)需要遵守\n\n## 这个项目目前的完成度？\n\n1% (悲)  \n快来汉化！\n\n## 原版Example Mod在哪里？\n\ntModLoader 仓库: https://github.com/tModLoader/tModLoader  \n发行版: https://github.com/tModLoader/tModLoader/releases/latest\n```", "bug_with_line_numbers": "1| ﻿\n2| #Example Mod 注释汉化\n3| *NOTE: This repository is a Example Mod port but with Chinese comments, for the original version of Example Mod [click here](https://github.com/tModLoader/tModLoader).*\n4| 这是一个将Example Mod注释**汉化**的项目，用于帮助新手Mod制作者学习制作Mod，且不需要去啃原版Example Mod的生肉注释 (~~虽然有翻译软件这一回事~~)\n5| *注: 为确保在 tModLoader 默认版本可用，该汉化版本基于 tModLoader 仓库 [1.4-stable分支的 Example Mod](https://github.com/tModLoader/tModLoader/tree/1.4-stable/ExampleMod)*\n6| *建议与 {tModLoader 注释汉化](https://github.com/Cyrillya/tModLoader-Document-Chinese) 配合使用*\n7| ## 我是来下载Example Mod的\n8| 直接点击绿色的 `Code` 在下拉列表中选择 `Download ZIP` 后，将文件解压到模组源码文件夹下即可 ~~不过能找到这的大概不用教这个吧~~，记得将文件夹名字改为 `ExampleMod` !\n9| ## 斜线后加空格\n10| 如果你有意向向此项目作出贡献，你可以提交 `Pull request`，点击右上角的 `Fork` 按钮复刻一份仓库到你的 Github 个人仓库，然后在你的个人仓库中修改文件，随后创建 `Pull request` 即可\n11| 更多相关内容还烦请在网上自行搜索并学习 **Git** 与 **Github** 相关内容，这里不便细嗦  \n12| (或者你开个 `Issue` 直接把你汉化好的文本+对应哪个文件发上来也行，然鹅不建议)\n13| 将这个仓库直接 `Clone` 到模组源码文件夹，运行一遍tML之后就会自动出现引用了\n14| ## 汉化建议\n15| ### 多行注释\n16| 注释一行不宜过长，在Example Mod中，注释往往被分成好几行，分行的好处是可以在一屏幕中直接看完注释，而不用来回拖条。\n17| 从该行第一个非空格字符之后算起，建议控制在**55-65个汉字**的范围内，英文则控制在**90-110个英文字母**，差不多是两倍关系\n18| 若该行以[链接](README.md)结束，则不应换行\n19| ### 斜线后加空格\n20| 为了美观，应在双斜线 `//` 后**加空格**再打注释，即:\n21| ```diff\n22| + // 这个是合格的注释样式\n23| - //这个注释双斜线后没空格，不合格\n24| ```\n25| 若直接在代码行末尾添加注释，应**加空格**，即：\n26| ```diff\n27| + Item.DamageType = DamageClass.Ranged; // 伤害类型设置为远程，正确的注释\n28| - Item.DamageType = DamageClass.Ranged;// 伤害类型设置为远程，错误的注释\n29| ### 通俗易懂\n30| 首先，机翻肯定是坏文明。\n31| 其次一些地方原Example Mod可能写得不够详尽或不够通俗，如有必要，建议自己另外写注释。\n32| ExampleMod的翻译不需要完全按着原文来，主要是得能让人看懂。\n33| ### 注意编码类型\n34| 编码类型应一致使用 `Unicode (UTF-8 带签名)`，这里的文件大部分是从 Example Mod 直接复制过来的，编码类型往往不对。\n35| 汉化一个文件时，点击VS左上角 `文件`，在下拉列表中点击 `[文件名] 另存为...`，点击 `保存` 字样右边的小三角，选择 `编码保存`，然后选择 `Unicode (UTF-8 带签名)` 编码  \n36| 这么做了一次后，之后的编辑直接 `Ctrl+S` 保存即可\n37| ### 注意事项\n38| - 本项目中 `Tick` 应译作 `帧` *(其在中文Wiki的叫法为“嘀嗒”，但实际上国内模组社区通常称作“帧”)*\n39| - 本项目中 `Tile` 应译作 `物块` *(其在中文Wiki的叫法为“图格”，但实际上国内社区通常称作“物块”)*\n40| - `Projectile` 建议译作 `射弹`\n41| - tModLoader所作 `TODO` 备注应删去\n42| - 注释中含有原版Wiki链接的，若有对应中文版页面，应使用**中文版**\n43| - 原版物品、NPC、射弹名称等一律使用中文Wiki上的翻译\n44| - 对于物品、NPC、射弹等支持名称翻译的，`SetDefault` 为英文原文，并使用 `AddTranslation` 添加中文翻译。且第一位 `GameCulture` 参数建议使用 `GameCulture.FromCultureName(GameCulture.CultureName.Chinese)`\n45| ## 能塞“私货”吗？\n46| 是可以的，只需在Github上提交一个**Pull Request**即可，但要记得写好注释。此外，还有一些与tModLoader官方一致的[**格式要求**](https://github.com/tModLoader/tModLoader/wiki/tModLoader-Style-Guide)需要遵守\n47| ## 这个项目目前的完成度？\n48| 1% (悲)  \n49| 快来汉化！\n50| ## 原版Example Mod在哪里？\n51| tModLoader 仓库: https://github.com/tModLoader/tModLoader  \n52| 发行版: https://github.com/tModLoader/tModLoader/releases/latest\n53| ```", "fragment_lines": [2, 6, 53], "fragment_content": ["#Example Mod 注释汉化", "*建议与 {tModLoader 注释汉化](https://github.com/Cyrillya/tModLoader-Document-Chinese) 配合使用*", "```"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n#Example Mod 注释汉化\n\n*NOTE: This repository is a Example Mod port but with Chinese comments, for the original version of Example Mod [click here](https://github.com/tModLoader/tModLoader).*\n\n这是一个将Example Mod注释**汉化**的项目，用于帮助新手Mod制作者学习制作Mod，且不需要去啃原版Example Mod的生肉注释 (~~虽然有翻译软件这一回事~~)\n\n*注: 为确保在 tModLoader 默认版本可用，该汉化版本基于 tModLoader 仓库 [1.4-stable分支的 Example Mod](https://github.com/tModLoader/tModLoader/tree/1.4-stable/ExampleMod)*\n\n*建议与 {tModLoader 注释汉化](https://github.com/Cyrillya/tModLoader-Document-Chinese) 配合使用*\n\n## 我是来下载Example Mod的\n\n直接点击绿色的 `Code` 在下拉列表中选择 `Download ZIP` 后，将文件解压到模组源码文件夹下即可 ~~不过能找到这的大概不用教这个吧~~，记得将文件夹名字改为 `ExampleMod` !\n\n## 我想汉化Example Mod\n\n如果你有意向向此项目作出贡献，你可以提交 `Pull request`，点击右上角的 `Fork` 按钮复刻一份仓库到你的 Github 个人仓库，然后在你的个人仓库中修改文件，随后创建 `Pull request` 即可\n\n更多相关内容还烦请在网上自行搜索并学习 **Git** 与 **Github** 相关内容，这里不便细嗦  \n(或者你开个 `Issue` 直接把你汉化好的文本+对应哪个文件发上来也行，然鹅不建议)\n\n将这个仓库直接 `Clone` 到模组源码文件夹，运行一遍tML之后就会自动出现引用了\n\n## 汉化建议\n\n### 多行注释\n\n注释一行不宜过长，在Example Mod中，注释往往被分成好几行，分行的好处是可以在一屏幕中直接看完注释，而不用来回拖条。\n\n从该行第一个非空格字符之后算起，建议控制在**55-65个汉字**的范围内，英文则控制在**90-110个英文字母**，差不多是两倍关系\n\n若该行以[链接](README.md)结束，则不应换行\n\n### 斜线后加空格\n\n为了美观，应在双斜线 `//` 后**加空格**再打注释，即:\n\n```diff\n+ // 这个是合格的注释样式\n- //这个注释双斜线后没空格，不合格\n```\n\n若直接在代码行末尾添加注释，应**加空格**，即：\n\n```diff\n+ Item.DamageType = DamageClass.Ranged; // 伤害类型设置为远程，正确的注释\n- Item.DamageType = DamageClass.Ranged;// 伤害类型设置为远程，错误的注释\n### 通俗易懂\n\n首先，机翻肯定是坏文明。\n\n其次一些地方原Example Mod可能写得不够详尽或不够通俗，如有必要，建议自己另外写注释。\n\nExampleMod的翻译不需要完全按着原文来，主要是得能让人看懂。\n\n### 注意编码类型\n\n编码类型应一致使用 `Unicode (UTF-8 带签名)`，这里的文件大部分是从 Example Mod 直接复制过来的，编码类型往往不对。\n\n汉化一个文件时，点击VS左上角 `文件`，在下拉列表中点击 `[文件名] 另存为...`，点击 `保存` 字样右边的小三角，选择 `编码保存`，然后选择 `Unicode (UTF-8 带签名)` 编码  \n这么做了一次后，之后的编辑直接 `Ctrl+S` 保存即可\n\n### 注意事项\n\n- 本项目中 `Tick` 应译作 `帧` *(其在中文Wiki的叫法为“嘀嗒”，但实际上国内模组社区通常称作“帧”)*\n- 本项目中 `Tile` 应译作 `物块` *(其在中文Wiki的叫法为“图格”，但实际上国内社区通常称作“物块”)*\n- `Projectile` 建议译作 `射弹`\n- tModLoader所作 `TODO` 备注应删去\n- 注释中含有原版Wiki链接的，若有对应中文版页面，应使用**中文版**\n- 原版物品、NPC、射弹名称等一律使用中文Wiki上的翻译\n- 对于物品、NPC、射弹等支持名称翻译的，`SetDefault` 为英文原文，并使用 `AddTranslation` 添加中文翻译。且第一位 `GameCulture` 参数建议使用 `GameCulture.FromCultureName(GameCulture.CultureName.Chinese)`\n\n## 能塞“私货”吗？\n\n是可以的，只需在Github上提交一个**Pull Request**即可，但要记得写好注释。此外，还有一些与tModLoader官方一致的[**格式要求**](https://github.com/tModLoader/tModLoader/wiki/tModLoader-Style-Guide)需要遵守\n\n## 这个项目目前的完成度？\n\n1% (悲)  \n快来汉化！\n\n## 原版Example Mod在哪里？\n\ntModLoader 仓库: https://github.com/tModLoader/tModLoader  \n发行版: https://github.com/tModLoader/tModLoader/releases/latest\n```\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/34", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "A template for project documentation, including sections for project introduction, features, technology stack, quick start guide, and contact information for the development team.", "canonical_solution": "# 项目名称\n\n## 项目简介\n\n这里是项目的简介部分，简要说明项目的目的和核心价值。\n\n## 功能特点\n\n- 功能1：详细描述功能1的具体内容和用途。\n- 功能2：详细描述功能2的具体内容和用途。\n- 功能3：详细描述功能3的具体内容和用途。\n  \n  ## 技术栈\n  \n  以下是构建项目使用的技术栈：\n1. 技术1\n2. 技术2\n3. 技术3\n   \n   ## 快速开始\n   \n   要在本地启动这个项目，请遵循以下步骤：\n   bash\n   git clone https://example.com/your-project.git\n   cd your-project\n   npm install\n   npm start", "buggy_code": "\n\n# 项目名称\n\n## 项目简介\n\n这里是项目的简介部分，简要说明项目的目的和核心价值。\n\n## 功能特点\n\n功能1：详细描述功能1的具体内容和用途。\n\n- 功能2：详细描述功能2的具体内容和用途。\n\n- 功能3：详细描述功能3的具体内容和用途。\n  \n  ##技术栈\n  \n  以下是构建项目使用的技术栈：\n1. 技术1\n\n2. 技术2\n\n3. 技术3\n   \n   ## 快速开始\n   \n   要在本地启动这个项目，请遵循以下步骤：\n   bash\n   git clone https://example.com/your-project.git\n   cd your-project\n   npm install\n   npm start", "bug_with_line_numbers": "   1 | # 项目名称\n   2 | ## 项目简介\n   3 | 这里是项目的简介部分，简要说明项目的目的和核心价值。\n   4 | ## 功能特点\n   5 | 功能1：详细描述功能1的具体内容和用途。\n   6 | - 功能2：详细描述功能2的具体内容和用途。\n   7 | - 功能3：详细描述功能3的具体内容和用途。\n   8 |   ##技术栈\n   9 |   以下是构建项目使用的技术栈：\n  10 | 1. 技术1\n  11 | 2. 技术2\n  12 | 3. 技术3\n  13 |    ## 快速开始\n  14 |    要在本地启动这个项目，请遵循以下步骤：\n  15 |    bash\n  16 |    git clone https://example.com/your-project.git\n  17 |    cd your-project\n  18 |    npm install\n  19 |    npm start", "fragment_lines": [5, 8], "fragment_content": ["功能1：详细描述功能1的具体内容和用途。", "##技术栈"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 项目名称\n\n## 项目简介\n\n这里是项目的简介部分，简要说明项目的目的和核心价值。\n\n## 功能特点\n\n功能1：详细描述功能1的具体内容和用途。\n\n- 功能2：详细描述功能2的具体内容和用途。\n\n- 功能3：详细描述功能3的具体内容和用途。\n  \n  ##技术栈\n  \n  以下是构建项目使用的技术栈：\n1. 技术1\n\n2. 技术2\n\n3. 技术3\n   \n   ## 快速开始\n   \n   要在本地启动这个项目，请遵循以下步骤：\n   bash\n   git clone https://example.com/your-project.git\n   cd your-project\n   npm install\n   npm start\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/35", "category": "Multiple", "subtype": "triple_bug", "level": "hard", "example": "", "docstring": "A resume template with sections for contact information, education background, work experience, skills, awards, and interests. It provides a professional overview of a candidate's qualifications", "canonical_solution": "# 李雷的简历\n\n## 联系信息\n\n- **电话:** +86 13800000000\n- **邮箱:** lilei@example.com\n- **地址:** 北京市朝阳区某某街道123号\n  \n  ## 教育背景\n- **北京大学** - 计算机科学与技术\n  - 学士学位\n  - 2015 - 2019\n    \n    ## 工作经历\n    \n    ### 软件工程师 —— 腾讯公司\n    \n    **2019年7月 - 至今**\n- 开发和维护移动应用接口\n- 协助设计跨平台应用框架\n- 进行代码审查和性能优化\n  \n  ## 技能清单\n- **编程语言:** Python, Java, C#\n- **框架:** React, Angular, Spring\n- **工具:** Git, Docker, Jenkins\n  \n  ## 荣誉奖项\n- **北京大学优秀学生奖** - 2018年\n- **全国计算机编程竞赛铜牌** - 2017年\n  \n  ## 兴趣爱好\n- 旅游\n- 摄影\n- 羽毛球", "buggy_code": "\n\n\n\n#李雷的简历\n\n## 联系信息\n\n- **邮箱:** +86 13800000000\n\n- **电话:** lilei@example.com\n\n- **地址:** 北京市朝阳区某某街道123号\n  \n  ## 教育背景\n\n- **北京大学** - 计算机科学与技术\n  \n  - 学士学位\n  \n  - 2015 - 2019\n    \n    ## 工作经历\n    \n    ### 软件工程师 —— 腾讯公司\n    \n    **2019年7月 - 至今**\n\n- 开发和维护移动应用接口\n\n- 协助设计跨平台应用框架\n\n- 进行代码审查和性能优化\n  \n  ## 技能清单\n\n- **编程语言:** Python, Java, C#\n\n- **框架:** React, Angular, Spring\n\n- **工具:** Git, Docker, Jenkins\n  \n  ## 荣誉奖项\n\n- **北京大学优秀学生奖** - 2018年\n\n- **全国计算机编程竞赛铜牌** - 2017年\n  \n  ## 兴趣爱好\n\n- 旅游\n\n- 摄影\n\n- 羽毛球", "bug_with_line_numbers": "1| #李雷的简历\n2| ## 联系信息\n3| - **邮箱:** +86 13800000000\n4| - **电话:** lilei@example.com\n5| - **地址:** 北京市朝阳区某某街道123号\n6|   \n7|   ## 教育背景\n8| - **北京大学** - 计算机科学与技术\n9|   \n10|   - 学士学位\n11|   \n12|   - 2015 - 2019\n13|     \n14|     ## 工作经历\n15|     \n16|     ### 软件工程师 —— 腾讯公司\n17|     \n18|     **2019年7月 - 至今**\n19| - 开发和维护移动应用接口\n20| - 协助设计跨平台应用框架\n21| - 进行代码审查和性能优化\n22|   \n23|   ## 技能清单\n24| - **编程语言:** Python, Java, C#\n25| - **框架:** React, Angular, Spring\n26| - **工具:** Git, Docker, Jenkins\n27|   \n28|   ## 荣誉奖项\n29| - **北京大学优秀学生奖** - 2018年\n30| - **全国计算机编程竞赛铜牌** - 2017年\n31|   \n32|   ## 兴趣爱好\n33| - 旅游\n34| - 摄影\n35| - 羽毛球", "fragment_lines": [1, 3, 4], "fragment_content": ["#李雷的简历", "- **邮箱:** +86 13800000000", "- **电话:** lilei@example.com"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n#李雷的简历\n\n## 联系信息\n\n- **邮箱:** +86 13800000000\n\n- **电话:** lilei@example.com\n\n- **地址:** 北京市朝阳区某某街道123号\n  \n  ## 教育背景\n\n- **北京大学** - 计算机科学与技术\n  \n  - 学士学位\n  \n  - 2015 - 2019\n    \n    ## 工作经历\n    \n    ### 软件工程师 —— 腾讯公司\n    \n    **2019年7月 - 至今**\n\n- 开发和维护移动应用接口\n\n- 协助设计跨平台应用框架\n\n- 进行代码审查和性能优化\n  \n  ## 技能清单\n\n- **编程语言:** Python, Java, C#\n\n- **框架:** React, Angular, Spring\n\n- **工具:** Git, Docker, Jenkins\n  \n  ## 荣誉奖项\n\n- **北京大学优秀学生奖** - 2018年\n\n- **全国计算机编程竞赛铜牌** - 2017年\n  \n  ## 兴趣爱好\n\n- 旅游\n\n- 摄影\n\n- 羽毛球\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/36", "category": "Multiple", "subtype": "quadruple_bug", "level": "hard", "example": "", "docstring": "A project proposal for a data analysis platform that offers user-friendly data visualization tools, supporting data import, processing, and export functions. It includes a description of the project, technology stack, and installation guide.", "canonical_solution": "# 项目标题：数据分析平台\n\n## 项目概述\n\n本项目旨在创建一个数据分析平台，提供用户友好的数据可视化工具，支持数据导入、处理和导出功能。\n\n## 功能描述\n\n- **数据导入:** 支持CSV、JSON等格式的数据导入\n\n- **数据处理:** 提供数据清洗、转换和汇总功能\n\n- **数据可视化:** 生成动态图表和报表\n\n- **数据导出:** 允许用户导出数据为CSV或PDF格式\n  \n  ## 技术栈\n\n- **前端:** React + D3.js\n\n- **后端:** Node.js + Express\n\n- **数据库:** MongoDB\n\n- **部署:** Docker + Kubernetes\n  \n  ## 安装指南\n  \n  ```bash\n  \n  # 克隆仓库\n  \n  git clone https://github.com/username/data-analysis-platform.git\n  \n  # 安装依赖\n  \n  cd data-analysis-platform\n  npm install\n  \n  # 启动项目\n  \n  npm start\n", "buggy_code": "\n# 项目标题：数据分析平台\n\n## 项目概述\n\n本项目旨在创建一个数据分析平台，提供用户友好的数据可视化工具，支持数据导入、处理和导出功能。\n\n##功能描述\n\n- **数据导入:** 支持CSV、JSON等格式的数据导入\n\n- **数据处理:** 提供数据清洗、转换和汇总功能\n\n- **数据可视化:** 生成动态图表和报表\n\n- **数据导出:** 允许用户导出数据为CSV或PDF格式\n  \n  ## 安装指南\n\n- **前端:** React + D3.js\n\n- **后端:** Node.js + Express\n\n- **数据库:** MongoDB\n\n- **部署:** Docker + Kubernetes\n  \n  ## 技术栈\n  \n  ```bash\n  \n  ```\n  \n  # 克隆仓库\n  \n  git clone https://github.com/username/data-analysis-platform.git\n  \n  # 安装依赖\n  \n  cd data-analysis-platform\n  npm install\n  \n  # 启动项目\n  \n  npm start\n  ```", "bug_with_line_numbers": "1| # 项目标题：数据分析平台\n2| ## 项目概述\n3| 本项目旨在创建一个数据分析平台，提供用户友好的数据可视化工具，支持数据导入、处理和导出功能。\n4| ##功能描述\n5| - **数据导入:** 支持CSV、JSON等格式的数据导入\n6| - **数据处理:** 提供数据清洗、转换和汇总功能\n7| - **数据可视化:** 生成动态图表和报表\n8| - **数据导出:** 允许用户导出数据为CSV或PDF格式\n9|   \n10|   ## 安装指南\n11| - **前端:** React + D3.js\n12| - **后端:** Node.js + Express\n13| - **数据库:** MongoDB\n14| - **部署:** Docker + Kubernetes\n15|   \n16|   ## 技术栈\n17|   \n18|   ```bash\n19|   \n20|   ```\n21|   \n22|   # 克隆仓库\n23|   \n24|   git clone https://github.com/username/data-analysis-platform.git\n25|   \n26|   # 安装依赖\n27|   \n28|   cd data-analysis-platform\n29|   npm install\n30|   \n31|   # 启动项目\n32|   \n33|   npm start", "fragment_lines": [4, 10, 16, 20], "fragment_content": ["##功能描述", "## 安装指南", "## 技术栈", "```"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 项目标题：数据分析平台\n\n## 项目概述\n\n本项目旨在创建一个数据分析平台，提供用户友好的数据可视化工具，支持数据导入、处理和导出功能。\n\n##功能描述\n\n- **数据导入:** 支持CSV、JSON等格式的数据导入\n\n- **数据处理:** 提供数据清洗、转换和汇总功能\n\n- **数据可视化:** 生成动态图表和报表\n\n- **数据导出:** 允许用户导出数据为CSV或PDF格式\n  \n  ## 安装指南\n\n- **前端:** React + D3.js\n\n- **后端:** Node.js + Express\n\n- **数据库:** MongoDB\n\n- **部署:** Docker + Kubernetes\n  \n  ## 技术栈\n  \n  ```bash\n  \n  ```\n  \n  # 克隆仓库\n  \n  git clone https://github.com/username/data-analysis-platform.git\n  \n  # 安装依赖\n  \n  cd data-analysis-platform\n  npm install\n  \n  # 启动项目\n  \n  npm start\n  ```\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/37", "category": "Special", "subtype": "markdown_title_error", "level": "hard", "example": "", "docstring": "A course outline for an advanced database systems class, covering topics like distributed databases, NoSQL, database security, and optimization. It includes the course objectives, schedule, assessment methods, and contact information for the professor and teaching assistant.", "canonical_solution": "# 高级数据库系统\n\n## 课程描述\n\n本课程旨在深入了解数据库技术的高级主题，包括但不限于分布式数据库、NoSQL技术、数据库安全性与优化。\n\n## 教授信息\n\n- **教授姓名:** 李明\n- **邮箱:** liming@university.edu\n  \n  ## 课程目标\n  \n  学生完成本课程后应能够：\n- 理解和应用分布式数据库的基本原则。\n- 评估和选择合适的NoSQL数据库。\n- 设计并实施数据库安全策略。\n  \n  ## 课程安排\n  \n  ### 第一周：数据库系统概览\n- 历史与发展\n- 主流数据库技术简介\n  \n  ### 第二周：分布式数据库\n- 架构与设计\n- 事务处理\n  \n  ### 第三周：NoSQL数据库\n- 键值存储\n- 文档存储\n- 图数据库\n  \n  ### 第四周：数据库安全性\n- 安全策略\n- 数据加密与访问控制\n  \n  ### 第五周：性能优化\n- 查询优化\n- 索引和存储优化\n  \n  ## 评估方式\n- **期中考试:** 30%\n- **项目报告:** 35%\n- **期末考试:** 35%\n  \n  ## 参考资料\n- *数据库系统概念*，第六版，Silberschatz, Korth 和 Sudarshan 著\n- *NoSQL精粹*，Pramod J. Sadalage 和 Martin Fowler 著\n  \n  ## 助教联系方式\n- **姓名:** 张力\n- **邮箱:** zhangli@university.edu", "buggy_code": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#高级数据库系统\n\n## 课程描述\n\n本课程旨在深入了解数据库技术的高级主题，包括但不限于分布式数据库、NoSQL技术、数据库安全性与优化。\n\n## 教授信息\n\n- **教授姓名:** 李明\n\n- **邮箱:** liming@university.edu\n  \n  ## 课程目标\n  \n  学生完成本课程后应能够：\n\n- 理解和应用分布式数据库的基本原则。\n\n- 评估和选择合适的NoSQL数据库。\n\n- 设计并实施数据库安全策略。\n  \n  ## 课程安排\n  \n  ### 第一周：数据库系统概览\n\n- 历史与发展\n\n- 主流数据库技术简介\n  \n  ### 第二周：分布式数据库\n\n- 架构与设计\n\n- 事务处理\n  \n  ### 第三周：NoSQL数据库\n\n- 键值存储\n\n- 文档存储\n\n- 图数据库\n  \n  ### 第四周：数据库安全性\n\n- 安全策略\n\n- 数据加密与访问控制\n  \n  ### 第五周：性能优化\n\n- 查询优化\n\n- 索引和存储优化\n  \n  ## 评估方式\n\n- **期中考试:** 30%\n\n- **项目报告:** 35%\n\n- **期末考试:** 35%\n  \n  ## 参考资料\n\n- *数据库系统概念*，第六版，Silberschatz, Korth 和 Sudarshan 著\n\n- *NoSQL精粹*，Pramod J. Sadalage 和 Martin Fowler 著\n  \n  ## 助教联系方式\n\n- **姓名:** 张力\n\n- **邮箱:** zhangli@university.edu", "bug_with_line_numbers": "1| #高级数据库系统\n2| ## 课程描述\n3| 本课程旨在深入了解数据库技术的高级主题，包括但不限于分布式数据库、NoSQL技术、数据库安全性与优化。\n4| ## 教授信息\n5| - **教授姓名:** 李明\n6| - **邮箱:** liming@university.edu\n7|   \n8|   ## 课程目标\n9|   \n10|   学生完成本课程后应能够：\n11| - 理解和应用分布式数据库的基本原则。\n12| - 评估和选择合适的NoSQL数据库。\n13| - 设计并实施数据库安全策略。\n14|   \n15|   ## 课程安排\n16|   \n17|   ### 第一周：数据库系统概览\n18| - 历史与发展\n19| - 主流数据库技术简介\n20|   \n21|   ### 第二周：分布式数据库\n22| - 架构与设计\n23| - 事务处理\n24|   \n25|   ### 第三周：NoSQL数据库\n26| - 键值存储\n27| - 文档存储\n28| - 图数据库\n29|   \n30|   ### 第四周：数据库安全性\n31| - 安全策略\n32| - 数据加密与访问控制\n33|   \n34|   ### 第五周：性能优化\n35| - 查询优化\n36| - 索引和存储优化\n37|   \n38|   ## 评估方式\n39| - **期中考试:** 30%\n40| - **项目报告:** 35%\n41| - **期末考试:** 35%\n42|   \n43|   ## 参考资料\n44| - *数据库系统概念*，第六版，Silberschatz, Korth 和 Sudarshan 著\n45| - *NoSQL精粹*，Pramod J. Sadalage 和 Martin Fowler 著\n46|   \n47|   ## 助教联系方式\n48| - **姓名:** 张力\n49| - **邮箱:** zhangli@university.edu", "fragment_lines": [1], "fragment_content": ["#高级数据库系统"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n#高级数据库系统\n\n## 课程描述\n\n本课程旨在深入了解数据库技术的高级主题，包括但不限于分布式数据库、NoSQL技术、数据库安全性与优化。\n\n## 教授信息\n\n- **教授姓名:** 李明\n\n- **邮箱:** liming@university.edu\n  \n  ## 课程目标\n  \n  学生完成本课程后应能够：\n\n- 理解和应用分布式数据库的基本原则。\n\n- 评估和选择合适的NoSQL数据库。\n\n- 设计并实施数据库安全策略。\n  \n  ## 课程安排\n  \n  ### 第一周：数据库系统概览\n\n- 历史与发展\n\n- 主流数据库技术简介\n  \n  ### 第二周：分布式数据库\n\n- 架构与设计\n\n- 事务处理\n  \n  ### 第三周：NoSQL数据库\n\n- 键值存储\n\n- 文档存储\n\n- 图数据库\n  \n  ### 第四周：数据库安全性\n\n- 安全策略\n\n- 数据加密与访问控制\n  \n  ### 第五周：性能优化\n\n- 查询优化\n\n- 索引和存储优化\n  \n  ## 评估方式\n\n- **期中考试:** 30%\n\n- **项目报告:** 35%\n\n- **期末考试:** 35%\n  \n  ## 参考资料\n\n- *数据库系统概念*，第六版，Silberschatz, Korth 和 Sudarshan 著\n\n- *NoSQL精粹*，Pramod J. Sadalage 和 Martin Fowler 著\n  \n  ## 助教联系方式\n\n- **姓名:** 张力\n\n- **邮箱:** zhangli@university.edu\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/38", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "A recipe for preparing classic Italian pasta with ingredients like spaghetti, tomato sauce, fresh basil, garlic, olive oil, salt, and pepper. It provides step-by-step cooking instructions and chef's tips for enhancing the dish.", "canonical_solution": "# 经典意大利面\n\n## 配料\n\n- 意大利面 500 克\n- 番茄酱 200 克\n- 新鲜罗勒叶 20 克\n- 大蒜 3 瓣\n- 橄榄油 2 汤匙\n- 盐 适量\n- 胡椒粉 适量\n  \n  ## 制作步骤\n1. 将一大锅水煮沸，加入少许盐。\n2. 加入意大利面，根据包装上的指示煮至 al dente（稍硬的口感）。\n3. 在另一锅中，加热橄榄油，加入切碎的大蒜煸炒至金黄。\n4. 加入番茄酱，用中小火煮5分钟。\n5. 将煮好的意大利面用漏勺捞出，直接放入带番茄酱的锅中，快速翻炒均匀。\n6. 加入切碎的罗勒叶，加盐和胡椒调味。\n7. 盛出后可撒上帕尔马干酪。\n   \n   ## 厨师小贴士\n- 番茄酱可根据口味选择不同的品牌，或尝试自制以获得更佳口感。\n- 在意大利面煮好后，可保留少量煮面水，用于调节酱料的浓稠度。", "buggy_code": "\n\n\n\n\n\n\n\n\n\n\n\n# 经典意大利面\n\n##配料\n\n- 意大利面 500 克\n\n- 番茄酱 200 克\n\n- 新鲜罗勒叶 20 克\n\n- 大蒜 3 瓣\n\n- 橄榄油 2 汤匙\n\n- 盐 适量\n\n- 胡椒粉 适量\n  \n  ## 制作步骤\n1. 将一大锅水煮沸，加入少许盐。\n\n2. 加入意大利面，根据包装上的指示煮至 al dente（稍硬的口感）。\n\n3. 在另一锅中，加热橄榄油，加入切碎的大蒜煸炒至金黄。\n\n4. 加入番茄酱，用中小火煮5分钟。\n   \n   7.将煮好的意大利面用漏勺捞出，直接放入带番茄酱的锅中，快速翻炒均匀。\n   \n   5.加入切碎的罗勒叶，加盐和胡椒调味。\n   \n   6.盛出后可撒上帕尔马干酪。\n   \n   ## 厨师小贴士\n- 番茄酱可根据口味选择不同的品牌，或尝试自制以获得更佳口感。\n- 在意大利面煮好后，可保留少量煮面水，用于调节酱料的浓稠度。", "bug_with_line_numbers": "1| # 经典意大利面\n2| ##配料\n3| - 意大利面 500 克\n4| - 番茄酱 200 克\n5| - 新鲜罗勒叶 20 克\n6| - 大蒜 3 瓣\n7| - 橄榄油 2 汤匙\n8| - 盐 适量\n9| - 胡椒粉 适量\n10|   \n11|   ## 制作步骤\n12| 1. 将一大锅水煮沸，加入少许盐。\n13| 2. 加入意大利面，根据包装上的指示煮至 al dente（稍硬的口感）。\n14| 3. 在另一锅中，加热橄榄油，加入切碎的大蒜煸炒至金黄。\n15| 4. 加入番茄酱，用中小火煮5分钟。\n16|    \n17|    7.将煮好的意大利面用漏勺捞出，直接放入带番茄酱的锅中，快速翻炒均匀。\n18|    \n19|    5.加入切碎的罗勒叶，加盐和胡椒调味。\n20|    \n21|    6.盛出后可撒上帕尔马干酪。\n22|    \n23|    ## 厨师小贴士\n24| - 番茄酱可根据口味选择不同的品牌，或尝试自制以获得更佳口感。\n25| - 在意大利面煮好后，可保留少量煮面水，用于调节酱料的浓稠度。", "fragment_lines": [2, 17, 19, 21], "fragment_content": ["##配料", "7.将煮好的意大利面用漏勺捞出，直接放入带番茄酱的锅中，快速翻炒均匀。", "5.加入切碎的罗勒叶，加盐和胡椒调味。", "6.盛出后可撒上帕尔马干酪。"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 经典意大利面\n\n##配料\n\n- 意大利面 500 克\n\n- 番茄酱 200 克\n\n- 新鲜罗勒叶 20 克\n\n- 大蒜 3 瓣\n\n- 橄榄油 2 汤匙\n\n- 盐 适量\n\n- 胡椒粉 适量\n  \n  ## 制作步骤\n1. 将一大锅水煮沸，加入少许盐。\n\n2. 加入意大利面，根据包装上的指示煮至 al dente（稍硬的口感）。\n\n3. 在另一锅中，加热橄榄油，加入切碎的大蒜煸炒至金黄。\n\n4. 加入番茄酱，用中小火煮5分钟。\n   \n   7.将煮好的意大利面用漏勺捞出，直接放入带番茄酱的锅中，快速翻炒均匀。\n   \n   5.加入切碎的罗勒叶，加盐和胡椒调味。\n   \n   6.盛出后可撒上帕尔马干酪。\n   \n   ## 厨师小贴士\n- 番茄酱可根据口味选择不同的品牌，或尝试自制以获得更佳口感。\n- 在意大利面煮好后，可保留少量煮面水，用于调节酱料的浓稠度。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/39", "category": "Special", "subtype": "markdown_title_error", "level": "hard", "example": "", "docstring": "Minutes from a project kickoff meeting, detailing the meeting's objectives, key discussions, task assignments, and next steps, focusing on establishing the project framework and assigning initial responsibilities.", "canonical_solution": "# 项目启动会议日记\n\n## 会议详情\n\n- **日期:** 2023年10月10日\n- **时间:** 14:00 - 16:00\n- **地点:** 会议室 A\n- **参与人员:** 张三、李四、王五、赵六\n  \n  ## 会议目标\n- 确定项目的基本框架和里程碑\n- 分配初步任务和责任\n- 讨论预期的挑战和解决策略\n  \n  ## 会议纪要\n- **张三** 提出项目的技术路线，包括采用的技术栈及预期的技术难点。\n- **李四** 讨论了市场分析结果和目标客户群。\n- **王五** 概述了项目的财务预算和资金安排。\n- **赵六** 提出了项目管理工具和沟通流程的建议。\n  \n  ## 任务分配\n- **张三** 负责技术开发和团队构建。\n- **李四** 负责市场推广和客户反馈收集。\n- **王五** 负责财务管理和资金调配。\n- **赵六** 负责项目日常管理和进度监控。\n  \n  ## 下一步行动\n- 下周一（10月17日）提交初步设计方案。\n- 每周五进行项目进度会议和问题讨论。\n  \n  # ", "buggy_code": "\n\n\n\n\n\n\n\n\n# 项目启动会议日记\n\n## 会议详情\n\n- **日期:** 2023年10月10日\n\n- **时间:** 14:00 - 16:00\n\n- **地点:** 会议室 A\n\n- **参与人员:** 张三、李四、王五、赵六\n  \n  ## 会议目标\n\n- 确定项目的基本框架和里程碑\n\n- 分配初步任务和责任\n\n- 讨论预期的挑战和解决策略\n  \n  ## 会议纪要\n\n- **张三** 提出项目的技术路线，包括采用的技术栈及预期的技术难点。\n\n- **李四** 讨论了市场分析结果和目标客户群。\n\n- **王五** 概述了项目的财务预算和资金安排。\n\n- **赵六** 提出了项目管理工具和沟通流程的建议。\n  \n  ## 任务分配\n\n- **张三** 负责技术开发和团队构建。\n\n- **李四** 负责市场推广和客户反馈收集。\n\n- **王五** 负责财务管理和资金调配。\n\n- **赵六** 负责项目日常管理和进度监控。\n  \n  ##下一步行动\n\n- 下周一（10月17日）提交初步设计方案。\n\n- 每周五进行项目进度会议和问题讨论。\n  \n  # ", "bug_with_line_numbers": "1| # 项目启动会议日记\n2| ## 会议详情\n3| - **日期:** 2023年10月10日\n4| - **时间:** 14:00 - 16:00\n5| - **地点:** 会议室 A\n6| - **参与人员:** 张三、李四、王五、赵六\n7|   \n8|   ## 会议目标\n9| - 确定项目的基本框架和里程碑\n10| - 分配初步任务和责任\n11| - 讨论预期的挑战和解决策略\n12|   \n13|   ## 会议纪要\n14| - **张三** 提出项目的技术路线，包括采用的技术栈及预期的技术难点。\n15| - **李四** 讨论了市场分析结果和目标客户群。\n16| - **王五** 概述了项目的财务预算和资金安排。\n17| - **赵六** 提出了项目管理工具和沟通流程的建议。\n18|   \n19|   ## 任务分配\n20| - **张三** 负责技术开发和团队构建。\n21| - **李四** 负责市场推广和客户反馈收集。\n22| - **王五** 负责财务管理和资金调配。\n23| - **赵六** 负责项目日常管理和进度监控。\n24|   \n25|   ##下一步行动\n26| - 下周一（10月17日）提交初步设计方案。\n27| - 每周五进行项目进度会议和问题讨论。\n28|   \n29|   # ", "fragment_lines": [25], "fragment_content": ["##下一步行动"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 项目启动会议日记\n\n## 会议详情\n\n- **日期:** 2023年10月10日\n\n- **时间:** 14:00 - 16:00\n\n- **地点:** 会议室 A\n\n- **参与人员:** 张三、李四、王五、赵六\n  \n  ## 会议目标\n\n- 确定项目的基本框架和里程碑\n\n- 分配初步任务和责任\n\n- 讨论预期的挑战和解决策略\n  \n  ## 会议纪要\n\n- **张三** 提出项目的技术路线，包括采用的技术栈及预期的技术难点。\n\n- **李四** 讨论了市场分析结果和目标客户群。\n\n- **王五** 概述了项目的财务预算和资金安排。\n\n- **赵六** 提出了项目管理工具和沟通流程的建议。\n  \n  ## 任务分配\n\n- **张三** 负责技术开发和团队构建。\n\n- **李四** 负责市场推广和客户反馈收集。\n\n- **王五** 负责财务管理和资金调配。\n\n- **赵六** 负责项目日常管理和进度监控。\n  \n  ##下一步行动\n\n- 下周一（10月17日）提交初步设计方案。\n\n- 每周五进行项目进度会议和问题讨论。\n  \n  #\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/40", "category": "Multiple", "subtype": "double_bug", "level": "easy", "example": "", "docstring": "An 8-week fitness program designed for beginners to enhance physical strength and muscle power, including aerobic and strength training exercises, along with nutritional advice and cautionary notes.", "canonical_solution": "# 8周健身挑战计划\n\n## 介绍\n\n此计划旨在帮助初学者在8周内提升体力和肌肉力量，包括有氧和力量训练。\n\n## 健身目标\n\n- 增强核心肌群力量\n- 提升整体体力\n- 体重管理\n  \n  ## 每周计划\n  \n  ### 第一周：适应期\n- **星期一**：全身力量训练\n- **星期三**：有氧运动（慢跑30分钟）\n- **星期五**：核心训练\n  \n  ### 第二周：强度提升\n- **星期一**：腿部力量训练\n- **星期三**：间歇训练（20分钟快跑）\n- **星期五**：上身力量训练\n  \n  ### 第三周至第八周\n- 重复第一周和第二周的计划，逐渐增加训练的强度和持续时间。\n  \n  ## 营养建议\n- 增加蛋白质摄入，支持肌肉恢复\n- 确保充足的水分摄入\n- 避免高糖食物和饮料\n  \n  ## 注意事项\n- 训练前做好热身，防止受伤\n- 训练强度应根据个人体能调整\n- 如感到不适，应立即停止训练", "buggy_code": "# 8周健身挑战计划\n## 介绍\n此计划旨在帮助初学者在8周内提升体力和肌肉力量，包括有氧和力量训练。\n##健身目标\n- 增强核心肌群力量\n提升整体体力\n- 体重管理\n## 每周计划\n### 第一周：适应期\n- **星期一**：全身力量训练\n- **星期三**：有氧运动（慢跑30分钟）\n- **星期五**：核心训练\n### 第二周：强度提升\n- **星期一**：腿部力量训练\n- **星期三**：间歇训练（20分钟快跑）\n- **星期五**：上身力量训练\n### 第三周至第八周\n- 重复第一周和第二周的计划，逐渐增加训练的强度和持续时间。\n## 营养建议\n- 增加蛋白质摄入，支持肌肉恢复\n- 确保充足的水分摄入\n- 避免高糖食物和饮料\n## 注意事项\n- 训练前做好热身，防止受伤\n- 训练强度应根据个人体能调整\n- 如感到不适，应立即停止训练", "bug_with_line_numbers": "   1 | # 8周健身挑战计划\n   2 | ## 介绍\n   3 | 此计划旨在帮助初学者在8周内提升体力和肌肉力量，包括有氧和力量训练。\n   4 | ##健身目标\n   5 | - 增强核心肌群力量\n   6 | 提升整体体力\n   7 | - 体重管理\n   8 | ## 每周计划\n   9 | ### 第一周：适应期\n  10 | - **星期一**：全身力量训练\n  11 | - **星期三**：有氧运动（慢跑30分钟）\n  12 | - **星期五**：核心训练\n  13 | ### 第二周：强度提升\n  14 | - **星期一**：腿部力量训练\n  15 | - **星期三**：间歇训练（20分钟快跑）\n  16 | - **星期五**：上身力量训练\n  17 | ### 第三周至第八周\n  18 | - 重复第一周和第二周的计划，逐渐增加训练的强度和持续时间。\n  19 | ## 营养建议\n  20 | - 增加蛋白质摄入，支持肌肉恢复\n  21 | - 确保充足的水分摄入\n  22 | - 避免高糖食物和饮料\n  23 | ## 注意事项\n  24 | - 训练前做好热身，防止受伤\n  25 | - 训练强度应根据个人体能调整\n  26 | - 如感到不适，应立即停止训练", "fragment_lines": [4, 6], "fragment_content": ["##健身目标", "提升整体体力"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 8周健身挑战计划\n## 介绍\n此计划旨在帮助初学者在8周内提升体力和肌肉力量，包括有氧和力量训练。\n##健身目标\n- 增强核心肌群力量\n提升整体体力\n- 体重管理\n## 每周计划\n### 第一周：适应期\n- **星期一**：全身力量训练\n- **星期三**：有氧运动（慢跑30分钟）\n- **星期五**：核心训练\n### 第二周：强度提升\n- **星期一**：腿部力量训练\n- **星期三**：间歇训练（20分钟快跑）\n- **星期五**：上身力量训练\n### 第三周至第八周\n- 重复第一周和第二周的计划，逐渐增加训练的强度和持续时间。\n## 营养建议\n- 增加蛋白质摄入，支持肌肉恢复\n- 确保充足的水分摄入\n- 避免高糖食物和饮料\n## 注意事项\n- 训练前做好热身，防止受伤\n- 训练强度应根据个人体能调整\n- 如感到不适，应立即停止训练\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/41", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "An overview of a three-day summit bringing together leaders and enthusiasts from the open source community to discuss the latest technologies, projects, and best practices, with session details and registration information.", "canonical_solution": "# 2024年全球开源技术峰会\n\n## 会议概览\n\n为期三天的会议将汇聚全球开源社区的领导者、贡献者和爱好者，分享最新的开源技术、项目和最佳实践。\n\n## 地点与日期\n\n- **日期**: 2024年7月10日至12日\n- **地点**: 纽约国际会议中心\n  \n  ## 日程安排\n  \n  ### 第一天：开源文化与社区\n- **09:00 - 10:00** 主旨演讲：开源的未来\n- **10:30 - 12:00** 讨论小组：构建活跃的开源社区\n- **14:00 - 16:00** 工作坊：如何贡献开源项目\n  \n  ### 第二天：技术演进\n- **09:00 - 10:30** 演讲：开源在人工智能中的应用\n- **11:00 - 12:30** 案例研究：成功的开源项目\n- **14:00 - 16:00** 编程马拉松：开源软件开发\n  \n  ### 第三天：开源项目管理\n- **09:00 - 10:00** 演讲：开源许可与法律问题\n- **10:30 - 12:00** 圆桌讨论：开源项目的可持续性\n- **14:00 - 15:00** 结束演讲：开源技术的未来趋势\n  \n  ## 注册信息\n- [点击此处注册参会](https://example.com/register)\n  \n  ## 联系方式\n- **邮箱**: contact@opensourcecon.org\n- **电话**: +1 234 567 8900", "buggy_code": "\n\n\n\n\n\n\n\n\n\n\n\n# 2024年全球开源技术峰会\n\n## 会议概览\n\n为期三天的会议将汇聚全球开源社区的领导者、贡献者和爱好者，分享最新的开源技术、项目和最佳实践。\n\n##地点与日期\n\n- **日期**: 2024年7月10日至12日\n\n- **地点**: 纽约国际会议中心\n  \n  ## 日程安排\n  \n  ### 第一天：开源文化与社区\n\n- **09:00 - 10:00** 主旨演讲：开源的未来\n\n- **10:30 - 12:00** 讨论小组：构建活跃的开源社区\n\n- **14:00 - 16:00** 工作坊：如何贡献开源项目\n  \n  ### 第二天：技术演进\n\n- **09:00 - 10:30** 演讲：开源在人工智能中的应用\n\n- **11:00 - 12:30** 案例研究：成功的开源项目\n\n- **14:00 - 16:00** 编程马拉松：开源软件开发\n  \n  ### 第三天：开源项目管理\n\n- **09:00 - 10:00** 演讲：开源许可与法律问题\n\n- **10:30 - 12:00** 圆桌讨论：开源项目的可持续性\n\n- **14:00 - 15:00** 结束演讲：开源技术的未来趋势\n  \n  ## 注册信息\n\n- [点击此处注册参会]https://example.com/register)\n  \n  ## 联系方式\n\n- **邮箱**: contact@opensourcecon.org\n\n- **电话**: +1 234 567 8900", "bug_with_line_numbers": "1| # 2024年全球开源技术峰会\n2| ## 会议概览\n3| 为期三天的会议将汇聚全球开源社区的领导者、贡献者和爱好者，分享最新的开源技术、项目和最佳实践。\n4| ##地点与日期\n5| - **日期**: 2024年7月10日至12日\n6| - **地点**: 纽约国际会议中心\n7|   \n8|   ## 日程安排\n9|   \n10|   ### 第一天：开源文化与社区\n11| - **09:00 - 10:00** 主旨演讲：开源的未来\n12| - **10:30 - 12:00** 讨论小组：构建活跃的开源社区\n13| - **14:00 - 16:00** 工作坊：如何贡献开源项目\n14|   \n15|   ### 第二天：技术演进\n16| - **09:00 - 10:30** 演讲：开源在人工智能中的应用\n17| - **11:00 - 12:30** 案例研究：成功的开源项目\n18| - **14:00 - 16:00** 编程马拉松：开源软件开发\n19|   \n20|   ### 第三天：开源项目管理\n21| - **09:00 - 10:00** 演讲：开源许可与法律问题\n22| - **10:30 - 12:00** 圆桌讨论：开源项目的可持续性\n23| - **14:00 - 15:00** 结束演讲：开源技术的未来趋势\n24|   \n25|   ## 注册信息\n26| - [点击此处注册参会]https://example.com/register)\n27|   \n28|   ## 联系方式\n29| - **邮箱**: contact@opensourcecon.org\n30| - **电话**: +1 234 567 8900", "fragment_lines": [4, 26], "fragment_content": ["##地点与日期", "- [点击此处注册参会]https://example.com/register)"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 2024年全球开源技术峰会\n\n## 会议概览\n\n为期三天的会议将汇聚全球开源社区的领导者、贡献者和爱好者，分享最新的开源技术、项目和最佳实践。\n\n##地点与日期\n\n- **日期**: 2024年7月10日至12日\n\n- **地点**: 纽约国际会议中心\n  \n  ## 日程安排\n  \n  ### 第一天：开源文化与社区\n\n- **09:00 - 10:00** 主旨演讲：开源的未来\n\n- **10:30 - 12:00** 讨论小组：构建活跃的开源社区\n\n- **14:00 - 16:00** 工作坊：如何贡献开源项目\n  \n  ### 第二天：技术演进\n\n- **09:00 - 10:30** 演讲：开源在人工智能中的应用\n\n- **11:00 - 12:30** 案例研究：成功的开源项目\n\n- **14:00 - 16:00** 编程马拉松：开源软件开发\n  \n  ### 第三天：开源项目管理\n\n- **09:00 - 10:00** 演讲：开源许可与法律问题\n\n- **10:30 - 12:00** 圆桌讨论：开源项目的可持续性\n\n- **14:00 - 15:00** 结束演讲：开源技术的未来趋势\n  \n  ## 注册信息\n\n- [点击此处注册参会]https://example.com/register)\n  \n  ## 联系方式\n\n- **邮箱**: contact@opensourcecon.org\n\n- **电话**: +1 234 567 8900\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/42", "category": "Multiple", "subtype": "double_bug", "level": "medium", "example": "", "docstring": "A narrative structure for a novel about a young adventurer named Jack, detailing the story's characters, chapter outline, and writing tips to engage readers and build suspense", "canonical_solution": "# 小说写作结构：《冒险者之旅》\n\n## 故事简介\n\n这是一部关于勇气、友谊和成长的冒险故事，讲述了主角杰克从一个普通村庄出发，踏上寻找传说中的神秘宝藏的旅程。\n\n## 角色列表\n\n- **杰克**：故事的主角，一个充满好奇心的年轻人。\n- **莉莉**：杰克的好友，聪明勇敢，擅长解谜。\n- **老者摩根**：向杰克提供线索的神秘人物。\n  \n  ## 章节安排\n  \n  ### 第一章：出发前夜\n- 杰克在村里的生活\n- 杰克决定踏上旅程的原因\n  \n  ### 第二章：第一个挑战\n- 杰克和莉莉遇到第一个谜题\n- 他们如何解决问题并继续前进\n  \n  ### 第三章：摩根的试炼\n- 老者摩根提出的三个任务\n- 杰克和莉莉的智慧和勇气的考验\n  \n  ### 结尾章节：宝藏之谜\n- 寻找宝藏的最后线索\n- 揭示宝藏的真相和故事的寓意\n  \n  ## 写作技巧\n- 使用生动的描述来塑造角色和场景\n- 保持故事的节奏和悬念，吸引读者继续阅读\n- 在故事中加入意外转折，增加复杂性和深度", "buggy_code": "# 小说写作结构：《冒险者之旅》\n\n## 故事简介\n\n这是一部关于勇气、友谊和成长的冒险故事，讲述了主角杰克从一个普通村庄出发，踏上寻找传说中的神秘宝藏的旅程。\n\n## 角色列表\n\n- **杰克：故事的主角，一个充满好奇心的年轻人。\n- **莉莉：杰克的好友，聪明勇敢，擅长解谜。\n- **老者摩根**：向杰克提供线索的神秘人物。\n  \n  ## 章节安排\n  \n  ### 第一章：出发前夜\n- 杰克在村里的生活\n- 杰克决定踏上旅程的原因\n  \n  ### 第二章：第一个挑战\n- 杰克和莉莉遇到第一个谜题\n- 他们如何解决问题并继续前进\n  \n  ### 第三章：摩根的试炼\n- 老者摩根提出的三个任务\n- 杰克和莉莉的智慧和勇气的考验\n  \n  ### 结尾章节：宝藏之谜\n- 寻找宝藏的最后线索\n- 揭示宝藏的真相和故事的寓意\n  \n  ## 写作技巧\n- 使用生动的描述来塑造角色和场景\n- 保持故事的节奏和悬念，吸引读者继续阅读\n- 在故事中加入意外转折，增加复杂性和深度", "bug_with_line_numbers": "   1 | # 小说写作结构：《冒险者之旅》\n   2 | ## 故事简介\n   3 | 这是一部关于勇气、友谊和成长的冒险故事，讲述了主角杰克从一个普通村庄出发，踏上寻找传说中的神秘宝藏的旅程。\n   4 | ## 角色列表\n   5 | - **杰克：故事的主角，一个充满好奇心的年轻人。\n   6 | - **莉莉：杰克的好友，聪明勇敢，擅长解谜。\n   7 | - **老者摩根**：向杰克提供线索的神秘人物。\n   8 |   ## 章节安排\n   9 |   ### 第一章：出发前夜\n  10 | - 杰克在村里的生活\n  11 | - 杰克决定踏上旅程的原因\n  12 |   ### 第二章：第一个挑战\n  13 | - 杰克和莉莉遇到第一个谜题\n  14 | - 他们如何解决问题并继续前进\n  15 |   ### 第三章：摩根的试炼\n  16 | - 老者摩根提出的三个任务\n  17 | - 杰克和莉莉的智慧和勇气的考验\n  18 |   ### 结尾章节：宝藏之谜\n  19 | - 寻找宝藏的最后线索\n  20 | - 揭示宝藏的真相和故事的寓意\n  21 |   ## 写作技巧\n  22 | - 使用生动的描述来塑造角色和场景\n  23 | - 保持故事的节奏和悬念，吸引读者继续阅读\n  24 | - 在故事中加入意外转折，增加复杂性和深度", "fragment_lines": [5, 6], "fragment_content": ["- **杰克：故事的主角，一个充满好奇心的年轻人。", "- **莉莉：杰克的好友，聪明勇敢，擅长解谜。"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 小说写作结构：《冒险者之旅》\n\n## 故事简介\n\n这是一部关于勇气、友谊和成长的冒险故事，讲述了主角杰克从一个普通村庄出发，踏上寻找传说中的神秘宝藏的旅程。\n\n## 角色列表\n\n- **杰克：故事的主角，一个充满好奇心的年轻人。\n- **莉莉：杰克的好友，聪明勇敢，擅长解谜。\n- **老者摩根**：向杰克提供线索的神秘人物。\n  \n  ## 章节安排\n  \n  ### 第一章：出发前夜\n- 杰克在村里的生活\n- 杰克决定踏上旅程的原因\n  \n  ### 第二章：第一个挑战\n- 杰克和莉莉遇到第一个谜题\n- 他们如何解决问题并继续前进\n  \n  ### 第三章：摩根的试炼\n- 老者摩根提出的三个任务\n- 杰克和莉莉的智慧和勇气的考验\n  \n  ### 结尾章节：宝藏之谜\n- 寻找宝藏的最后线索\n- 揭示宝藏的真相和故事的寓意\n  \n  ## 写作技巧\n- 使用生动的描述来塑造角色和场景\n- 保持故事的节奏和悬念，吸引读者继续阅读\n- 在故事中加入意外转折，增加复杂性和深度\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/43", "category": "Special", "subtype": "markdown_title_error", "level": "easy", "example": "", "docstring": "Minutes from a project, capturing the meeting's objectives, key discussions, task, and next steps, with a focus on defining the project framework and assigning initial responsibilities", "canonical_solution": "# 项目启动会议日记\n\n## 会议详情\n\n- **日期:** 2023年10月10日\n- **时间:** 14:00 - 16:00\n- **地点:** 会议室 A\n- **参与人员:** 张三、李四、王五、赵六\n\n## 会议目标\n\n- 确定项目的基本框架和里程碑\n- 分配初步任务和责任\n- 讨论预期的挑战和解决策略\n\n## 会议纪要\n\n- **张三** 提出项目的技术路线，包括采用的技术栈及预期的技术难点。\n- **李四** 讨论了市场分析结果和目标客户群。\n- **王五** 概述了项目的财务预算和资金安排。\n- **赵六** 提出了项目管理工具和沟通流程的建议。\n\n## 任务分配\n\n- **张三** 负责技术开发和团队构建。\n- **李四** 负责市场推广和客户反馈收集。\n- **王五** 负责财务管理和资金调配。\n- **赵六** 负责项目日常管理和进度监控。\n\n## 下一步行动\n\n- 下周一（10月17日）提交初步设计方案。\n- 每周五进行项目进度会议和问题讨论。", "buggy_code": "\n#项目启动会议日记\n\n## 会议详情\n\n- **日期:** 2023年10月10日\n- **时间:** 14:00 - 16:00\n- **地点:** 会议室 A\n- **参与人员:** 张三、李四、王五、赵六\n\n## 会议目标\n\n- 确定项目的基本框架和里程碑\n- 分配初步任务和责任\n- 讨论预期的挑战和解决策略\n\n## 会议纪要\n\n- **张三** 提出项目的技术路线，包括采用的技术栈及预期的技术难点。\n- **李四** 讨论了市场分析结果和目标客户群。\n- **王五** 概述了项目的财务预算和资金安排。\n- **赵六** 提出了项目管理工具和沟通流程的建议。\n\n## 任务分配\n\n- **张三** 负责技术开发和团队构建。\n- **李四** 负责市场推广和客户反馈收集。\n- **王五** 负责财务管理和资金调配。\n- **赵六** 负责项目日常管理和进度监控。\n\n## 下一步行动\n\n- 下周一（10月17日）提交初步设计方案。\n- 每周五进行项目进度会议和问题讨论。", "bug_with_line_numbers": "1| #项目启动会议日记\n2| ## 会议详情\n3| - **日期:** 2023年10月10日\n4| - **时间:** 14:00 - 16:00\n5| - **地点:** 会议室 A\n6| - **参与人员:** 张三、李四、王五、赵六\n7| ## 会议目标\n8| - 确定项目的基本框架和里程碑\n9| - 分配初步任务和责任\n10| - 讨论预期的挑战和解决策略\n11| ## 会议纪要\n12| - **张三** 提出项目的技术路线，包括采用的技术栈及预期的技术难点。\n13| - **李四** 讨论了市场分析结果和目标客户群。\n14| - **王五** 概述了项目的财务预算和资金安排。\n15| - **赵六** 提出了项目管理工具和沟通流程的建议。\n16| ## 任务分配\n17| - **张三** 负责技术开发和团队构建。\n18| - **李四** 负责市场推广和客户反馈收集。\n19| - **王五** 负责财务管理和资金调配。\n20| - **赵六** 负责项目日常管理和进度监控。\n21| ## 下一步行动\n22| - 下周一（10月17日）提交初步设计方案。\n23| - 每周五进行项目进度会议和问题讨论。", "fragment_lines": [1], "fragment_content": ["#项目启动会议日记"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n#项目启动会议日记\n\n## 会议详情\n\n- **日期:** 2023年10月10日\n- **时间:** 14:00 - 16:00\n- **地点:** 会议室 A\n- **参与人员:** 张三、李四、王五、赵六\n\n## 会议目标\n\n- 确定项目的基本框架和里程碑\n- 分配初步任务和责任\n- 讨论预期的挑战和解决策略\n\n## 会议纪要\n\n- **张三** 提出项目的技术路线，包括采用的技术栈及预期的技术难点。\n- **李四** 讨论了市场分析结果和目标客户群。\n- **王五** 概述了项目的财务预算和资金安排。\n- **赵六** 提出了项目管理工具和沟通流程的建议。\n\n## 任务分配\n\n- **张三** 负责技术开发和团队构建。\n- **李四** 负责市场推广和客户反馈收集。\n- **王五** 负责财务管理和资金调配。\n- **赵六** 负责项目日常管理和进度监控。\n\n## 下一步行动\n\n- 下周一（10月17日）提交初步设计方案。\n- 每周五进行项目进度会议和问题讨论。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/44", "category": "Special", "subtype": "markdown_title_error", "level": "hard", "example": "", "docstring": "A personal health diary documenting diet, exercise, and sleep patterns for the month of October 2024, with reflections on dietary balance, exercise frequency, and sleep quality.", "canonical_solution": "# 健康日记：2024年10月\n\n## 介绍\n\n这是我的健康追踪日记，记录饮食、锻炼和睡眠情况，帮助我保持健康生活习惯。\n\n## 第一周\n\n### 饮食\n\n- **星期一**\n  - 早餐：燕麦粥，香蕉一根\n  - 午餐：鸡胸肉沙拉，全麦面包\n  - 晚餐：三文鱼，蒸青菜\n    \n    ### 锻炼\n- **星期三**\n  - 跑步：5公里\n  - 瑜伽：30分钟\n    \n    ### 睡眠\n- 平均睡眠时间：7小时\n  \n  ## 第二周\n  \n  ### 饮食\n- **星期二**\n  - 早餐：蛋白质奶昔，苹果一只\n  - 午餐：牛肉汉堡，薯条\n  - 晚餐：素食披萨\n    \n    ### 锻炼\n- **星期五**\n  - 游泳：30分钟\n  - 自行车：10公里\n    \n    ### 睡眠\n- 平均睡眠时间：6.5小时\n  \n  ## 月度总结\n- 这个月的饮食比较均衡，但周末的摄入量略高。\n- 锻炼频率保持良好，但需要增加力量训练。\n- 睡眠质量整体不错，但需改善周中的睡眠时间。", "buggy_code": "\n# 健康日记：2024年10月\n\n## 介绍\n\n这是我的健康追踪日记，记录饮食、锻炼和睡眠情况，帮助我保持健康生活习惯。\n\n##第一周\n\n### 饮食\n\n- **星期一**\n  \n  - 早餐：燕麦粥，香蕉一根\n  \n  - 午餐：鸡胸肉沙拉，全麦面包\n  \n  - 晚餐：三文鱼，蒸青菜\n    \n    ### 锻炼\n\n- **星期三**\n  \n  - 跑步：5公里\n  \n  - 瑜伽：30分钟\n    \n    ### 睡眠\n\n- 平均睡眠时间：7小时\n  \n  ## 第二周\n  \n  ### 饮食\n\n- **星期二**\n  \n  - 早餐：蛋白质奶昔，苹果一只\n  \n  - 午餐：牛肉汉堡，薯条\n  \n  - 晚餐：素食披萨\n    \n    ### 锻炼\n\n- **星期五**\n  \n  - 游泳：30分钟\n  \n  - 自行车：10公里\n    \n    ### 睡眠\n\n- 平均睡眠时间：6.5小时\n  \n  ## 月度总结\n\n- 这个月的饮食比较均衡，但周末的摄入量略高。\n\n- 锻炼频率保持良好，但需要增加力量训练。\n\n- 睡眠质量整体不错，但需改善周中的睡眠时间。", "bug_with_line_numbers": "1| # 健康日记：2024年10月\n2| ## 介绍\n3| 这是我的健康追踪日记，记录饮食、锻炼和睡眠情况，帮助我保持健康生活习惯。\n4| ##第一周\n5| ### 饮食\n6| - **星期一**\n7|   \n8|   - 早餐：燕麦粥，香蕉一根\n9|   \n10|   - 午餐：鸡胸肉沙拉，全麦面包\n11|   \n12|   - 晚餐：三文鱼，蒸青菜\n13|     \n14|     ### 锻炼\n15| - **星期三**\n16|   \n17|   - 跑步：5公里\n18|   \n19|   - 瑜伽：30分钟\n20|     \n21|     ### 睡眠\n22| - 平均睡眠时间：7小时\n23|   \n24|   ## 第二周\n25|   \n26|   ### 饮食\n27| - **星期二**\n28|   \n29|   - 早餐：蛋白质奶昔，苹果一只\n30|   \n31|   - 午餐：牛肉汉堡，薯条\n32|   \n33|   - 晚餐：素食披萨\n34|     \n35|     ### 锻炼\n36| - **星期五**\n37|   \n38|   - 游泳：30分钟\n39|   \n40|   - 自行车：10公里\n41|     \n42|     ### 睡眠\n43| - 平均睡眠时间：6.5小时\n44|   \n45|   ## 月度总结\n46| - 这个月的饮食比较均衡，但周末的摄入量略高。\n47| - 锻炼频率保持良好，但需要增加力量训练。\n48| - 睡眠质量整体不错，但需改善周中的睡眠时间。", "fragment_lines": [4], "fragment_content": ["##第一周"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 健康日记：2024年10月\n\n## 介绍\n\n这是我的健康追踪日记，记录饮食、锻炼和睡眠情况，帮助我保持健康生活习惯。\n\n##第一周\n\n### 饮食\n\n- **星期一**\n  \n  - 早餐：燕麦粥，香蕉一根\n  \n  - 午餐：鸡胸肉沙拉，全麦面包\n  \n  - 晚餐：三文鱼，蒸青菜\n    \n    ### 锻炼\n\n- **星期三**\n  \n  - 跑步：5公里\n  \n  - 瑜伽：30分钟\n    \n    ### 睡眠\n\n- 平均睡眠时间：7小时\n  \n  ## 第二周\n  \n  ### 饮食\n\n- **星期二**\n  \n  - 早餐：蛋白质奶昔，苹果一只\n  \n  - 午餐：牛肉汉堡，薯条\n  \n  - 晚餐：素食披萨\n    \n    ### 锻炼\n\n- **星期五**\n  \n  - 游泳：30分钟\n  \n  - 自行车：10公里\n    \n    ### 睡眠\n\n- 平均睡眠时间：6.5小时\n  \n  ## 月度总结\n\n- 这个月的饮食比较均衡，但周末的摄入量略高。\n\n- 锻炼频率保持良好，但需要增加力量训练。\n\n- 睡眠质量整体不错，但需改善周中的睡眠时间。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/45", "category": "Special", "subtype": "markdown_content_error", "level": "hard", "example": "", "docstring": "A review of the XYZ Smartwatch, highlighting its design, features, battery life, and value for money, making it a competitive health tracking device in the market.", "canonical_solution": "# 产品评测：XYZ智能手表\n\n## 产品概述\n\nXYZ智能手表是最新一代的健康追踪设备，具备心率监测、GPS追踪、睡眠监测等多种功能。\n\n## 设计和外观\n\n- **材质**：高级航空铝材，轻巧而耐用\n- **屏幕**：1.5英寸 AMOLED 显示屏，清晰度高\n- **舒适度**：橡胶表带，长时间佩戴也舒适\n  \n  ## 功能测试\n- **心率监测**：精确度高，与专业设备相比误差小于5%\n- **GPS追踪**：定位快速准确，运动轨迹记录完整\n- **睡眠监测**：提供深睡和浅睡数据，帮助改善睡眠质量\n  \n  ## 电池和续航\n- 满电状态下，连续使用可达48小时，待机时间长达10天。\n  \n  ## 价格和性价比\n- 市场售价：$299\n- 鉴于其多功能性和高性能，此价格具有竞争力。\n  \n  ## 总结\n  \n  XYZ智能手表是市场上性能出色的健康追踪设备，适合日常运动爱好者和健康意识强的用户。", "buggy_code": "\n\n\n# 产品评测：XYZ智能手表\n\n## 产品概述\n\nXYZ智能手表是最新一代的健康追踪设备，具备心率监测、GPS追踪、睡眠监测等多种功能。\n\n## 设计和外观\n\n- **屏幕**：高级航空铝材，轻巧而耐用\n\n- **材质**：1.5英寸 AMOLED 显示屏，清晰度高\n\n- **舒适度**：橡胶表带，长时间佩戴也舒适\n  \n  ## 功能测试\n\n- **心率监测**：精确度高，与专业设备相比误差小于5%\n\n- **GPS追踪**：定位快速准确，运动轨迹记录完整\n\n- **睡眠监测**：提供深睡和浅睡数据，帮助改善睡眠质量\n  \n  ## 电池和续航\n\n- 满电状态下，连续使用可达48小时，待机时间长达10天。\n  \n  ## 价格和性价比\n\n- 市场售价：$299\n\n- 鉴于其多功能性和高性能，此价格具有竞争力。\n  \n  ## 总结\n  \n  XYZ智能手表是市场上性能出色的健康追踪设备，适合日常运动爱好者和健康意识强的用户。", "bug_with_line_numbers": "1| # 产品评测：XYZ智能手表\n2| ## 产品概述\n3| XYZ智能手表是最新一代的健康追踪设备，具备心率监测、GPS追踪、睡眠监测等多种功能。\n4| ## 设计和外观\n5| - **屏幕**：高级航空铝材，轻巧而耐用\n6| - **材质**：1.5英寸 AMOLED 显示屏，清晰度高\n7| - **舒适度**：橡胶表带，长时间佩戴也舒适\n8|   \n9|   ## 功能测试\n10| - **心率监测**：精确度高，与专业设备相比误差小于5%\n11| - **GPS追踪**：定位快速准确，运动轨迹记录完整\n12| - **睡眠监测**：提供深睡和浅睡数据，帮助改善睡眠质量\n13|   \n14|   ## 电池和续航\n15| - 满电状态下，连续使用可达48小时，待机时间长达10天。\n16|   \n17|   ## 价格和性价比\n18| - 市场售价：$299\n19| - 鉴于其多功能性和高性能，此价格具有竞争力。\n20|   \n21|   ## 总结\n22|   \n23|   XYZ智能手表是市场上性能出色的健康追踪设备，适合日常运动爱好者和健康意识强的用户。", "fragment_lines": [5, 6], "fragment_content": ["- **屏幕**：高级航空铝材，轻巧而耐用", "- **材质**：1.5英寸 AMOLED 显示屏，清晰度高"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 产品评测：XYZ智能手表\n\n## 产品概述\n\nXYZ智能手表是最新一代的健康追踪设备，具备心率监测、GPS追踪、睡眠监测等多种功能。\n\n## 设计和外观\n\n- **屏幕**：高级航空铝材，轻巧而耐用\n\n- **材质**：1.5英寸 AMOLED 显示屏，清晰度高\n\n- **舒适度**：橡胶表带，长时间佩戴也舒适\n  \n  ## 功能测试\n\n- **心率监测**：精确度高，与专业设备相比误差小于5%\n\n- **GPS追踪**：定位快速准确，运动轨迹记录完整\n\n- **睡眠监测**：提供深睡和浅睡数据，帮助改善睡眠质量\n  \n  ## 电池和续航\n\n- 满电状态下，连续使用可达48小时，待机时间长达10天。\n  \n  ## 价格和性价比\n\n- 市场售价：$299\n\n- 鉴于其多功能性和高性能，此价格具有竞争力。\n  \n  ## 总结\n  \n  XYZ智能手表是市场上性能出色的健康追踪设备，适合日常运动爱好者和健康意识强的用户。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/46", "category": "Special", "subtype": "markdown_title_error", "level": "hard", "example": "", "docstring": "A feedback form for a technical conference held in October 2024, seeking attendees' opinions on venue, content satisfaction, speaker evaluations, and overall impressions, along with space for suggestions.", "canonical_solution": "# 2024年技术交流会议反馈表\n\n## 会议基本信息\n\n- **会议日期**：2024年10月15日\n- **会议地点**：上海国际会展中心\n- **参与人数**：约200人\n  \n  ## 反馈主题\n  \n  ### 地点选择\n- 会议地点交通便利性：\n  - [ ] 非常便利\n  - [ ] 便利\n  - [ ] 一般\n  - [ ] 不便利\n  - [ ] 非常不便利\n    \n    ### 内容满意度\n- 会议内容是否符合您的预期：\n  - [ ] 完全符合\n  - [ ] 基本符合\n  - [ ] 一般\n  - [ ] 不符合\n  - [ ] 完全不符合\n    \n    ### 演讲者评价\n- 演讲者表现如何：\n  - [ ] 非常满意\n  - [ ] 满意\n  - [ ] 一般\n  - [ ] 不满意\n  - [ ] 非常不满意\n    \n    ### 总体评价\n- 您对本次会议的整体评价：\n  - [ ] 非常满意\n  - [ ] 满意\n  - [ ] 一般\n  - [ ] 不满意\n  - [ ] 非常不满意\n    \n    ## 建议与意见\n    \n    请留下您宝贵的意见和建议，帮助我们改进未来的会议：\n- [请在此处填写]\n  \n  ## 联系方式\n- 如需进一步交流，请邮件联系我们：feedback@techconference.org", "buggy_code": "\n\n\n\n\n# 2024年技术交流会议反馈表\n\n## 会议基本信息\n\n- **会议日期**：2024年10月15日\n\n- **会议地点**：上海国际会展中心\n\n- **参与人数**：约200人\n  \n  ##反馈主题\n  \n  ### 地点选择\n\n- 会议地点交通便利性：\n  \n  - [x] 非常便利\n  \n  - [x] 便利\n  \n  - [x] 一般\n  \n  - [ ] 不便利\n  \n  - [ ] 非常不便利\n    \n    ### 内容满意度\n\n- 会议内容是否符合您的预期：\n  \n  - [ ] 完全符合\n  \n  - [ ] 基本符合\n  \n  - [ ] 一般\n  \n  - [ ] 不符合\n  \n  - [ ] 完全不符合\n    \n    ### 演讲者评价\n\n- 演讲者表现如何：\n  \n  - [ ] 非常满意\n  \n  - [ ] 满意\n  \n  - [ ] 一般\n  \n  - [ ] 不满意\n  \n  - [ ] 非常不满意\n    \n    ### 总体评价\n\n- 您对本次会议的整体评价：\n  \n  - [ ] 非常满意\n  \n  - [ ] 满意\n  \n  - [ ] 一般\n  \n  - [ ] 不满意\n  \n  - [ ] 非常不满意\n    \n    ## 建议与意见\n    \n    请留下您宝贵的意见和建议，帮助我们改进未来的会议：\n\n- [请在此处填写]\n  \n  ## 联系方式\n\n- 如需进一步交流，请邮件联系我们：feedback@techconference.org", "bug_with_line_numbers": "1| # 2024年技术交流会议反馈表\n2| ## 会议基本信息\n3| - **会议日期**：2024年10月15日\n4| - **会议地点**：上海国际会展中心\n5| - **参与人数**：约200人\n6|   \n7|   ##反馈主题\n8|   \n9|   ### 地点选择\n10| - 会议地点交通便利性：\n11|   \n12|   - [x] 非常便利\n13|   \n14|   - [x] 便利\n15|   \n16|   - [x] 一般\n17|   \n18|   - [ ] 不便利\n19|   \n20|   - [ ] 非常不便利\n21|     \n22|     ### 内容满意度\n23| - 会议内容是否符合您的预期：\n24|   \n25|   - [ ] 完全符合\n26|   \n27|   - [ ] 基本符合\n28|   \n29|   - [ ] 一般\n30|   \n31|   - [ ] 不符合\n32|   \n33|   - [ ] 完全不符合\n34|     \n35|     ### 演讲者评价\n36| - 演讲者表现如何：\n37|   \n38|   - [ ] 非常满意\n39|   \n40|   - [ ] 满意\n41|   \n42|   - [ ] 一般\n43|   \n44|   - [ ] 不满意\n45|   \n46|   - [ ] 非常不满意\n47|     \n48|     ### 总体评价\n49| - 您对本次会议的整体评价：\n50|   \n51|   - [ ] 非常满意\n52|   \n53|   - [ ] 满意\n54|   \n55|   - [ ] 一般\n56|   \n57|   - [ ] 不满意\n58|   \n59|   - [ ] 非常不满意\n60|     \n61|     ## 建议与意见\n62|     \n63|     请留下您宝贵的意见和建议，帮助我们改进未来的会议：\n64| - [请在此处填写]\n65|   \n66|   ## 联系方式\n67| - 如需进一步交流，请邮件联系我们：feedback@techconference.org", "fragment_lines": [7, 12, 14, 16], "fragment_content": ["##反馈主题", "- [x] 非常便利", "- [x] 便利", "- [x] 一般"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 2024年技术交流会议反馈表\n\n## 会议基本信息\n\n- **会议日期**：2024年10月15日\n\n- **会议地点**：上海国际会展中心\n\n- **参与人数**：约200人\n  \n  ##反馈主题\n  \n  ### 地点选择\n\n- 会议地点交通便利性：\n  \n  - [x] 非常便利\n  \n  - [x] 便利\n  \n  - [x] 一般\n  \n  - [ ] 不便利\n  \n  - [ ] 非常不便利\n    \n    ### 内容满意度\n\n- 会议内容是否符合您的预期：\n  \n  - [ ] 完全符合\n  \n  - [ ] 基本符合\n  \n  - [ ] 一般\n  \n  - [ ] 不符合\n  \n  - [ ] 完全不符合\n    \n    ### 演讲者评价\n\n- 演讲者表现如何：\n  \n  - [ ] 非常满意\n  \n  - [ ] 满意\n  \n  - [ ] 一般\n  \n  - [ ] 不满意\n  \n  - [ ] 非常不满意\n    \n    ### 总体评价\n\n- 您对本次会议的整体评价：\n  \n  - [ ] 非常满意\n  \n  - [ ] 满意\n  \n  - [ ] 一般\n  \n  - [ ] 不满意\n  \n  - [ ] 非常不满意\n    \n    ## 建议与意见\n    \n    请留下您宝贵的意见和建议，帮助我们改进未来的会议：\n\n- [请在此处填写]\n  \n  ## 联系方式\n\n- 如需进一步交流，请邮件联系我们：feedback@techconference.org\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/47", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "A curated list of books from various genres including fiction, non-fiction, technology, and personal development that the author read and recommends in 2024, along with brief reviews and purchase suggestions.", "canonical_solution": "# 年度销售策略会议日记\n\n## 会议详情\n\n- **日期:** 2023年10月12日\n- **时间:** 09:30 - 11:30\n- **地点:** 会议室 C\n- **参与人员:** 钱十一、李十二、陈十三、林十四\n\n## 会议目标\n\n- 评估上一年度销售业绩\n- 制定本年度销售目标和策略\n- 分配销售团队任务和目标\n\n## 会议纪要\n\n- **钱十一** 分析了上一年度的销售数据和市场趋势。\n- **李十二** 提出了本年度的销售目标和关键绩效指标（KPIs）。\n- **陈十三** 讨论了销售团队的激励机制和培训需求。\n- **林十四** 提出了新的销售渠道和合作机会。\n\n## 任务分配\n\n- **钱十一** 负责销售数据分析和市场趋势研究。\n- **李十二** 负责制定销售目标和KPIs。\n- **陈十三** 负责销售团队的激励和培训。\n- **林十四** 负责开发新的销售渠道和合作伙伴。\n\n## 下一步行动\n\n- 10月19日前提交详细的销售策略报告。\n- 10月26日前完成销售团队的激励和培训计划。\n- 定期评估新的销售渠道和合作机会的进展。", "buggy_code": "# 年度销售策略会议日记\n\n## 会议详情\n\n- **日期:** 2023年10月12日\n- **时间:** 09:30 - 11:30\n- **地点:** 会议室 C\n- **参与人员:** 钱十一、李十二、陈十三、林十四\n\n## 会议目标\n\n- 评估上一年度销售业绩\n- 制定本年度销售目标和策略\n- 分配销售团队任务和目标\n\n##任务分配\n\n- **钱十一** 分析了上一年度的销售数据和市场趋势。\n- **李十二** 提出了本年度的销售目标和关键绩效指标（KPIs）。\n- **陈十三** 讨论了销售团队的激励机制和培训需求。\n- **林十四** 提出了新的销售渠道和合作机会。\n\n##任务分配\n\n- **钱十一** 负责销售数据分析和市场趋势研究。\n- **李十二** 负责制定销售目标和KPIs。\n- **陈十三** 负责销售团队的激励和培训。\n- **林十四** 负责开发新的销售渠道和合作伙伴。\n\n## 下一步行动\n\n- 10月19日前提交详细的销售策略报告。\n- 10月26日前完成销售团队的激励和培训计划。\n- 定期评估新的销售渠道和合作机会的进展。", "bug_with_line_numbers": "   1 | # 年度销售策略会议日记\n   2 | ## 会议详情\n   3 | - **日期:** 2023年10月12日\n   4 | - **时间:** 09:30 - 11:30\n   5 | - **地点:** 会议室 C\n   6 | - **参与人员:** 钱十一、李十二、陈十三、林十四\n   7 | ## 会议目标\n   8 | - 评估上一年度销售业绩\n   9 | - 制定本年度销售目标和策略\n  10 | - 分配销售团队任务和目标\n  11 | ##任务分配\n  12 | - **钱十一** 分析了上一年度的销售数据和市场趋势。\n  13 | - **李十二** 提出了本年度的销售目标和关键绩效指标（KPIs）。\n  14 | - **陈十三** 讨论了销售团队的激励机制和培训需求。\n  15 | - **林十四** 提出了新的销售渠道和合作机会。\n  16 | ##任务分配\n  17 | - **钱十一** 负责销售数据分析和市场趋势研究。\n  18 | - **李十二** 负责制定销售目标和KPIs。\n  19 | - **陈十三** 负责销售团队的激励和培训。\n  20 | - **林十四** 负责开发新的销售渠道和合作伙伴。\n  21 | ## 下一步行动\n  22 | - 10月19日前提交详细的销售策略报告。\n  23 | - 10月26日前完成销售团队的激励和培训计划。\n  24 | - 定期评估新的销售渠道和合作机会的进展。", "fragment_lines": [11, 16], "fragment_content": ["##任务分配", "##任务分配"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 年度销售策略会议日记\n\n## 会议详情\n\n- **日期:** 2023年10月12日\n- **时间:** 09:30 - 11:30\n- **地点:** 会议室 C\n- **参与人员:** 钱十一、李十二、陈十三、林十四\n\n## 会议目标\n\n- 评估上一年度销售业绩\n- 制定本年度销售目标和策略\n- 分配销售团队任务和目标\n\n##任务分配\n\n- **钱十一** 分析了上一年度的销售数据和市场趋势。\n- **李十二** 提出了本年度的销售目标和关键绩效指标（KPIs）。\n- **陈十三** 讨论了销售团队的激励机制和培训需求。\n- **林十四** 提出了新的销售渠道和合作机会。\n\n##任务分配\n\n- **钱十一** 负责销售数据分析和市场趋势研究。\n- **李十二** 负责制定销售目标和KPIs。\n- **陈十三** 负责销售团队的激励和培训。\n- **林十四** 负责开发新的销售渠道和合作伙伴。\n\n## 下一步行动\n\n- 10月19日前提交详细的销售策略报告。\n- 10月26日前完成销售团队的激励和培训计划。\n- 定期评估新的销售渠道和合作机会的进展。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/48", "category": "Special", "subtype": "markdown_content_error", "level": "hard", "example": "", "docstring": "A curated list of books from various genres including fiction, non-fiction, technology, and personal development that the author read and recommends in 2024, along with brief reviews and purchase suggestions.", "canonical_solution": "# 2024年书籍推荐列表\n\n## 简介\n\n这是我在2024年读过并推荐的书籍列表，涵盖了小说、非小说、科技和个人发展等多个类别。\n\n## 小说类\n\n- **《迷失的一角》**\n  - **作者**：村上春树\n  - **简评**：一部关于孤独和寻找自我的深刻小说。\n- **《夜晚的潜水艇》**\n  - **作者**：保罗·科赫洛\n  - **简评**：探索人生意义和目标的奇妙旅程。\n    \n    ## 非小说类\n- **《创新者》**\n  - **作者**：沃尔特·艾萨克森\n  - **简评**：详细描绘了从爱迪生到乔布斯的一系列创新者如何改变世界。\n- **《数据洞察》**\n  - **作者**：纳特·西尔弗\n  - **简评**：提供了利用数据进行决策和预测的实用指南。\n    \n    ## 科技类\n- **《量子生命》**\n  - **作者**：吉姆·巴格特\n  - **简评**：探讨量子物理如何解释生命的基本现象。\n    \n    ## 个人发展\n- **《原则》**\n  - **作者**：瑞·达利欧\n  - **简评**：分享了作者在商业和生活中的成功原则。\n    \n    ## 如何购买\n    \n    这些书籍在大多数在线书店都能找到，包括亚马逊和当地书店。", "buggy_code": "\n\n\n\n# 2024年书籍推荐列表\n\n## 简介\n\n这是我在2024年读过并推荐的书籍列表，涵盖了小说、非小说、科技和个人发展等多个类别。\n\n## 小说类\n\n- **《迷失的一角》**\n  \n  - **作者**：村上春树\n  - **简评**：一部关于孤独和寻找自我的深刻小说。\n\n- **《夜晚的潜水艇》**\n  \n  - **作者**：沃尔特·艾萨克森\n  \n  - **简评**：探索人生意义和目标的奇妙旅程。\n    \n    ## 非小说类\n\n- **《创新者》**\n  \n  - **作者**：沃尔特·艾萨克森\n  - **简评**：详细描绘了从爱迪生到乔布斯的一系列创新者如何改变世界。\n\n- **《数据洞察》**\n  \n  - **作者**：纳特·西尔弗\n  \n  - **简评**：提供了利用数据进行决策和预测的实用指南。\n    \n    ## 科技类\n\n- **《量子生命》**\n  \n  - **作者**：吉姆·巴格特\n  \n  - **简评**：探讨量子物理如何解释生命的基本现象。\n    \n    ## 个人发展\n\n- **《原则》**\n  \n  - **作者**：瑞·达利欧\n  \n  - **简评**：分享了作者在商业和生活中的成功原则。\n    \n    ## 如何购买\n    \n    这些书籍在大多数在线书店都能找到，包括亚马逊和当地书店。", "bug_with_line_numbers": "1| # 2024年书籍推荐列表\n2| ## 简介\n3| 这是我在2024年读过并推荐的书籍列表，涵盖了小说、非小说、科技和个人发展等多个类别。\n4| ## 小说类\n5| - **《迷失的一角》**\n6|   \n7|   - **作者**：村上春树\n8|   - **简评**：一部关于孤独和寻找自我的深刻小说。\n9| - **《夜晚的潜水艇》**\n10|   \n11|   - **作者**：沃尔特·艾萨克森\n12|   \n13|   - **简评**：探索人生意义和目标的奇妙旅程。\n14|     \n15|     ## 非小说类\n16| - **《创新者》**\n17|   \n18|   - **作者**：沃尔特·艾萨克森\n19|   - **简评**：详细描绘了从爱迪生到乔布斯的一系列创新者如何改变世界。\n20| - **《数据洞察》**\n21|   \n22|   - **作者**：纳特·西尔弗\n23|   \n24|   - **简评**：提供了利用数据进行决策和预测的实用指南。\n25|     \n26|     ## 科技类\n27| - **《量子生命》**\n28|   \n29|   - **作者**：吉姆·巴格特\n30|   \n31|   - **简评**：探讨量子物理如何解释生命的基本现象。\n32|     \n33|     ## 个人发展\n34| - **《原则》**\n35|   \n36|   - **作者**：瑞·达利欧\n37|   \n38|   - **简评**：分享了作者在商业和生活中的成功原则。\n39|     \n40|     ## 如何购买\n41|     \n42|     这些书籍在大多数在线书店都能找到，包括亚马逊和当地书店。", "fragment_lines": [11], "fragment_content": ["- **作者**：沃尔特·艾萨克森"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 2024年书籍推荐列表\n\n## 简介\n\n这是我在2024年读过并推荐的书籍列表，涵盖了小说、非小说、科技和个人发展等多个类别。\n\n## 小说类\n\n- **《迷失的一角》**\n  \n  - **作者**：村上春树\n  - **简评**：一部关于孤独和寻找自我的深刻小说。\n\n- **《夜晚的潜水艇》**\n  \n  - **作者**：沃尔特·艾萨克森\n  \n  - **简评**：探索人生意义和目标的奇妙旅程。\n    \n    ## 非小说类\n\n- **《创新者》**\n  \n  - **作者**：沃尔特·艾萨克森\n  - **简评**：详细描绘了从爱迪生到乔布斯的一系列创新者如何改变世界。\n\n- **《数据洞察》**\n  \n  - **作者**：纳特·西尔弗\n  \n  - **简评**：提供了利用数据进行决策和预测的实用指南。\n    \n    ## 科技类\n\n- **《量子生命》**\n  \n  - **作者**：吉姆·巴格特\n  \n  - **简评**：探讨量子物理如何解释生命的基本现象。\n    \n    ## 个人发展\n\n- **《原则》**\n  \n  - **作者**：瑞·达利欧\n  \n  - **简评**：分享了作者在商业和生活中的成功原则。\n    \n    ## 如何购买\n    \n    这些书籍在大多数在线书店都能找到，包括亚马逊和当地书店。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/49", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "An overview of the 2024 Global Music Festival, detailing the schedule, venues, headliners, and ticket information for events in major cities like Los Angeles, London, and Tokyo.", "canonical_solution": "# 2024年全球音乐节日程\n\n## 概览\n\n全球音乐节将在多个国家的主要城市举行，展示多样化的音乐风格和国际艺术家。\n\n## 日程表\n\n### 美国·洛杉矶\n\n- **日期**：2024年6月5日至6月7日\n- **地点**：洛杉矶公园\n- **头牌艺人**：\n  - 阿黛尔\n  - 马龙五\n    \n    ### 英国·伦敦\n- **日期**：2024年7月12日至7月14日\n- **地点**：海德公园\n- **头牌艺人**：\n  - 冷播\n  - 艾米·怀恩豪斯\n    \n    ### 日本·东京\n- **日期**：2024年8月20日至8月22日\n- **地点**：新宿公园\n- **头牌艺人**：\n  - 宇多田光\n  - 一青窈\n    \n    ## 门票信息\n- 门票可通过官方网站 [GlobalMusicFest2024.com](http://globalmusicfest2024.com) 购买。\n  \n  ## 注意事项\n- 记得携带个人身份证件和电子门票。\n- 会场内禁止携带外部食物和饮料。", "buggy_code": "\n\n#2024年全球音乐节日程\n\n## 概览\n\n全球音乐节将在多个国家的主要城市举行，展示多样化的音乐风格和国际艺术家。\n\n## 日程表\n\n### 美国·洛杉矶\n\n- **日期**：2024年6月5日至6月7日\n\n- **地点**：洛杉矶公园\n\n- **头牌艺人**：\n  \n  - 阿黛尔\n  \n  - 马龙五\n    \n    ### 英国·伦敦\n\n- **日期**：2024年7月14日至7月12日\n\n- **地点**：海德公园\n\n- **头牌艺人**：\n  \n  - 冷播\n  \n  - 艾米·怀恩豪斯\n    \n    ### 日本·东京\n\n- **日期**：2024年8月20日至8月22日\n\n- **地点**：新宿公园\n\n- **头牌艺人**：\n  \n  - 宇多田光\n  \n  - 一青窈\n    \n    ## 门票信息\n\n- 门票可通过官方网站 GlobalMusicFest2024.com](http://globalmusicfest2024.com) 购买。\n  \n  ## 注意事项\n\n- 记得携带个人身份证件和电子门票。\n\n- 会场内禁止携带外部食物和饮料。", "bug_with_line_numbers": "1| #2024年全球音乐节日程\n2| ## 概览\n3| 全球音乐节将在多个国家的主要城市举行，展示多样化的音乐风格和国际艺术家。\n4| ## 日程表\n5| ### 美国·洛杉矶\n6| - **日期**：2024年6月5日至6月7日\n7| - **地点**：洛杉矶公园\n8| - **头牌艺人**：\n9|   \n10|   - 阿黛尔\n11|   \n12|   - 马龙五\n13|     \n14|     ### 英国·伦敦\n15| - **日期**：2024年7月14日至7月12日\n16| - **地点**：海德公园\n17| - **头牌艺人**：\n18|   \n19|   - 冷播\n20|   \n21|   - 艾米·怀恩豪斯\n22|     \n23|     ### 日本·东京\n24| - **日期**：2024年8月20日至8月22日\n25| - **地点**：新宿公园\n26| - **头牌艺人**：\n27|   \n28|   - 宇多田光\n29|   \n30|   - 一青窈\n31|     \n32|     ## 门票信息\n33| - 门票可通过官方网站 GlobalMusicFest2024.com](http://globalmusicfest2024.com) 购买。\n34|   \n35|   ## 注意事项\n36| - 记得携带个人身份证件和电子门票。\n37| - 会场内禁止携带外部食物和饮料。", "fragment_lines": [1, 15, 33], "fragment_content": ["#2024年全球音乐节日程", "- **日期**：2024年7月14日至7月12日", "- 门票可通过官方网站 GlobalMusicFest2024.com](http://globalmusicfest2024.com) 购买。"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n#2024年全球音乐节日程\n\n## 概览\n\n全球音乐节将在多个国家的主要城市举行，展示多样化的音乐风格和国际艺术家。\n\n## 日程表\n\n### 美国·洛杉矶\n\n- **日期**：2024年6月5日至6月7日\n\n- **地点**：洛杉矶公园\n\n- **头牌艺人**：\n  \n  - 阿黛尔\n  \n  - 马龙五\n    \n    ### 英国·伦敦\n\n- **日期**：2024年7月14日至7月12日\n\n- **地点**：海德公园\n\n- **头牌艺人**：\n  \n  - 冷播\n  \n  - 艾米·怀恩豪斯\n    \n    ### 日本·东京\n\n- **日期**：2024年8月20日至8月22日\n\n- **地点**：新宿公园\n\n- **头牌艺人**：\n  \n  - 宇多田光\n  \n  - 一青窈\n    \n    ## 门票信息\n\n- 门票可通过官方网站 GlobalMusicFest2024.com](http://globalmusicfest2024.com) 购买。\n  \n  ## 注意事项\n\n- 记得携带个人身份证件和电子门票。\n\n- 会场内禁止携带外部食物和饮料。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/50", "category": "Multiple", "subtype": "triple_bug", "level": "hard", "example": "", "docstring": "A research proposal outlining a project to explore the application of artificial intelligence in medical diagnostics, focusing on imaging analysis, disease prediction, and the potential outcomes and funding required.", "canonical_solution": "# 研究项目提案：人工智能在医疗诊断中的应用\n\n## 项目概述\n\n本研究项目旨在探索和开发人工智能技术在医疗诊断中的应用，特别是在影像诊断和疾病预测领域。\n\n## 研究背景\n\n随着数据科技的进步，AI在医疗领域的潜力日益显现，尤其是在提高诊断准确性和效率方面。\n\n## 研究目标\n\n- 开发能够自动分析医学影像的AI模型。\n\n- 验证AI模型在实际医疗环境中的效果和准确性。\n\n- 探索AI在预测遗传疾病和慢性疾病方面的潜能。\n  \n  ## 预期成果\n\n- 提升医疗影像诊断的速度和准确性。\n\n- 减少误诊和漏诊的情况。\n\n- 提高医生诊断效率，优化医疗资源分配。\n  \n  ## 申请资金\n\n- 总预算：$500,000\n\n- 资金将用于研究人员的工资、设备购置和测试材料。\n  \n  ## 项目团队\n\n- **项目主管**：张华博士\n\n- **研究助理**：李明、王丽\n  \n  ## 联系信息\n\n- **联系人**：张华博士\n\n- **邮箱**：zhhuang@example.edu", "buggy_code": "\n#研究项目提案：人工智能在医疗诊断中的应用\n\n## 项目概述\n\n本研究项目旨在探索和开发人工智能技术在医疗诊断中的应用，特别是在影像诊断和疾病预测领域。\n\n## 研究背景\n\n随着数据科技的进步，AI在医疗领域的潜力日益显现，尤其是在提高诊断准确性和效率方面。\n\n## 研究目标\n\n- 开发能够自动分析医学影像的AI模型。\n\n- 验证AI模型在实际医疗环境中的效果和准确性。\n\n- 探索AI在预测遗传疾病和慢性疾病方面的潜能。\n  \n  ## 预期成果\n\n- 提升医疗影像诊断的速度和准确性。\n\n- 减少误诊和漏诊的情况。\n\n- 提高医生诊断效率，优化医疗资源分配。\n  \n  ## 研究团队\n\n- 总预算：$500,000\n\n- 资金将用于研究人员的工资、设备购置和测试材料。\n  \n  ## 申请资金\n\n- **项目主管**：张华博士\n\n- **研究助理**：李明、王丽\n  \n  ## 联系信息\n\n- **联系人**：张华博士\n\n- **邮箱**：zhhuang@example.edu", "bug_with_line_numbers": "1| #研究项目提案：人工智能在医疗诊断中的应用\n2| ## 项目概述\n3| 本研究项目旨在探索和开发人工智能技术在医疗诊断中的应用，特别是在影像诊断和疾病预测领域。\n4| ## 研究背景\n5| 随着数据科技的进步，AI在医疗领域的潜力日益显现，尤其是在提高诊断准确性和效率方面。\n6| ## 研究目标\n7| - 开发能够自动分析医学影像的AI模型。\n8| - 验证AI模型在实际医疗环境中的效果和准确性。\n9| - 探索AI在预测遗传疾病和慢性疾病方面的潜能。\n10|   \n11|   ## 预期成果\n12| - 提升医疗影像诊断的速度和准确性。\n13| - 减少误诊和漏诊的情况。\n14| - 提高医生诊断效率，优化医疗资源分配。\n15|   \n16|   ## 研究团队\n17| - 总预算：$500,000\n18| - 资金将用于研究人员的工资、设备购置和测试材料。\n19|   \n20|   ## 申请资金\n21| - **项目主管**：张华博士\n22| - **研究助理**：李明、王丽\n23|   \n24|   ## 联系信息\n25| - **联系人**：张华博士\n26| - **邮箱**：zhhuang@example.edu", "fragment_lines": [1, 16, 20], "fragment_content": ["#研究项目提案：人工智能在医疗诊断中的应用", "## 研究团队", "## 申请资金"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n#研究项目提案：人工智能在医疗诊断中的应用\n\n## 项目概述\n\n本研究项目旨在探索和开发人工智能技术在医疗诊断中的应用，特别是在影像诊断和疾病预测领域。\n\n## 研究背景\n\n随着数据科技的进步，AI在医疗领域的潜力日益显现，尤其是在提高诊断准确性和效率方面。\n\n## 研究目标\n\n- 开发能够自动分析医学影像的AI模型。\n\n- 验证AI模型在实际医疗环境中的效果和准确性。\n\n- 探索AI在预测遗传疾病和慢性疾病方面的潜能。\n  \n  ## 预期成果\n\n- 提升医疗影像诊断的速度和准确性。\n\n- 减少误诊和漏诊的情况。\n\n- 提高医生诊断效率，优化医疗资源分配。\n  \n  ## 研究团队\n\n- 总预算：$500,000\n\n- 资金将用于研究人员的工资、设备购置和测试材料。\n  \n  ## 申请资金\n\n- **项目主管**：张华博士\n\n- **研究助理**：李明、王丽\n  \n  ## 联系信息\n\n- **联系人**：张华博士\n\n- **邮箱**：zhhuang@example.edu\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/51", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "Information about the 10th International Conference on AI and Big Data, including the conference agenda, topics to be covered, registration details, and contact information.", "canonical_solution": "# 第十届国际人工智能与大数据会议\n\n## 会议概述\n\n本次会议旨在聚焦人工智能与大数据的最新研究进展和行业应用，汇聚全球专家学者和行业领袖共同探讨未来技术趋势。\n\n## 会议日期与地点\n\n- **日期**: 2024年9月15日至9月17日\n\n- **地点**: 波士顿会议展览中心\n  \n  ## 详细议程\n  \n  ### 第一天：基础研究\n\n- **09:00 - 09:30** 注册与签到\n\n- **09:30 - 10:30** 主旨演讲：AI在未来社会的角色\n\n- **11:00 - 12:30** 分论坛：机器学习的新算法\n\n- **14:00 - 15:30** 圆桌讨论：数据隐私与安全\n\n- **16:00 - 17:30** 海报展示：学生与博士后研究项目\n  \n  ### 第二天：行业应用\n\n- **09:00 - 10:00** 演讲：大数据在金融领域的创新应用\n\n- **10:30 - 12:00** 研讨会：AI在健康医疗的突破\n\n- **13:30 - 15:00** 案例分析：AI技术在零售业的实践\n\n- **15:30 - 17:00** 网络交流会：与行业专家面对面\n  \n  ### 第三天：技术前沿\n\n- **09:00 - 10:30** 讨论小组：增强现实与AI的融合\n\n- **11:00 - 12:30** 演讲：量子计算对大数据的影响\n\n- **14:00 - 15:30** 闭幕演讲：AI的伦理与未来\n  \n  ## 注册方式\n  \n  请访问会议官方网站 [AIConference2024.com](http://aiconference2024.com) 完成在线注册。\n  \n  ## 联系信息\n\n- **组织委员会邮箱**: contact@aiconference2024.com\n\n- **电话**: +1 234 567 8900", "buggy_code": "\n# 第十届国际人工智能与大数据会议\n\n## 会议概述\n\n本次会议旨在聚焦人工智能与大数据的最新研究进展和行业应用，汇聚全球专家学者和行业领袖共同探讨未来技术趋势。\n\n## 会议日期与地点\n\n- **日期: 2024年9月15日至9月17日\n\n- **地点**: 波士顿会议展览中心\n  \n  ## 详细议程\n  \n  ### 第一天：基础研究\n\n- **09:00 - 09:30** 注册与签到\n\n- **09:30 - 10:30** 主旨演讲：AI在未来社会的角色\n\n- **11:00 - 12:30** 分论坛：机器学习的新算法\n\n- **14:00 - 15:30** 圆桌讨论：数据隐私与安全\n\n- **16:00 - 17:30** 海报展示：学生与博士后研究项目\n  \n  ### 第二天：行业应用\n\n- **09:00 - 10:00** 演讲：大数据在金融领域的创新应用\n\n- **10:30 - 12:00** 研讨会：AI在健康医疗的突破\n\n- **13:30 - 15:00** 案例分析：AI技术在零售业的实践\n\n- **15:30 - 17:00** 网络交流会：与行业专家面对面\n  \n  ### 第三天：技术前沿\n\n- **09:00 - 10:30** 讨论小组：增强现实与AI的融合\n\n- **11:00 - 12:30** 演讲：量子计算对大数据的影响\n\n- **14:00 - 15:30** 闭幕演讲：AI的伦理与未来\n  \n  ## 注册方式\n  \n  请访问会议官方网站 [AIConference2024.com）(http://aiconference2024.com) 完成在线注册。\n  \n  ## 联系信息\n\n- **组织委员会邮箱**: contact@aiconference2024.com\n\n- **电话**: +1 234 567 8900", "bug_with_line_numbers": "1| # 第十届国际人工智能与大数据会议\n2| ## 会议概述\n3| 本次会议旨在聚焦人工智能与大数据的最新研究进展和行业应用，汇聚全球专家学者和行业领袖共同探讨未来技术趋势。\n4| ## 会议日期与地点\n5| - **日期: 2024年9月15日至9月17日\n6| - **地点**: 波士顿会议展览中心\n7|   \n8|   ## 详细议程\n9|   \n10|   ### 第一天：基础研究\n11| - **09:00 - 09:30** 注册与签到\n12| - **09:30 - 10:30** 主旨演讲：AI在未来社会的角色\n13| - **11:00 - 12:30** 分论坛：机器学习的新算法\n14| - **14:00 - 15:30** 圆桌讨论：数据隐私与安全\n15| - **16:00 - 17:30** 海报展示：学生与博士后研究项目\n16|   \n17|   ### 第二天：行业应用\n18| - **09:00 - 10:00** 演讲：大数据在金融领域的创新应用\n19| - **10:30 - 12:00** 研讨会：AI在健康医疗的突破\n20| - **13:30 - 15:00** 案例分析：AI技术在零售业的实践\n21| - **15:30 - 17:00** 网络交流会：与行业专家面对面\n22|   \n23|   ### 第三天：技术前沿\n24| - **09:00 - 10:30** 讨论小组：增强现实与AI的融合\n25| - **11:00 - 12:30** 演讲：量子计算对大数据的影响\n26| - **14:00 - 15:30** 闭幕演讲：AI的伦理与未来\n27|   \n28|   ## 注册方式\n29|   \n30|   请访问会议官方网站 [AIConference2024.com）(http://aiconference2024.com) 完成在线注册。\n31|   \n32|   ## 联系信息\n33| - **组织委员会邮箱**: contact@aiconference2024.com\n34| - **电话**: +1 234 567 8900", "fragment_lines": [5, 30], "fragment_content": ["- **日期: 2024年9月15日至9月17日", "请访问会议官方网站 [AIConference2024.com）(http://aiconference2024.com) 完成在线注册。"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 第十届国际人工智能与大数据会议\n\n## 会议概述\n\n本次会议旨在聚焦人工智能与大数据的最新研究进展和行业应用，汇聚全球专家学者和行业领袖共同探讨未来技术趋势。\n\n## 会议日期与地点\n\n- **日期: 2024年9月15日至9月17日\n\n- **地点**: 波士顿会议展览中心\n  \n  ## 详细议程\n  \n  ### 第一天：基础研究\n\n- **09:00 - 09:30** 注册与签到\n\n- **09:30 - 10:30** 主旨演讲：AI在未来社会的角色\n\n- **11:00 - 12:30** 分论坛：机器学习的新算法\n\n- **14:00 - 15:30** 圆桌讨论：数据隐私与安全\n\n- **16:00 - 17:30** 海报展示：学生与博士后研究项目\n  \n  ### 第二天：行业应用\n\n- **09:00 - 10:00** 演讲：大数据在金融领域的创新应用\n\n- **10:30 - 12:00** 研讨会：AI在健康医疗的突破\n\n- **13:30 - 15:00** 案例分析：AI技术在零售业的实践\n\n- **15:30 - 17:00** 网络交流会：与行业专家面对面\n  \n  ### 第三天：技术前沿\n\n- **09:00 - 10:30** 讨论小组：增强现实与AI的融合\n\n- **11:00 - 12:30** 演讲：量子计算对大数据的影响\n\n- **14:00 - 15:30** 闭幕演讲：AI的伦理与未来\n  \n  ## 注册方式\n  \n  请访问会议官方网站 [AIConference2024.com）(http://aiconference2024.com) 完成在线注册。\n  \n  ## 联系信息\n\n- **组织委员会邮箱**: contact@aiconference2024.com\n\n- **电话**: +1 234 567 8900\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/52", "category": "Special", "subtype": "markdown_content_error", "level": "hard", "example": "", "docstring": "A fitness challenge designed to improve overall physical fitness, muscle strength, and endurance over 30 days with a daily workout plan, tips, and encouragement to join a social media group for support.", "canonical_solution": "# 30天全身健身挑战\n\n## 挑战目标\n\n通过连续30天的锻炼计划，提高整体体能，增强肌肉力量和耐力。\n\n## 每日锻炼安排\n\n### 第1天\n\n- 俯卧撑：20次\n- 深蹲：20次\n- 仰卧起坐：20次\n  \n  ### 第2天\n- 墙壁靠坐：50秒\n- 卷腹：20次\n- 跳绳：100次\n  \n  ### 第3天\n- 休息日\n  \n  ### 第4至第30天\n- 按上述模式循环，逐渐增加每项运动的次数和强度。\n  \n  ## 注意事项\n- 每次锻炼前应进行至少5分钟的热身，锻炼后进行适当的拉伸。\n- 保持适当的水分补充。\n- 如感到不适应立即停止锻炼，并咨询医生。\n  \n  ## 鼓励与支持\n  \n  加入我们的社交媒体群组，与其他参与者一起分享进展和经验。搜索“30天健身挑战”加入！", "buggy_code": "\n# 30天全身健身挑战\n\n## 挑战目标\n\n通过连续30天的锻炼计划，提高整体体能，增强肌肉力量和耐力。\n\n## 每日锻炼安排\n\n### 第3天\n\n- 俯卧撑：20次\n\n- 深蹲：20次\n\n- 仰卧起坐：20次\n  \n  ### 第3天\n\n- 墙壁靠坐：50秒\n\n- 卷腹：20次\n\n- 跳绳：100次\n  \n  ### 第3天\n\n- 休息日\n  \n  ### 第4至第30天\n\n- 按上述模式循环，逐渐增加每项运动的次数和强度。\n  \n  ## 注意事项\n\n- 每次锻炼前应进行至少5分钟的热身，锻炼后进行适当的拉伸。\n\n- 保持适当的水分补充。\n\n- 如感到不适应立即停止锻炼，并咨询医生。\n  \n  ## 鼓励与支持\n  \n  加入我们的社交媒体群组，与其他参与者一起分享进展和经验。搜索“30天健身挑战”加入！", "bug_with_line_numbers": "1| # 30天全身健身挑战\n2| ## 挑战目标\n3| 通过连续30天的锻炼计划，提高整体体能，增强肌肉力量和耐力。\n4| ## 每日锻炼安排\n5| ### 第3天\n6| - 俯卧撑：20次\n7| - 深蹲：20次\n8| - 仰卧起坐：20次\n9|   \n10|   ### 第3天\n11| - 墙壁靠坐：50秒\n12| - 卷腹：20次\n13| - 跳绳：100次\n14|   \n15|   ### 第3天\n16| - 休息日\n17|   \n18|   ### 第4至第30天\n19| - 按上述模式循环，逐渐增加每项运动的次数和强度。\n20|   \n21|   ## 注意事项\n22| - 每次锻炼前应进行至少5分钟的热身，锻炼后进行适当的拉伸。\n23| - 保持适当的水分补充。\n24| - 如感到不适应立即停止锻炼，并咨询医生。\n25|   \n26|   ## 鼓励与支持\n27|   \n28|   加入我们的社交媒体群组，与其他参与者一起分享进展和经验。搜索“30天健身挑战”加入！", "fragment_lines": [5, 10], "fragment_content": ["### 第3天", "### 第3天"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 30天全身健身挑战\n\n## 挑战目标\n\n通过连续30天的锻炼计划，提高整体体能，增强肌肉力量和耐力。\n\n## 每日锻炼安排\n\n### 第3天\n\n- 俯卧撑：20次\n\n- 深蹲：20次\n\n- 仰卧起坐：20次\n  \n  ### 第3天\n\n- 墙壁靠坐：50秒\n\n- 卷腹：20次\n\n- 跳绳：100次\n  \n  ### 第3天\n\n- 休息日\n  \n  ### 第4至第30天\n\n- 按上述模式循环，逐渐增加每项运动的次数和强度。\n  \n  ## 注意事项\n\n- 每次锻炼前应进行至少5分钟的热身，锻炼后进行适当的拉伸。\n\n- 保持适当的水分补充。\n\n- 如感到不适应立即停止锻炼，并咨询医生。\n  \n  ## 鼓励与支持\n  \n  加入我们的社交媒体群组，与其他参与者一起分享进展和经验。搜索“30天健身挑战”加入！\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/53", "category": "Multiple", "subtype": "double_bug", "level": "medium", "example": "", "docstring": "A summary of the weekly podcast episodes covering the latest technology trends, breakthroughs, and their societal impact, with topics ranging from smart homes to quantum computing.", "canonical_solution": "# 科技前沿：周播客节目概要\n\n## 节目介绍\n\n每周深入探讨科技行业的最新动态、突破性技术及其对社会的影响。\n\n## 本月节目单\n\n### 第一周：智能家居的未来\n\n- 探讨智能家居技术的最新发展\n- 访谈：来自Google和Amazon的智能设备设计师\n  \n  ### 第二周：区块链技术的新应用\n- 深入区块链在非金融领域的创新用途\n- 客座讲者：区块链创业公司CEO\n  \n  ### 第三周：人工智能的伦理问题\n- 分析AI发展中的主要伦理挑战和政策响应\n- 圆桌讨论：AI伦理学家和行业专家\n  \n  ### 第四周：量子计算的突破\n- 介绍量子计算机的最新进展及其潜在影响\n- 采访：领先的量子技术研究员\n  \n  ## 收听方式\n- Spotify\n- Apple Podcasts\n- Google Podcasts\n- 官网直播\n  \n  ## 加入讨论\n  \n  我们鼓励听众通过社交媒体使用 #TechFrontiers 来分享观点和提问。", "buggy_code": "# 科技前沿：周播客节目概要\n## 节目介绍\n每周深入探讨科技行业的最新动态、突破性技术及其对社会的影响。\n##本月节目单\n### 第一周：智能家居的未来\n- 探讨智能家居技术的最新发展\n- 访谈：来自Google和Amazon的智能设备设计师\n### 第二周：区块链技术的新应用\n- 深入区块链在非金融领域的创新用途\n- 客座讲者：区块链创业公司CEO\n### 第三周：人工智能的伦理问题\n- 分析AI发展中的主要伦理挑战和政策响应\n- 圆桌讨论：AI伦理学家和行业专家\n### 第四周：量子计算的突破\n- 介绍量子计算机的最新进展及其潜在影响\n- 采访：领先的量子技术研究员\n## 收听方式\n- Spotify\nApple Podcasts\n- Google Podcasts\n- 官网直播\n## 加入讨论\n我们鼓励听众通过社交媒体使用 #TechFrontiers 来分享观点和提问。", "bug_with_line_numbers": "   1 | # 科技前沿：周播客节目概要\n   2 | ## 节目介绍\n   3 | 每周深入探讨科技行业的最新动态、突破性技术及其对社会的影响。\n   4 | ##本月节目单\n   5 | ### 第一周：智能家居的未来\n   6 | - 探讨智能家居技术的最新发展\n   7 | - 访谈：来自Google和Amazon的智能设备设计师\n   8 | ### 第二周：区块链技术的新应用\n   9 | - 深入区块链在非金融领域的创新用途\n  10 | - 客座讲者：区块链创业公司CEO\n  11 | ### 第三周：人工智能的伦理问题\n  12 | - 分析AI发展中的主要伦理挑战和政策响应\n  13 | - 圆桌讨论：AI伦理学家和行业专家\n  14 | ### 第四周：量子计算的突破\n  15 | - 介绍量子计算机的最新进展及其潜在影响\n  16 | - 采访：领先的量子技术研究员\n  17 | ## 收听方式\n  18 | - Spotify\n  19 | Apple Podcasts\n  20 | - Google Podcasts\n  21 | - 官网直播\n  22 | ## 加入讨论\n  23 | 我们鼓励听众通过社交媒体使用 #TechFrontiers 来分享观点和提问。", "fragment_lines": [4, 19], "fragment_content": ["##本月节目单", "Apple Podcasts"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 科技前沿：周播客节目概要\n## 节目介绍\n每周深入探讨科技行业的最新动态、突破性技术及其对社会的影响。\n##本月节目单\n### 第一周：智能家居的未来\n- 探讨智能家居技术的最新发展\n- 访谈：来自Google和Amazon的智能设备设计师\n### 第二周：区块链技术的新应用\n- 深入区块链在非金融领域的创新用途\n- 客座讲者：区块链创业公司CEO\n### 第三周：人工智能的伦理问题\n- 分析AI发展中的主要伦理挑战和政策响应\n- 圆桌讨论：AI伦理学家和行业专家\n### 第四周：量子计算的突破\n- 介绍量子计算机的最新进展及其潜在影响\n- 采访：领先的量子技术研究员\n## 收听方式\n- Spotify\nApple Podcasts\n- Google Podcasts\n- 官网直播\n## 加入讨论\n我们鼓励听众通过社交媒体使用 #TechFrontiers 来分享观点和提问。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/54", "category": "Special", "subtype": "markdown_unclosed_error", "level": "hard", "example": "", "docstring": "An exploration of hidden food gems in Paris, featuring traditional French pastries and local dining spots, with recommendations and an invitation to follow the author's blog and social media for more culinary adventures.", "canonical_solution": "# 探索巴黎的隐藏美食宝藏\n\n## 引言\n\n巴黎不仅是光之城，也是美食的天堂。本文将带你探索那些隐藏在繁忙大街小巷中的美食宝藏。\n\n## 传统法式糕点店 —— **甜蜜马卡龙**\n\n位于马雷区的一个不起眼的角落，这家百年糕点店以其手工马卡龙闻名。每一口都是奶油与幸福的完美结合。\n\n### 特色推荐\n\n- **玫瑰味马卡龙**\n- **焦糖海盐马卡龙**\n- **紫罗兰香草马卡龙**\n  \n  ## 本地人的晚餐选择 —— *隐秘的美味*\n  \n  位于塞纳河畔，这家小餐馆提供正宗的法国乡村料理。不容错过的是他们的鸭胸肉，外皮酥脆，内里多汁。\n  \n  ### 必尝美食\n- **慢炖牛肉**\n- **酱汁烤鸡**\n- **海鲜浓汤**\n  \n  ## 结语\n  \n  巴黎的每一个角落都隐藏着令人惊喜的美食，不论你是美食家还是偶尔的食客，这些地方都保证让你的味蕾得到满足。\n  \n  ## 关于作者\n  \n  我是Emily，一名旅居巴黎的美食博主。探索世界的美食使我充满激情。跟随我的博客和社交媒体了解更多精彩内容。", "buggy_code": "\n\n\n# 探索巴黎的隐藏美食宝藏\n\n## 引言\n\n巴黎不仅是光之城，也是美食的天堂。本文将带你探索那些隐藏在繁忙大街小巷中的美食宝藏。\n\n## 传统法式糕点店 —— **甜蜜马卡龙\n\n位于马雷区的一个不起眼的角落，这家百年糕点店以其手工马卡龙闻名。每一口都是奶油与幸福的完美结合。\n\n### 特色推荐\n\n- **玫瑰味马卡龙**\n\n- **焦糖海盐马卡龙**\n\n- **紫罗兰香草马卡龙**\n  \n  ## 本地人的晚餐选择 —— *隐秘的美味*\n  \n  位于塞纳河畔，这家小餐馆提供正宗的法国乡村料理。不容错过的是他们的鸭胸肉，外皮酥脆，内里多汁。\n  \n  ### 必尝美食\n\n- **慢炖牛肉**\n\n- **酱汁烤鸡**\n\n- **海鲜浓汤**\n  \n  ## 结语\n  \n  巴黎的每一个角落都隐藏着令人惊喜的美食，不论你是美食家还是偶尔的食客，这些地方都保证让你的味蕾得到满足。\n  \n  ## 关于作者\n  \n  我是Emily，一名旅居巴黎的美食博主。探索世界的美食使我充满激情。跟随我的博客和社交媒体了解更多精彩内容。", "bug_with_line_numbers": "1| # 探索巴黎的隐藏美食宝藏\n2| ## 引言\n3| 巴黎不仅是光之城，也是美食的天堂。本文将带你探索那些隐藏在繁忙大街小巷中的美食宝藏。\n4| ## 传统法式糕点店 —— **甜蜜马卡龙\n5| 位于马雷区的一个不起眼的角落，这家百年糕点店以其手工马卡龙闻名。每一口都是奶油与幸福的完美结合。\n6| ### 特色推荐\n7| - **玫瑰味马卡龙**\n8| - **焦糖海盐马卡龙**\n9| - **紫罗兰香草马卡龙**\n10|   \n11|   ## 本地人的晚餐选择 —— *隐秘的美味*\n12|   \n13|   位于塞纳河畔，这家小餐馆提供正宗的法国乡村料理。不容错过的是他们的鸭胸肉，外皮酥脆，内里多汁。\n14|   \n15|   ### 必尝美食\n16| - **慢炖牛肉**\n17| - **酱汁烤鸡**\n18| - **海鲜浓汤**\n19|   \n20|   ## 结语\n21|   \n22|   巴黎的每一个角落都隐藏着令人惊喜的美食，不论你是美食家还是偶尔的食客，这些地方都保证让你的味蕾得到满足。\n23|   \n24|   ## 关于作者\n25|   \n26|   我是Emily，一名旅居巴黎的美食博主。探索世界的美食使我充满激情。跟随我的博客和社交媒体了解更多精彩内容。", "fragment_lines": [4], "fragment_content": ["## 传统法式糕点店 —— **甜蜜马卡龙"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 探索巴黎的隐藏美食宝藏\n\n## 引言\n\n巴黎不仅是光之城，也是美食的天堂。本文将带你探索那些隐藏在繁忙大街小巷中的美食宝藏。\n\n## 传统法式糕点店 —— **甜蜜马卡龙\n\n位于马雷区的一个不起眼的角落，这家百年糕点店以其手工马卡龙闻名。每一口都是奶油与幸福的完美结合。\n\n### 特色推荐\n\n- **玫瑰味马卡龙**\n\n- **焦糖海盐马卡龙**\n\n- **紫罗兰香草马卡龙**\n  \n  ## 本地人的晚餐选择 —— *隐秘的美味*\n  \n  位于塞纳河畔，这家小餐馆提供正宗的法国乡村料理。不容错过的是他们的鸭胸肉，外皮酥脆，内里多汁。\n  \n  ### 必尝美食\n\n- **慢炖牛肉**\n\n- **酱汁烤鸡**\n\n- **海鲜浓汤**\n  \n  ## 结语\n  \n  巴黎的每一个角落都隐藏着令人惊喜的美食，不论你是美食家还是偶尔的食客，这些地方都保证让你的味蕾得到满足。\n  \n  ## 关于作者\n  \n  我是Emily，一名旅居巴黎的美食博主。探索世界的美食使我充满激情。跟随我的博客和社交媒体了解更多精彩内容。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/55", "category": "Multiple", "subtype": "double_bug", "level": "hard", "example": "", "docstring": "A promotional letter to customers introducing a new range of products for the month, including an energy-efficient washing machine and a smart robotic vacuum cleaner, along with an exclusive discount code for a limited time.", "canonical_solution": "# 月度新品发布 - 独家优惠等你来拿\n\n## 亲爱的 [姓名],\n\n我们很高兴向你介绍本月的全新产品系列，绝对能满足你的所有需求！\n\n## 新品预览\n\n- **超级节能洗衣机**\n  - 高效节能，每次洗涤最高可节省30%的电能。\n- **智能机器人吸尘器**\n  - 自动规划清洁路径，释放你的双手。\n    \n    ## 独家优惠\n    \n    仅限本周，使用优惠码 `NEW20` 即可享受20%的折扣！\n    \n    ## 如何购买\n    \n    点击下方链接，直接跳转到购物页面：\n    [购买链接](http://example.com)\n    感谢你对我们品牌的支持！希望你喜欢这些新品。\n    祝购物愉快，\n    **你的 [公司名称] 团队**", "buggy_code": "# 月度新品发布 - 独家优惠等你来拿\n\n## 亲爱的 [姓名],\n\n我们很高兴向你介绍本月的全新产品系列，绝对能满足你的所有需求！\n\n## 新品预览\n\n- **超级节能洗衣机\n  - 高效节能，每次洗涤最高可节省30%的电能。\n- **智能机器人吸尘器**\n  - 自动规划清洁路径，释放你的双手。\n    \n    ## 独家优惠\n    \n    仅限本周，使用优惠码 `NEW20` 即可享受20%的折扣！\n    \n    ## 如何购买\n    \n    点击下方链接，直接跳转到购物页面：\n    [购买链接）[http://example.com)(http://example.com)\n    感谢你对我们品牌的支持！希望你喜欢这些新品。\n    祝购物愉快，\n    **你的 [公司名称] 团队**", "bug_with_line_numbers": "   1 | # 月度新品发布 - 独家优惠等你来拿\n   2 | ## 亲爱的 [姓名],\n   3 | 我们很高兴向你介绍本月的全新产品系列，绝对能满足你的所有需求！\n   4 | ## 新品预览\n   5 | - **超级节能洗衣机\n   6 |   - 高效节能，每次洗涤最高可节省30%的电能。\n   7 | - **智能机器人吸尘器**\n   8 |   - 自动规划清洁路径，释放你的双手。\n   9 |     ## 独家优惠\n  10 |     仅限本周，使用优惠码 `NEW20` 即可享受20%的折扣！\n  11 |     ## 如何购买\n  12 |     点击下方链接，直接跳转到购物页面：\n  13 |     [购买链接）[http://example.com)(http://example.com)\n  14 |     感谢你对我们品牌的支持！希望你喜欢这些新品。\n  15 |     祝购物愉快，\n  16 |     **你的 [公司名称] 团队**", "fragment_lines": [5, 13], "fragment_content": ["- **超级节能洗衣机", "[购买链接）[http://example.com)(http://example.com)"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 月度新品发布 - 独家优惠等你来拿\n\n## 亲爱的 [姓名],\n\n我们很高兴向你介绍本月的全新产品系列，绝对能满足你的所有需求！\n\n## 新品预览\n\n- **超级节能洗衣机\n  - 高效节能，每次洗涤最高可节省30%的电能。\n- **智能机器人吸尘器**\n  - 自动规划清洁路径，释放你的双手。\n    \n    ## 独家优惠\n    \n    仅限本周，使用优惠码 `NEW20` 即可享受20%的折扣！\n    \n    ## 如何购买\n    \n    点击下方链接，直接跳转到购物页面：\n    [购买链接）[http://example.com)(http://example.com)\n    感谢你对我们品牌的支持！希望你喜欢这些新品。\n    祝购物愉快，\n    **你的 [公司名称] 团队**\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/56", "category": "Multiple", "subtype": "double_bug", "level": "medium", "example": "", "docstring": "A reflection on the book \"The Shape of Time\" by Michael Crichton, which delves into the non-linear nature of time and its impact on modern science. The review praises the author's unique perspective and recommends the book to physics enthusiasts and deep thinkers.", "canonical_solution": "# 《时间的形状》读后感\n\n## 书籍信息\n\n- **作者**：迈克尔·克莱顿\n- **出版年份**：2023年\n- **主题**：探索时间的非线性性质及其对现代科学的影响\n  \n  ## 内容摘要\n  \n  《时间的形状》是一本关于时间理论的科普书籍，作者通过简单的语言和生动的例子，让读者能够理解复杂的物理学概念。\n  \n  ## 读后感\n  \n  本书不仅科普了时间的物理属性，更深入探讨了时间观念如何塑造我们的世界观。作者的观点独到，使得这本书不只是科普读物，更像是哲学作品。\n  \n  ### 强烈推荐给：\n- 对物理学感兴趣的读者\n- 喜欢思考生命意义的朋友\n  \n  ## 评分\n  \n  本书对于普通读者来说可能稍显深奥，但它开启的思考之门无疑是宝贵的。", "buggy_code": "# 《时间的形状》读后感\n\n##书籍信息\n\n- **作者**：迈克尔·克莱顿\n- **出版年份**：2023年\n- **主题*：探索时间的非线性性质及其对现代科学的影响\n  \n  ## 内容摘要\n  \n  《时间的形状》是一本关于时间理论的科普书籍，作者通过简单的语言和生动的例子，让读者能够理解复杂的物理学概念。\n  \n  ## 读后感\n  \n  本书不仅科普了时间的物理属性，更深入探讨了时间观念如何塑造我们的世界观。作者的观点独到，使得这本书不只是科普读物，更像是哲学作品。\n  \n  ### 强烈推荐给：\n- 对物理学感兴趣的读者\n- 喜欢思考生命意义的朋友\n  \n  ## 评分\n  \n  本书对于普通读者来说可能稍显深奥，但它开启的思考之门无疑是宝贵的。", "bug_with_line_numbers": "   1 | # 《时间的形状》读后感\n   2 | ##书籍信息\n   3 | - **作者**：迈克尔·克莱顿\n   4 | - **出版年份**：2023年\n   5 | - **主题*：探索时间的非线性性质及其对现代科学的影响\n   6 |   ## 内容摘要\n   7 |   《时间的形状》是一本关于时间理论的科普书籍，作者通过简单的语言和生动的例子，让读者能够理解复杂的物理学概念。\n   8 |   ## 读后感\n   9 |   本书不仅科普了时间的物理属性，更深入探讨了时间观念如何塑造我们的世界观。作者的观点独到，使得这本书不只是科普读物，更像是哲学作品。\n  10 |   ### 强烈推荐给：\n  11 | - 对物理学感兴趣的读者\n  12 | - 喜欢思考生命意义的朋友\n  13 |   ## 评分\n  14 |   本书对于普通读者来说可能稍显深奥，但它开启的思考之门无疑是宝贵的。", "fragment_lines": [2, 5], "fragment_content": ["##书籍信息", "- **主题*：探索时间的非线性性质及其对现代科学的影响"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 《时间的形状》读后感\n\n##书籍信息\n\n- **作者**：迈克尔·克莱顿\n- **出版年份**：2023年\n- **主题*：探索时间的非线性性质及其对现代科学的影响\n  \n  ## 内容摘要\n  \n  《时间的形状》是一本关于时间理论的科普书籍，作者通过简单的语言和生动的例子，让读者能够理解复杂的物理学概念。\n  \n  ## 读后感\n  \n  本书不仅科普了时间的物理属性，更深入探讨了时间观念如何塑造我们的世界观。作者的观点独到，使得这本书不只是科普读物，更像是哲学作品。\n  \n  ### 强烈推荐给：\n- 对物理学感兴趣的读者\n- 喜欢思考生命意义的朋友\n  \n  ## 评分\n  \n  本书对于普通读者来说可能稍显深奥，但它开启的思考之门无疑是宝贵的。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/57", "category": "Special", "subtype": "markdown_title_error", "level": "medium", "example": "", "docstring": "A detailed plan for a healthy diet over a week, suggesting balanced meals for each day of the week. It includes breakfast, lunch, and dinner options, along with health tips for a nutritious lifestyle.", "canonical_solution": "# 一周健康饮食计划\n\n## 引言\n\n这份一周健康饮食计划旨在帮助你平衡营养摄入，增强体质。\n\n## 每日饮食安排\n\n### 星期一\n\n- **早餐**: 燕麦粥，加入蓝莓和杏仁\n- **午餐**: 土豆烤鸡配蔬菜沙拉\n- **晚餐**: 烤三文鱼，配煮西兰花和胡萝卜\n  \n  ### 星期二\n- **早餐**: 酸奶，混合新鲜水果和蜂蜜\n- **午餐**: 番茄意面配全麦面包\n- **晚餐**: 牛肉丸子配藜麦和绿叶菜\n  \n  ### 星期三\n- **早餐**: 煎蛋，搭配烤番茄和菠菜\n- **午餐**: 土耳其卷饼，内含烤鸡肉和蔬菜\n- **晚餐**: 烤虾配南瓜泥和青豆\n  \n  ## 健康小贴士\n- 保证每餐有足够的蔬菜。\n- 适量增加蛋白质的摄入。\n- 减少加工食品和高糖食品的摄入。\n  \n  ## 总结\n  \n  遵循这个饮食计划，可以帮助你改善饮食习惯，更好地掌握每日所需的营养平衡。", "buggy_code": "\n\n# 一周健康饮食计划\n\n## 引言\n\n这份一周健康饮食计划旨在帮助你平衡营养摄入，增强体质。\n\n## 每日饮食安排\n\n### 星期一\n\n- **早餐**: 燕麦粥，加入蓝莓和杏仁\n\n- **午餐**: 土豆烤鸡配蔬菜沙拉\n\n- **晚餐**: 烤三文鱼，配煮西兰花和胡萝卜\n  \n  ### 星期二\n\n- **早餐**: 酸奶，混合新鲜水果和蜂蜜\n\n- **午餐**: 番茄意面配全麦面包\n\n- **晚餐**: 牛肉丸子配藜麦和绿叶菜\n  \n  ### 星期三\n\n- **早餐**: 煎蛋，搭配烤番茄和菠菜\n\n- **午餐**: 土耳其卷饼，内含烤鸡肉和蔬菜\n\n- **晚餐**: 烤虾配南瓜泥和青豆\n  \n  ## 健康小贴士\n\n- 保证每餐有足够的蔬菜。\n\n- 适量增加蛋白质的摄入。\n\n- 减少加工食品和高糖食品的摄入。\n  \n  ##总结\n  \n  遵循这个饮食计划，可以帮助你改善饮食习惯，更好地掌握每日所需的营养平衡。", "bug_with_line_numbers": "1| # 一周健康饮食计划\n2| ## 引言\n3| 这份一周健康饮食计划旨在帮助你平衡营养摄入，增强体质。\n4| ## 每日饮食安排\n5| ### 星期一\n6| - **早餐**: 燕麦粥，加入蓝莓和杏仁\n7| - **午餐**: 土豆烤鸡配蔬菜沙拉\n8| - **晚餐**: 烤三文鱼，配煮西兰花和胡萝卜\n9|   \n10|   ### 星期二\n11| - **早餐**: 酸奶，混合新鲜水果和蜂蜜\n12| - **午餐**: 番茄意面配全麦面包\n13| - **晚餐**: 牛肉丸子配藜麦和绿叶菜\n14|   \n15|   ### 星期三\n16| - **早餐**: 煎蛋，搭配烤番茄和菠菜\n17| - **午餐**: 土耳其卷饼，内含烤鸡肉和蔬菜\n18| - **晚餐**: 烤虾配南瓜泥和青豆\n19|   \n20|   ## 健康小贴士\n21| - 保证每餐有足够的蔬菜。\n22| - 适量增加蛋白质的摄入。\n23| - 减少加工食品和高糖食品的摄入。\n24|   \n25|   ##总结\n26|   \n27|   遵循这个饮食计划，可以帮助你改善饮食习惯，更好地掌握每日所需的营养平衡。", "fragment_lines": [25], "fragment_content": ["##总结"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 一周健康饮食计划\n\n## 引言\n\n这份一周健康饮食计划旨在帮助你平衡营养摄入，增强体质。\n\n## 每日饮食安排\n\n### 星期一\n\n- **早餐**: 燕麦粥，加入蓝莓和杏仁\n\n- **午餐**: 土豆烤鸡配蔬菜沙拉\n\n- **晚餐**: 烤三文鱼，配煮西兰花和胡萝卜\n  \n  ### 星期二\n\n- **早餐**: 酸奶，混合新鲜水果和蜂蜜\n\n- **午餐**: 番茄意面配全麦面包\n\n- **晚餐**: 牛肉丸子配藜麦和绿叶菜\n  \n  ### 星期三\n\n- **早餐**: 煎蛋，搭配烤番茄和菠菜\n\n- **午餐**: 土耳其卷饼，内含烤鸡肉和蔬菜\n\n- **晚餐**: 烤虾配南瓜泥和青豆\n  \n  ## 健康小贴士\n\n- 保证每餐有足够的蔬菜。\n\n- 适量增加蛋白质的摄入。\n\n- 减少加工食品和高糖食品的摄入。\n  \n  ##总结\n  \n  遵循这个饮食计划，可以帮助你改善饮食习惯，更好地掌握每日所需的营养平衡。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/58", "category": "Multiple", "subtype": "double_bug", "level": "medium", "example": "", "docstring": "A travelogue documenting a three-day trip to Bali, including visits to Kuta Beach, Ubud Palace, and at Nusa Dua. It also provides travel tips and a summary of the memorable cultural and natural experiences.", "canonical_solution": "# 初学者摄影教程：如何拍摄夜景\n\n## 设备准备\n\n- **相机**: 推荐使用DSLR或具有手动模式的相机。\n- **三脚架**: 稳定相机，防止拍摄时的抖动。\n- **遥控快门**: 减少触碰相机时产生的震动。\n  \n  ## 拍摄步骤\n  \n  ### 设置相机\n- 将相机设置为手动模式。\n- 调整ISO至100，减少噪点。\n- 设置光圈为f/8以获得较大的景深。\n- 使用慢门速度，例如5秒或更长时间，根据现场光线调整。\n  \n  ### 构图技巧\n- 使用三分法则来构图，使画面更平衡。\n- 尝试找到有趣的前景，如路灯或建筑，增加画面层次。\n  \n  ### 拍摄与评估\n- 使用遥控快门拍摄，避免手动按下快门造成相机抖动。\n- 检查照片是否清晰，曝光是否合适。\n- 根据需要调整参数重新拍摄。\n  \n  ## 后期处理\n- 调整曝光和对比度，使夜景更加明亮而不失真。\n- 增强颜色饱和度，让照片色彩更丰富。\n  \n  ## 结语\n  \n  掌握夜景摄影技巧需要实践和耐心，不断试验不同的设置，以找到最适合自己风格的拍摄方式。", "buggy_code": "# 初学者摄影教程：如何拍摄夜景\n\n## 设备准备\n\n- **相机**: 推荐使用DSLR或具有手动模式的相机。\n- 三脚架**: 稳定相机，防止拍摄时的抖动。\n- **遥控快门**: 减少触碰相机时产生的震动。\n  \n  ## 拍摄步骤\n  \n  ### 设置相机\n- 将相机设置为手动模式。\n- 调整ISO至100，减少噪点。\n- 设置光圈为f/8以获得较大的景深。\n- 使用慢门速度，例如5秒或更长时间，根据现场光线调整。\n  \n  ### 构图技巧\n- 使用三分法则来构图，使画面更平衡。\n- 尝试找到有趣的前景，如路灯或建筑，增加画面层次。\n  \n  ### 拍摄与评估\n- 使用遥控快门拍摄，避免手动按下快门造成相机抖动。\n- 检查照片是否清晰，曝光是否合适。\n- 根据需要调整参数重新拍摄。\n  \n  ## 后期处理\n- 调整曝光和对比度，使夜景更加明亮而不失真。\n- 增强颜色饱和度，让照片色彩更丰富。\n  \n  ##结语\n  \n  掌握夜景摄影技巧需要实践和耐心，不断试验不同的设置，以找到最适合自己风格的拍摄方式。", "bug_with_line_numbers": "   1 | # 初学者摄影教程：如何拍摄夜景\n   2 | ## 设备准备\n   3 | - **相机**: 推荐使用DSLR或具有手动模式的相机。\n   4 | - 三脚架**: 稳定相机，防止拍摄时的抖动。\n   5 | - **遥控快门**: 减少触碰相机时产生的震动。\n   6 |   ## 拍摄步骤\n   7 |   ### 设置相机\n   8 | - 将相机设置为手动模式。\n   9 | - 调整ISO至100，减少噪点。\n  10 | - 设置光圈为f/8以获得较大的景深。\n  11 | - 使用慢门速度，例如5秒或更长时间，根据现场光线调整。\n  12 |   ### 构图技巧\n  13 | - 使用三分法则来构图，使画面更平衡。\n  14 | - 尝试找到有趣的前景，如路灯或建筑，增加画面层次。\n  15 |   ### 拍摄与评估\n  16 | - 使用遥控快门拍摄，避免手动按下快门造成相机抖动。\n  17 | - 检查照片是否清晰，曝光是否合适。\n  18 | - 根据需要调整参数重新拍摄。\n  19 |   ## 后期处理\n  20 | - 调整曝光和对比度，使夜景更加明亮而不失真。\n  21 | - 增强颜色饱和度，让照片色彩更丰富。\n  22 |   ##结语\n  23 |   掌握夜景摄影技巧需要实践和耐心，不断试验不同的设置，以找到最适合自己风格的拍摄方式。", "fragment_lines": [4, 22], "fragment_content": ["- 三脚架**: 稳定相机，防止拍摄时的抖动。", "##结语"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 初学者摄影教程：如何拍摄夜景\n\n## 设备准备\n\n- **相机**: 推荐使用DSLR或具有手动模式的相机。\n- 三脚架**: 稳定相机，防止拍摄时的抖动。\n- **遥控快门**: 减少触碰相机时产生的震动。\n  \n  ## 拍摄步骤\n  \n  ### 设置相机\n- 将相机设置为手动模式。\n- 调整ISO至100，减少噪点。\n- 设置光圈为f/8以获得较大的景深。\n- 使用慢门速度，例如5秒或更长时间，根据现场光线调整。\n  \n  ### 构图技巧\n- 使用三分法则来构图，使画面更平衡。\n- 尝试找到有趣的前景，如路灯或建筑，增加画面层次。\n  \n  ### 拍摄与评估\n- 使用遥控快门拍摄，避免手动按下快门造成相机抖动。\n- 检查照片是否清晰，曝光是否合适。\n- 根据需要调整参数重新拍摄。\n  \n  ## 后期处理\n- 调整曝光和对比度，使夜景更加明亮而不失真。\n- 增强颜色饱和度，让照片色彩更丰富。\n  \n  ##结语\n  \n  掌握夜景摄影技巧需要实践和耐心，不断试验不同的设置，以找到最适合自己风格的拍摄方式。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/59", "category": "Special", "subtype": "markdown_title_error", "level": "easy", "example": "", "docstring": "A travelogue documenting a three-day trip to Bali, including visits to Kuta Beach, Ubud Palace, and at Nusa Dua. It also provides travel tips and a summary of the memorable cultural and natural experiences.", "canonical_solution": "# 我的巴厘岛冒险之旅\n\n## 第一天：到达和初探\n\n- **地点**: 库塔海滩\n- **活动**:\n  - 抵达巴厘岛，入住海滨酒店。\n  - 下午沿着库塔海滩散步，欣赏落日美景。\n    \n    ## 第二天：文化探索\n- **地点**: 乌布皇宫和乌布市场\n- **活动**:\n  - 参观乌布皇宫，了解巴厘岛的历史和文化。\n  - 在乌布市场购买手工艺品和当地特产。\n    \n    ## 第三天：海岛探险\n- **地点**: 努沙杜瓦\n- **活动**:\n  - 浮潜观察五彩缤纷的珊瑚礁和热带鱼。\n  - 海滩晚宴，尝试传统巴厘岛烤猪。\n    \n    ## 旅行小贴士\n- 旅行期间多补充水分和使用防晒霜。\n- 尝试当地美食，如萨廷和米加仑。\n  \n  ## 总结\n  \n  这次巴厘岛之旅是一次难忘的文化和自然之旅，让人心旷神怡。", "buggy_code": "\n\n# 我的巴厘岛冒险之旅\n\n## 第一天：到达和初探\n\n- **地点**: 库塔海滩\n\n- **活动**:\n  \n  - 抵达巴厘岛，入住海滨酒店。\n  \n  - 下午沿着库塔海滩散步，欣赏落日美景。\n\n    ##第二天：文化探索\n\n- **地点**: 乌布皇宫和乌布市场\n\n- **活动**:\n  \n  - 参观乌布皇宫，了解巴厘岛的历史和文化。\n  \n  - 在乌布市场购买手工艺品和当地特产。\n    \n    ## 第三天：海岛探险\n\n- **地点**: 努沙杜瓦\n\n- **活动**:\n  \n  - 浮潜观察五彩缤纷的珊瑚礁和热带鱼。\n  \n  - 海滩晚宴，尝试传统巴厘岛烤猪。\n    \n    ## 旅行小贴士\n\n- 旅行期间多补充水分和使用防晒霜。\n\n- 尝试当地美食，如萨廷和米加仑。\n  \n  ## 总结\n  \n  这次巴厘岛之旅是一次难忘的文化和自然之旅，让人心旷神怡。", "bug_with_line_numbers": "1| # 我的巴厘岛冒险之旅\n2| ## 第一天：到达和初探\n3| - **地点**: 库塔海滩\n4| - **活动**:\n5|   \n6|   - 抵达巴厘岛，入住海滨酒店。\n7|   \n8|   - 下午沿着库塔海滩散步，欣赏落日美景。\n9|     ##第二天：文化探索\n10| - **地点**: 乌布皇宫和乌布市场\n11| - **活动**:\n12|   \n13|   - 参观乌布皇宫，了解巴厘岛的历史和文化。\n14|   \n15|   - 在乌布市场购买手工艺品和当地特产。\n16|     \n17|     ## 第三天：海岛探险\n18| - **地点**: 努沙杜瓦\n19| - **活动**:\n20|   \n21|   - 浮潜观察五彩缤纷的珊瑚礁和热带鱼。\n22|   \n23|   - 海滩晚宴，尝试传统巴厘岛烤猪。\n24|     \n25|     ## 旅行小贴士\n26| - 旅行期间多补充水分和使用防晒霜。\n27| - 尝试当地美食，如萨廷和米加仑。\n28|   \n29|   ## 总结\n30|   \n31|   这次巴厘岛之旅是一次难忘的文化和自然之旅，让人心旷神怡。", "fragment_lines": [9], "fragment_content": ["##第二天：文化探索"], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# 我的巴厘岛冒险之旅\n\n## 第一天：到达和初探\n\n- **地点**: 库塔海滩\n\n- **活动**:\n  \n  - 抵达巴厘岛，入住海滨酒店。\n  \n  - 下午沿着库塔海滩散步，欣赏落日美景。\n\n    ##第二天：文化探索\n\n- **地点**: 乌布皇宫和乌布市场\n\n- **活动**:\n  \n  - 参观乌布皇宫，了解巴厘岛的历史和文化。\n  \n  - 在乌布市场购买手工艺品和当地特产。\n    \n    ## 第三天：海岛探险\n\n- **地点**: 努沙杜瓦\n\n- **活动**:\n  \n  - 浮潜观察五彩缤纷的珊瑚礁和热带鱼。\n  \n  - 海滩晚宴，尝试传统巴厘岛烤猪。\n    \n    ## 旅行小贴士\n\n- 旅行期间多补充水分和使用防晒霜。\n\n- 尝试当地美食，如萨廷和米加仑。\n  \n  ## 总结\n  \n  这次巴厘岛之旅是一次难忘的文化和自然之旅，让人心旷神怡。\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
{"question_id": "Markdown/60", "category": "Special", "subtype": "markdown_unclosed_error", "level": "easy", "example": "", "docstring": "An overview of a C++ server programming library suitable for both Windows and Linux platforms. It covers the library's features, usage instructions, third-party integrations, and a brief introduction to its programming model.", "canonical_solution": "# Engine\n\nC++服务器编程底层库\n\n## 特点\n\n1. Windows，Linux双平台（Windows下为静态库，主要方便开发者调试；Linux下为动态库，用于生产环境部署）\n2. 基本包含集成服务器常用模块（数学、文件系统、配置、日志、网络、脚本、时间、多线程等）\n3. 二次开发无平台配置，无其他依赖\n4. 基于C++11开发\n   \n   ## 使用\n   \n   项目使用[xmake](https://xmake.io/#/)管理，使用方法详见xmake手册\n   \n   ## 集成第三方说明\n5. Zip使用[miniz](https://github.com/richgel999/miniz/releases/download/2.1.0/miniz-2.1.0.zip) v2.1.0.\n6. [Lua](http://www.lua.org/ftp/lua-5.3.5.tar.gz) v5.3.5.\n7. 集成[Jsoncpp](https://github.com/open-source-parsers/jsoncpp) v1.8.4.\n8. [hiredis](https://github.com/wasppdotorg/hiredis-for-windows) v0.13.3.\n   \n   ## 模块\n   \n   ### 程序模型\n   \n   ```cpp\n   \n   ```", "buggy_code": "\n\n# Engine\n\nC++服务器编程底层库\n\n## 特点\n\n1. Windows，Linux双平台（Windows下为静态库，主要方便开发者调试；Linux下为动态库，用于生产环境部署）\n\n2. 基本包含集成服务器常用模块（数学、文件系统、配置、日志、网络、脚本、时间、多线程等）\n\n3. 二次开发无平台配置，无其他依赖\n\n4. 基于C++11开发\n   \n   ## 使用\n   \n   项目使用[xmake](https://xmake.io/#/)管理，使用方法详见xmake手册\n   \n   ## 集成第三方说明\n\n5. Zip使用[miniz）[https://github.com/richgel999/miniz/releases/download/2.1.0/miniz-2.1.0.zip) v2.1.0.\n\n6. [Lua](http://www.lua.org/ftp/lua-5.3.5.tar.gz) v5.3.5.\n\n7. 集成[Jsoncpp](https://github.com/open-source-parsers/jsoncpp) v1.8.4.\n\n8. [hiredis](https://github.com/wasppdotorg/hiredis-for-windows) v0.13.3.\n   \n   ## 模块\n   \n   ### 程序模型\n   \n   ```cpp\n   \n   ```", "bug_with_line_numbers": "1| # Engine\n2| C++服务器编程底层库\n3| ## 特点\n4| 1. Windows，Linux双平台（Windows下为静态库，主要方便开发者调试；Linux下为动态库，用于生产环境部署）\n5| 2. 基本包含集成服务器常用模块（数学、文件系统、配置、日志、网络、脚本、时间、多线程等）\n6| 3. 二次开发无平台配置，无其他依赖\n7| 4. 基于C++11开发\n8|    \n9|    ## 使用\n10|    \n11|    项目使用[xmake](https://xmake.io/#/)管理，使用方法详见xmake手册\n12|    \n13|    ## 集成第三方说明\n14| 5. Zip使用[miniz）[https://github.com/richgel999/miniz/releases/download/2.1.0/miniz-2.1.0.zip) v2.1.0.\n15| 6. [Lua](http://www.lua.org/ftp/lua-5.3.5.tar.gz) v5.3.5.\n16| 7. 集成[Jsoncpp](https://github.com/open-source-parsers/jsoncpp) v1.8.4.\n17| 8. [hiredis](https://github.com/wasppdotorg/hiredis-for-windows) v0.13.3.\n18|    \n19|    ## 模块\n20|    \n21|    ### 程序模型\n22|    \n23|    ```cpp\n24|    \n25|    ```", "fragment_lines": [14], "fragment_content": ["5. Zip使用[miniz）[https://github.com/richgel999/miniz/releases/download/2.1.0/miniz-2.1.0.zip) v2.1.0."], "test": "", "instruction": "Observe the following faulty Markdown code and its example\ncode:\n```markdown\n# Engine\n\nC++服务器编程底层库\n\n## 特点\n\n1. Windows，Linux双平台（Windows下为静态库，主要方便开发者调试；Linux下为动态库，用于生产环境部署）\n\n2. 基本包含集成服务器常用模块（数学、文件系统、配置、日志、网络、脚本、时间、多线程等）\n\n3. 二次开发无平台配置，无其他依赖\n\n4. 基于C++11开发\n   \n   ## 使用\n   \n   项目使用[xmake](https://xmake.io/#/)管理，使用方法详见xmake手册\n   \n   ## 集成第三方说明\n\n5. Zip使用[miniz）[https://github.com/richgel999/miniz/releases/download/2.1.0/miniz-2.1.0.zip) v2.1.0.\n\n6. [Lua](http://www.lua.org/ftp/lua-5.3.5.tar.gz) v5.3.5.\n\n7. 集成[Jsoncpp](https://github.com/open-source-parsers/jsoncpp) v1.8.4.\n\n8. [hiredis](https://github.com/wasppdotorg/hiredis-for-windows) v0.13.3.\n   \n   ## 模块\n   \n   ### 程序模型\n   \n   ```cpp\n   \n   ```\n```\ncode example:\n\nFix bugs in the given code snippet. The fixed code must be placed between ```markdown```. Do not generate any test, main,example usage or check code!\n"}
